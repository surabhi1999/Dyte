{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport shallowEqual from '../utils/shallowEqual';\nexport function isEveryChildChecked(node, nodes, props) {\n  var childrenKey = props.childrenKey;\n  var children = null;\n\n  if (node[childrenKey]) {\n    children = node[childrenKey].filter(function (child) {\n      return nodes[child.refKey] && !nodes[child.refKey].uncheckable;\n    });\n\n    if (!children.length) {\n      return nodes[node.refKey].check;\n    }\n\n    return children.every(function (child) {\n      var _child$childrenKey;\n\n      if ((_child$childrenKey = child[childrenKey]) === null || _child$childrenKey === void 0 ? void 0 : _child$childrenKey.length) {\n        return isEveryChildChecked(child, nodes, props);\n      }\n\n      return nodes[child.refKey].check;\n    });\n  }\n\n  return nodes[node.refKey].check;\n}\nexport function isSomeChildChecked(node, nodes, props) {\n  var childrenKey = props.childrenKey;\n\n  if (!node[childrenKey]) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    var _nodes$child$refKey;\n\n    if ((_nodes$child$refKey = nodes[child.refKey]) === null || _nodes$child$refKey === void 0 ? void 0 : _nodes$child$refKey.check) {\n      return true;\n    }\n\n    return isSomeChildChecked(child, nodes, props);\n  });\n}\n/**\n * 判断第一层节点是否存在有children的节点\n * @param {*} data\n */\n\nexport function isSomeNodeHasChildren(data, childrenKey) {\n  return data.some(function (node) {\n    return node[childrenKey];\n  });\n}\n/**\n * 获取该节点的兄弟节点是否都为 uncheckable\n * @param {*} node\n */\n\nexport function getSiblingNodeUncheckable(node, nodes) {\n  var list = [];\n  var parentNodeRefkey = node.parentNode ? node.parentNode.refKey : '';\n  Object.keys(nodes).forEach(function (refKey) {\n    var _curNode$parentNode;\n\n    var curNode = nodes[refKey];\n\n    if (_isUndefined(node.parentNode) && _isUndefined(curNode.parentNode)) {\n      list.push(curNode);\n    } else if (((_curNode$parentNode = curNode.parentNode) === null || _curNode$parentNode === void 0 ? void 0 : _curNode$parentNode.refKey) === parentNodeRefkey) {\n      list.push(curNode);\n    }\n  });\n  return list.every(function (node) {\n    return node.uncheckable;\n  });\n}\n/**\n * 获取第一层节点是否全部都为 uncheckable\n */\n\nexport function getEveryFisrtLevelNodeUncheckable(nodes) {\n  var list = [];\n  Object.keys(nodes).forEach(function (refKey) {\n    var curNode = nodes[refKey];\n\n    if (!curNode.parentNode) {\n      list.push(curNode);\n    }\n  });\n  return list.every(function (node) {\n    return node.uncheckable;\n  });\n}\n/**\n * 获取节点的是否需要隐藏checkbox\n * @param {*} node\n */\n\nexport function getUncheckableState(node, props) {\n  var _props$uncheckableIte = props.uncheckableItemValues,\n      uncheckableItemValues = _props$uncheckableIte === void 0 ? [] : _props$uncheckableIte,\n      valueKey = props.valueKey;\n  return uncheckableItemValues.some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n}\n/**\n * 获取格式化后的树\n * @param data\n * @param nodes\n * @param props\n */\n\nexport function getFormattedTree(data, nodes, props) {\n  var childrenKey = props.childrenKey;\n  return data.map(function (node) {\n    var formatted = _extends({}, node);\n\n    var curNode = nodes[node.refKey];\n\n    if (curNode) {\n      var _node$childrenKey;\n\n      formatted.check = curNode.check;\n      formatted.expand = curNode.expand;\n      formatted.uncheckable = curNode.uncheckable;\n      formatted.parentNode = curNode.parentNode;\n\n      if (((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) > 0) {\n        formatted[childrenKey] = getFormattedTree(formatted[childrenKey], nodes, props);\n      }\n    }\n\n    return formatted;\n  });\n}\n/**\n * 获取每个节点的disable状态\n * @param {*} node\n */\n\nexport function getDisabledState(nodes, node, props) {\n  var _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n      valueKey = props.valueKey;\n  return disabledItemValues.some(function (value) {\n    return shallowEqual(nodes[node.refKey][valueKey], value);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}