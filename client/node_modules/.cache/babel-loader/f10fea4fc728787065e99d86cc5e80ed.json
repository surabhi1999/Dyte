{"ast":null,"code":"export function setInlineStyles(node, styles) {\n  if (styles !== null) {\n    Object.keys(styles).forEach(function (key) {\n      if (node !== null) {\n        node.style[key] = styles[key];\n      }\n    });\n  }\n}\nexport function setTranslate3d(node, translate) {\n  if (node !== null) {\n    node.style['transform'] = translate ? \"translate3d(\" + translate.x + \"px,\" + translate.y + \"px,0)\" : '';\n  }\n}\nexport function setTransitionDuration(node, duration) {\n  if (node !== null) {\n    node.style['transitionDuration'] = duration ? duration + \"ms\" : '';\n  }\n}\n\nfunction isScrollable(el) {\n  var computedStyle = window.getComputedStyle(el);\n  var overflowRegex = /(auto|scroll)/;\n  var properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.find(function (property) {\n    return overflowRegex.test(computedStyle[property]);\n  });\n}\n\nexport function closest(el, fn) {\n  while (el) {\n    if (fn(el)) {\n      return el;\n    }\n\n    el = el instanceof Element && el.parentNode;\n  }\n\n  return null;\n}\nexport function getPosition(event) {\n  return {\n    x: event.pageX || 0,\n    y: event.pageY || 0\n  };\n}\nexport function getEdgeOffset(node, parent, offset) {\n  if (offset === void 0) {\n    offset = {\n      left: 0,\n      top: 0\n    };\n  }\n\n  if (!node || !parent) {\n    return {};\n  } // Get the actual offsetTop / offsetLeft value, no matter how deep the node is nested\n\n\n  var nodeOffset = {\n    left: offset.left + node.offsetLeft,\n    top: offset.top + node.offsetTop\n  };\n\n  if (node.parentNode === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.parentNode, parent, nodeOffset);\n}\nexport function getScrollingParent(el) {\n  if (!(el instanceof HTMLElement)) {\n    return null;\n  } else if (isScrollable(el)) {\n    return el;\n  } else {\n    return getScrollingParent(el.parentNode);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}