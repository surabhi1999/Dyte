{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport SafeAnchor from '../SafeAnchor';\nimport Ripple from '../Ripple';\nimport { withStyleProps, getUnhandledProps, defaultProps, prefix, isOneOf } from '../utils';\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Button, _React$Component);\n\n  function Button() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props = this.props,\n        active = _this$props.active,\n        disabled = _this$props.disabled,\n        loading = _this$props.loading,\n        block = _this$props.block,\n        className = _this$props.className,\n        classPrefix = _this$props.classPrefix,\n        appearance = _this$props.appearance,\n        children = _this$props.children,\n        ripple = _this$props.ripple,\n        Component = _this$props.componentClass,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"disabled\", \"loading\", \"block\", \"className\", \"classPrefix\", \"appearance\", \"children\", \"ripple\", \"componentClass\"]);\n\n    var unhandled = getUnhandledProps(Button, props);\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, addPrefix(appearance), className, (_classNames = {}, _classNames[addPrefix('active')] = active, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix('loading')] = loading, _classNames[addPrefix('block')] = block, _classNames));\n    var rippleElement = ripple && !isOneOf(appearance, ['link', 'ghost']) ? React.createElement(Ripple, null) : null;\n    var spin = React.createElement(\"span\", {\n      className: addPrefix('spin')\n    });\n\n    if (Component === 'button') {\n      if (unhandled.href) {\n        return React.createElement(SafeAnchor, _extends({}, unhandled, {\n          \"aria-disabled\": disabled,\n          disabled: disabled,\n          className: classes\n        }), loading && spin, children, rippleElement);\n      }\n\n      unhandled.type = unhandled.type || 'button';\n    }\n\n    return React.createElement(Component, _extends({}, unhandled, {\n      disabled: disabled,\n      className: classes\n    }), loading && spin, children, rippleElement);\n  };\n\n  return Button;\n}(React.Component);\n\nButton.propTypes = {\n  appearance: PropTypes.oneOf(['default', 'primary', 'link', 'subtle', 'ghost']),\n  active: PropTypes.bool,\n  componentClass: PropTypes.elementType,\n  children: PropTypes.node,\n  block: PropTypes.bool,\n  loading: PropTypes.bool,\n  disabled: PropTypes.bool,\n  ripple: PropTypes.bool\n};\nButton.defaultProps = {\n  appearance: 'default',\n  ripple: true\n};\nexport default compose(withStyleProps({\n  hasSize: true,\n  hasColor: true\n}), defaultProps({\n  classPrefix: 'btn',\n  componentClass: 'button'\n}))(Button);","map":null,"metadata":{},"sourceType":"module"}