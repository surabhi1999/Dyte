{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _trim from \"lodash/trim\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { setStatic } from 'recompose';\nimport shallowEqual from '../utils/shallowEqual';\nimport Input from '../Input';\nimport AutoCompleteItem from './AutoCompleteItem';\nimport { defaultProps, getUnhandledProps, prefix, refType } from '../utils';\nimport { PickerToggleTrigger, onMenuKeyDown, MenuWrapper } from '../Picker';\nimport { PLACEMENT } from '../constants';\nimport { animationPropTypes } from '../Animation/propTypes';\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(AutoComplete, _React$Component);\n\n  function AutoComplete(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuContainerRef = void 0;\n    _this.triggerRef = void 0;\n\n    _this.getFocusableMenuItems = function () {\n      var data = _this.getData();\n\n      if (!data) {\n        return [];\n      }\n\n      return data.filter(_this.shouldDisplay);\n    };\n\n    _this.shouldDisplay = function (item) {\n      var filterBy = _this.props.filterBy;\n\n      var value = _this.getValue();\n\n      if (typeof filterBy === 'function') {\n        return filterBy(value, item);\n      }\n\n      if (!_trim(value)) {\n        return false;\n      }\n\n      var keyword = (value || '').toLocaleLowerCase();\n      return item.label.toLocaleLowerCase().indexOf(keyword) >= 0;\n    };\n\n    _this.handleChange = function (value, event) {\n      var nextState = {\n        focus: true,\n        focusItemValue: '',\n        value: value\n      };\n\n      _this.setState(nextState);\n\n      _this.handleChangeValue(value, event);\n    };\n\n    _this.handleInputFocus = function (event) {\n      var _this$props$onFocus, _this$props;\n\n      _this.open();\n\n      (_this$props$onFocus = (_this$props = _this.props).onFocus) === null || _this$props$onFocus === void 0 ? void 0 : _this$props$onFocus.call(_this$props, event);\n    };\n\n    _this.handleInputBlur = function (event) {\n      var _this$props$onBlur, _this$props2;\n\n      setTimeout(_this.close, 300);\n      (_this$props$onBlur = (_this$props2 = _this.props).onBlur) === null || _this$props$onBlur === void 0 ? void 0 : _this$props$onBlur.call(_this$props2, event);\n    };\n\n    _this.focusNextMenuItem = function (event) {\n      _this.findNode(function (items, index) {\n        var item = items[index + 1];\n\n        if (!_isUndefined(item)) {\n          var _this$props$onMenuFoc, _this$props3;\n\n          var focusItemValue = item.value;\n\n          _this.setState({\n            focusItemValue: focusItemValue\n          });\n\n          (_this$props$onMenuFoc = (_this$props3 = _this.props).onMenuFocus) === null || _this$props$onMenuFoc === void 0 ? void 0 : _this$props$onMenuFoc.call(_this$props3, focusItemValue, event);\n        }\n      });\n    };\n\n    _this.focusPrevMenuItem = function (event) {\n      _this.findNode(function (items, index) {\n        var item = items[index - 1];\n\n        if (!_isUndefined(item)) {\n          var _this$props$onMenuFoc2, _this$props4;\n\n          var focusItemValue = item.value;\n\n          _this.setState({\n            focusItemValue: focusItemValue\n          });\n\n          (_this$props$onMenuFoc2 = (_this$props4 = _this.props).onMenuFocus) === null || _this$props$onMenuFoc2 === void 0 ? void 0 : _this$props$onMenuFoc2.call(_this$props4, focusItemValue, event);\n        }\n      });\n    };\n\n    _this.selectFocusMenuItem = function (event) {\n      var _this$state = _this.state,\n          focusItemValue = _this$state.focusItemValue,\n          prevValue = _this$state.value;\n\n      if (!focusItemValue) {\n        return;\n      }\n\n      var nextState = {\n        value: focusItemValue,\n        focusItemValue: focusItemValue\n      };\n\n      var data = _this.getData();\n\n      var focusItem = data.find(function (item) {\n        return (item === null || item === void 0 ? void 0 : item.value) === focusItemValue;\n      });\n\n      _this.setState(nextState);\n\n      _this.handleSelect(focusItem, event);\n\n      if (prevValue !== focusItemValue) {\n        _this.handleChangeValue(focusItemValue, event);\n      }\n\n      _this.close();\n    };\n\n    _this.close = function () {\n      _this.setState({\n        focus: false\n      }, _this.props.onClose);\n    };\n\n    _this.open = function () {\n      _this.setState({\n        focus: true\n      }, _this.props.onOpen);\n    };\n\n    _this.handleKeyDown = function (event) {\n      if (!_this.menuContainerRef.current) {\n        return;\n      }\n\n      var _this$props5 = _this.props,\n          onKeyDown = _this$props5.onKeyDown,\n          selectOnEnter = _this$props5.selectOnEnter;\n      onMenuKeyDown(event, {\n        down: _this.focusNextMenuItem,\n        up: _this.focusPrevMenuItem,\n        enter: selectOnEnter ? _this.selectFocusMenuItem : undefined,\n        esc: _this.close\n      });\n      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n    };\n\n    _this.handleChangeValue = function (value, event) {\n      var _this$props$onChange, _this$props6;\n\n      (_this$props$onChange = (_this$props6 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props6, value, event);\n    };\n\n    _this.handleSelect = function (item, event) {\n      var _this$props$onSelect, _this$props7;\n\n      (_this$props$onSelect = (_this$props7 = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props7, item, event);\n    };\n\n    _this.handleItemSelect = function (item, event) {\n      var value = item.value;\n      var prevValue = _this.state.value;\n      var nextState = {\n        value: value,\n        focusItemValue: value\n      };\n\n      _this.setState(nextState);\n\n      _this.handleSelect(item, event);\n\n      if (prevValue !== value) {\n        _this.handleChangeValue(value, event);\n      }\n\n      _this.close();\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    var defaultValue = props.defaultValue;\n    _this.state = {\n      value: defaultValue || '',\n      focus: false,\n      focusItemValue: defaultValue\n    };\n    _this.menuContainerRef = React.createRef();\n    _this.triggerRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = AutoComplete.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    return _isUndefined(value) ? this.state.value : value;\n  };\n\n  _proto.getData = function getData(props) {\n    var _ref = props || this.props,\n        data = _ref.data;\n\n    if (!data) {\n      return [];\n    }\n\n    return data.map(function (item) {\n      if (typeof item === 'string') {\n        return {\n          value: item,\n          label: item\n        };\n      }\n\n      if (typeof item === 'object') {\n        return item;\n      }\n    });\n  };\n\n  _proto.findNode = function findNode(focus) {\n    var items = this.getFocusableMenuItems();\n    var focusItemValue = this.state.focusItemValue;\n\n    for (var i = 0; i < items.length; i += 1) {\n      if (shallowEqual(focusItemValue, items[i].value)) {\n        focus(items, i);\n        return;\n      }\n    }\n\n    focus(items, -1);\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this2 = this;\n\n    var _this$props8 = this.props,\n        renderItem = _this$props8.renderItem,\n        menuClassName = _this$props8.menuClassName;\n    var data = this.getData();\n    var focusItemValue = this.state.focusItemValue;\n    var classes = classNames(this.addPrefix('menu'), menuClassName);\n    var items = data.filter(this.shouldDisplay);\n    return React.createElement(MenuWrapper, {\n      className: classes,\n      onKeyDown: this.handleKeyDown,\n      ref: this.menuContainerRef\n    }, React.createElement(\"ul\", {\n      role: \"menu\"\n    }, items.map(function (item) {\n      return React.createElement(AutoCompleteItem, {\n        key: item.value,\n        focus: focusItemValue === item.value,\n        itemData: item,\n        onSelect: _this2.handleItemSelect,\n        renderItem: renderItem\n      }, item.label);\n    })));\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props9 = this.props,\n        disabled = _this$props9.disabled,\n        className = _this$props9.className,\n        classPrefix = _this$props9.classPrefix,\n        open = _this$props9.open,\n        style = _this$props9.style,\n        rest = _objectWithoutPropertiesLoose(_this$props9, [\"disabled\", \"className\", \"classPrefix\", \"open\", \"style\"]);\n\n    var data = this.getData();\n    var value = this.getValue();\n    var unhandled = getUnhandledProps(AutoComplete, rest);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[this.addPrefix('disabled')] = disabled, _classNames));\n    var hasItems = data.filter(this.shouldDisplay).length > 0;\n    return React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      trigger: ['click', 'focus'],\n      open: open || this.state.focus && hasItems,\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(Input, _extends({}, unhandled, {\n      disabled: disabled,\n      value: value,\n      onBlur: this.handleInputBlur,\n      onFocus: this.handleInputFocus,\n      onChange: this.handleChange,\n      onKeyDown: this.handleKeyDown\n    }))));\n  };\n\n  return AutoComplete;\n}(React.Component);\n\nAutoComplete.propTypes = _extends({}, animationPropTypes, {\n  data: PropTypes.array,\n  disabled: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onChange: PropTypes.func,\n  classPrefix: PropTypes.string,\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  className: PropTypes.string,\n  menuClassName: PropTypes.string,\n  placement: PropTypes.oneOf(PLACEMENT),\n  onFocus: PropTypes.func,\n  onMenuFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n\n  /** @deprecated Use `onClose` instead */\n  onHide: PropTypes.func,\n  renderItem: PropTypes.func,\n  style: PropTypes.object,\n  open: PropTypes.bool,\n  selectOnEnter: PropTypes.bool,\n  filterBy: PropTypes.func,\n  positionRef: refType\n});\nAutoComplete.defaultProps = {\n  data: [],\n  placement: 'bottomStart',\n  selectOnEnter: true\n};\nvar EnhancedAutoComplete = defaultProps({\n  classPrefix: 'auto-complete'\n})(AutoComplete);\nsetStatic('Item', AutoCompleteItem)(AutoComplete);\nexport default EnhancedAutoComplete;","map":null,"metadata":{},"sourceType":"module"}