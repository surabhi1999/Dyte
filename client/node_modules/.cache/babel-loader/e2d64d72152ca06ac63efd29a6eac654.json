{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport classNames from 'classnames';\nimport { prefix } from '../utils';\nimport { defaultClassPrefix } from '../utils/prefix';\nimport NoticeManager from '../Notification/NoticeManager';\n\nvar Alert =\n/*#__PURE__*/\nfunction () {\n  function Alert() {\n    var _this = this;\n\n    this.props = {\n      duration: 2000,\n      top: 5,\n      classPrefix: defaultClassPrefix('alert'),\n      getContainer: null\n    };\n    this._instance = null;\n\n    this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n  }\n\n  var _proto = Alert.prototype;\n\n  _proto.setProps = function setProps(nextProps) {\n    this.props = _extends({}, this.props, {}, nextProps);\n\n    if (nextProps.top !== undefined) {\n      this._instance = null;\n    }\n  };\n\n  _proto.getInstance = function getInstance(callback) {\n    var _this$props = this.props,\n        top = _this$props.top,\n        style = _this$props.style,\n        className = _this$props.className,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"top\", \"style\", \"className\"]);\n\n    var props = _extends({\n      style: _extends({\n        top: top\n      }, style),\n      className: classNames(className, this.addPrefix('container'))\n    }, rest);\n\n    NoticeManager.getInstance(props, callback);\n  };\n\n  _proto.open = function open(type, content, duration, onClose) {\n    var _this2 = this;\n\n    if (typeof content === 'function') {\n      content = content();\n    }\n\n    var nextProps = {\n      content: content,\n      duration: typeof duration !== 'undefined' ? duration : this.props.duration,\n      onClose: onClose,\n      type: type,\n      closable: true\n    };\n\n    if (!this._instance) {\n      this.getInstance(function (nextInstance) {\n        _this2._instance = nextInstance;\n\n        _this2._instance.push(nextProps);\n      });\n    } else {\n      this._instance.push(nextProps);\n    }\n  };\n\n  _proto.close = function close(key) {\n    if (this._instance) {\n      this._instance.remove(key);\n    }\n  };\n\n  _proto.closeAll = function closeAll() {\n    if (this._instance) {\n      this._instance.removeAll();\n    }\n  };\n\n  return Alert;\n}();\n\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}