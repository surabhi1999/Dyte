{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isNull from \"lodash/isNull\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Input from '../Input';\nimport ErrorMessage from '../ErrorMessage';\nimport { getUnhandledProps, defaultProps, prefix } from '../utils';\nimport { PLACEMENT_8 } from '../constants';\nimport FormContext, { FormValueContext, FormErrorContext, FormPlaintextContext } from '../Form/FormContext';\n\nvar FormControl =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(FormControl, _React$Component);\n\n  function FormControl(_props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, _props, context) || this;\n\n    _this.handleFieldChange = function (value, event) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          onChange = _this$props.onChange;\n      var onFieldChange = _this.context.onFieldChange;\n\n      var checkTrigger = _this.getCheckTrigger();\n\n      _this.setState({\n        value: value\n      });\n\n      _this.handleFieldCheck(value, checkTrigger === 'change').then(function (checkResult) {\n        _this.setState({\n          checkResult: checkResult\n        });\n      });\n\n      onFieldChange(name, value, event);\n      onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n    };\n\n    _this.handleFieldBlur = function (event) {\n      var _this$props$onBlur, _this$props2;\n\n      var checkTrigger = _this.getCheckTrigger();\n\n      var value = _this.getValue() || _this.state.value;\n\n      _this.handleFieldCheck(value, checkTrigger === 'blur');\n\n      (_this$props$onBlur = (_this$props2 = _this.props).onBlur) === null || _this$props$onBlur === void 0 ? void 0 : _this$props$onBlur.call(_this$props2, event);\n    };\n\n    _this.handleFieldCheck = function (value, isCheckTrigger, callback) {\n      var _this$props3 = _this.props,\n          name = _this$props3.name,\n          formValue = _this$props3.formValue,\n          checkAsync = _this$props3.checkAsync;\n      var _this$context = _this.context,\n          onFieldError = _this$context.onFieldError,\n          onFieldSuccess = _this$context.onFieldSuccess,\n          model = _this$context.model;\n\n      var callbackEvents = function callbackEvents(checkResult) {\n        if (isCheckTrigger) {\n          if (checkResult.hasError) {\n            onFieldError(name, checkResult.errorMessage, callback);\n          } else {\n            onFieldSuccess(name, callback);\n          }\n        }\n\n        return checkResult;\n      };\n\n      if (checkAsync) {\n        return model.checkForFieldAsync(name, value, formValue).then(function (checkResult) {\n          return callbackEvents(checkResult);\n        });\n      }\n\n      return Promise.resolve(callbackEvents(model.checkForField(name, value, formValue)));\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.renderError = function (formError, errorMessage) {\n      var _this$props4 = _this.props,\n          errorPlacement = _this$props4.errorPlacement,\n          name = _this$props4.name;\n\n      if (formError) {\n        errorMessage = formError[name];\n      }\n\n      return React.createElement(ErrorMessage, {\n        show: !!errorMessage,\n        className: _this.addPrefix('message-wrapper'),\n        placement: errorPlacement\n      }, errorMessage);\n    };\n\n    _this.renderAccepter = function () {\n      var _this$props5 = _this.props,\n          name = _this$props5.name,\n          Component = _this$props5.accepter,\n          props = _objectWithoutPropertiesLoose(_this$props5, [\"name\", \"accepter\"]);\n\n      var _this$context$formDef = _this.context.formDefaultValue,\n          formDefaultValue = _this$context$formDef === void 0 ? {} : _this$context$formDef;\n      var unhandled = getUnhandledProps(FormControl, props);\n\n      var value = _this.getValue();\n\n      var readOnly = _this.getReadOnly();\n\n      return React.createElement(Component, _extends({}, unhandled, {\n        readOnly: readOnly,\n        name: name,\n        onChange: _this.handleFieldChange,\n        onBlur: _this.handleFieldBlur,\n        defaultValue: formDefaultValue[name],\n        value: value\n      }));\n    };\n\n    if (!context || !context.onFieldChange) {\n      throw new Error(\"\\n        <FormControl> must be inside a component decorated with <Form>.\\n        And need to update React to 16.6.0 +.\\n      \");\n    }\n\n    var _context$formDefaultV = context.formDefaultValue,\n        _formDefaultValue = _context$formDefaultV === void 0 ? {} : _context$formDefaultV;\n\n    var _name = _props.name;\n    _this.state = {\n      checkResult: {},\n      value: _this.getValue(_props) || _formDefaultValue[_name]\n    };\n    return _this;\n  }\n\n  var _proto = FormControl.prototype;\n\n  _proto.getValue = function getValue(props) {\n    var _ref = props || this.props,\n        formValue = _ref.formValue,\n        name = _ref.name,\n        value = _ref.value;\n\n    if (!_isUndefined(value)) {\n      return value;\n    }\n\n    if (!formValue) {\n      return;\n    }\n\n    return formValue[name];\n  };\n\n  _proto.getCheckTrigger = function getCheckTrigger() {\n    var checkTrigger = this.context.checkTrigger;\n    return this.props.checkTrigger || checkTrigger;\n  };\n\n  _proto.getReadOnly = function getReadOnly() {\n    var readOnly = this.context.readOnly;\n\n    if (!_isUndefined(readOnly)) {\n      return readOnly;\n    }\n\n    return this.props.readOnly;\n  };\n\n  _proto.getPlaintext = function getPlaintext() {\n    var plaintext = this.context.plaintext;\n\n    if (!_isUndefined(plaintext)) {\n      return plaintext;\n    }\n\n    return this.props.plaintext;\n  };\n\n  _proto.checkErrorFromContext = function checkErrorFromContext() {\n    var errorFromContext = this.context.errorFromContext;\n    var errorMessage = this.props.errorMessage;\n\n    if (typeof errorMessage !== 'undefined') {\n      return this.renderError(undefined, errorMessage);\n    }\n\n    if (errorFromContext) {\n      return React.createElement(FormErrorContext.Consumer, null, this.renderError);\n    }\n\n    return null;\n  };\n\n  _proto.render = function render() {\n    var plaintextDefaultValue = this.props.plaintextDefaultValue;\n    var readOnly = this.getReadOnly();\n    var plaintext = this.getPlaintext();\n    var value = this.getValue();\n    var classes = classNames(this.addPrefix('wrapper'), {\n      'read-only': readOnly,\n      plaintext: plaintext\n    });\n\n    if (plaintext && (_isUndefined(value) || _isNull(value))) {\n      return React.createElement(\"div\", {\n        className: classes\n      }, React.createElement(\"div\", {\n        className: this.addPrefix('default-value')\n      }, plaintextDefaultValue));\n    }\n\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(FormPlaintextContext.Provider, {\n      value: plaintext\n    }, this.renderAccepter()), this.checkErrorFromContext());\n  };\n\n  return FormControl;\n}(React.Component);\n\nFormControl.contextType = FormContext;\nFormControl.propTypes = {\n  name: PropTypes.string,\n  checkTrigger: PropTypes.oneOf(['change', 'blur', 'none']),\n  checkAsync: PropTypes.bool,\n  accepter: PropTypes.elementType,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  classPrefix: PropTypes.string,\n  errorMessage: PropTypes.node,\n  errorPlacement: PropTypes.oneOf(PLACEMENT_8),\n  formValue: PropTypes.object,\n  readOnly: PropTypes.bool,\n  plaintext: PropTypes.bool,\n  plaintextDefaultValue: PropTypes.node,\n  value: PropTypes.any\n};\nFormControl.defaultProps = {\n  accepter: Input,\n  errorPlacement: 'bottomStart',\n  plaintextDefaultValue: '--'\n};\n\nvar FormControlWrapper =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inheritsLoose(FormControlWrapper, _React$Component2);\n\n  function FormControlWrapper() {\n    return _React$Component2.apply(this, arguments) || this;\n  }\n\n  var _proto2 = FormControlWrapper.prototype;\n\n  _proto2.render = function render() {\n    var _this2 = this;\n\n    return React.createElement(FormValueContext.Consumer, null, function (formValue) {\n      return React.createElement(FormControl, _extends({}, _this2.props, {\n        formValue: formValue\n      }));\n    });\n  };\n\n  return FormControlWrapper;\n}(React.Component);\n\nvar EnhancedFormControl = defaultProps({\n  classPrefix: 'form-control'\n})(FormControlWrapper);\nexport default EnhancedFormControl;","map":null,"metadata":{},"sourceType":"module"}