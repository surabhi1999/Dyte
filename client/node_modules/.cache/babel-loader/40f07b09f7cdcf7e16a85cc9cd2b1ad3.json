{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getWidth as _getWidth, getHeight as _getHeight, getOffset } from 'dom-lib';\nimport { getUnhandledProps, defaultProps, prefix } from '../utils';\nimport ProgressBar from './ProgressBar';\nimport Handle from './Handle';\nimport Graduated from './Graduated';\nimport { precisionMath, checkValue as _checkValue } from './utils';\nexport var sliderPropTypes = {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n  value: PropTypes.number,\n  defaultValue: PropTypes.number,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  handleClassName: PropTypes.string,\n  handleTitle: PropTypes.node,\n  barClassName: PropTypes.string,\n  handleStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  graduated: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  progress: PropTypes.bool,\n  vertical: PropTypes.bool,\n  onChange: PropTypes.func,\n  renderMark: PropTypes.func,\n  renderTooltip: PropTypes.func,\n  locale: PropTypes.object\n};\n\nvar Slider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Slider, _React$Component);\n\n  function Slider(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.barRef = void 0;\n    _this.mouseMoveTracker = null;\n\n    _this.getValueByPosition = function (event) {\n      var _this$props = _this.props,\n          vertical = _this$props.vertical,\n          min = _this$props.min,\n          locale = _this$props.locale;\n      var barOffset = getOffset(_this.barRef.current);\n      var offset = vertical ? event.pageY - barOffset.top : event.pageX - barOffset.left;\n      var value = locale.rtl && !vertical ? barOffset.width - offset : offset;\n      return _this.getValueByOffset(value) + min;\n    };\n\n    _this.handleClick = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var value = _this.getValueByPosition(event);\n\n      _this.setValue(value, event);\n    };\n\n    _this.handleDragMove = function (event) {\n      _this.setValue(_this.getValueByPosition(event), event);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      value: _this.checkValue(props.defaultValue, props)\n    };\n    _this.barRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Slider.prototype;\n\n  _proto.getSplitCount = function getSplitCount() {\n    var _this$props2 = this.props,\n        min = _this$props2.min,\n        step = _this$props2.step;\n    var max = this.getMax();\n    return precisionMath((max - min) / step);\n  };\n\n  _proto.getMax = function getMax(props) {\n    var _ref = props || this.props,\n        max = _ref.max,\n        min = _ref.min,\n        step = _ref.step;\n\n    return precisionMath(Math.floor((max - min) / step) * step + min);\n  };\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    return typeof value === 'undefined' ? this.state.value : this.checkValue(value);\n  };\n\n  _proto.setValue = function setValue(value, event) {\n    var _this$props$onChange, _this$props3;\n\n    var nextValue = this.checkValue(value);\n    this.setState({\n      value: nextValue\n    });\n    (_this$props$onChange = (_this$props3 = this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props3, nextValue, event);\n  };\n\n  _proto.checkValue = function checkValue(value, props) {\n    var _ref2 = props || this.props,\n        min = _ref2.min;\n\n    var max = this.getMax(props);\n    return _checkValue(value, min, max);\n  };\n\n  _proto.getHeight = function getHeight() {\n    if (this.barRef.current) {\n      return _getHeight(this.barRef.current);\n    }\n\n    return 0;\n  };\n\n  _proto.getWidth = function getWidth() {\n    if (this.barRef.current) {\n      return _getWidth(this.barRef.current);\n    }\n\n    return 0;\n  };\n\n  _proto.getValueByOffset = function getValueByOffset(offset) {\n    var _this$props4 = this.props,\n        step = _this$props4.step,\n        vertical = _this$props4.vertical;\n    var count = this.getSplitCount();\n    var value = 0;\n\n    if (isNaN(offset)) {\n      return value;\n    }\n\n    if (vertical) {\n      var barHeight = this.getHeight();\n      value = Math.round(offset / (barHeight / count)) * step;\n    } else {\n      var barWidth = this.getWidth();\n      value = Math.round(offset / (barWidth / count)) * step;\n    }\n\n    return precisionMath(value);\n  };\n\n  _proto.renderGraduated = function renderGraduated() {\n    var _this$props5 = this.props,\n        step = _this$props5.step,\n        min = _this$props5.min,\n        renderMark = _this$props5.renderMark;\n    var max = this.getMax();\n    var count = this.getSplitCount();\n    var value = this.getValue();\n    return React.createElement(Graduated, {\n      step: step,\n      min: min,\n      max: max,\n      count: count,\n      value: value,\n      renderMark: renderMark\n    });\n  };\n\n  _proto.renderHandle = function renderHandle() {\n    var _this$props6 = this.props,\n        handleClassName = _this$props6.handleClassName,\n        handleStyle = _this$props6.handleStyle,\n        handleTitle = _this$props6.handleTitle,\n        min = _this$props6.min,\n        vertical = _this$props6.vertical,\n        tooltip = _this$props6.tooltip,\n        renderTooltip = _this$props6.renderTooltip,\n        locale = _this$props6.locale,\n        disabled = _this$props6.disabled;\n    var max = this.getMax();\n    var value = this.getValue();\n    return React.createElement(Handle, {\n      position: (value - min) / (max - min) * 100,\n      className: handleClassName,\n      style: handleStyle,\n      disabled: disabled,\n      vertical: vertical,\n      tooltip: tooltip,\n      renderTooltip: renderTooltip,\n      rtl: locale.rtl,\n      value: value,\n      onDragMove: this.handleDragMove\n    }, handleTitle);\n  };\n\n  _proto.renderProgress = function renderProgress() {\n    var _this$props7 = this.props,\n        vertical = _this$props7.vertical,\n        min = _this$props7.min,\n        locale = _this$props7.locale;\n    var max = this.getMax();\n    var value = this.getValue();\n    return React.createElement(ProgressBar, {\n      rtl: locale.rtl,\n      vertical: vertical,\n      start: 0,\n      end: (value - min) / (max - min) * 100\n    });\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props8 = this.props,\n        graduated = _this$props8.graduated,\n        className = _this$props8.className,\n        barClassName = _this$props8.barClassName,\n        progress = _this$props8.progress,\n        vertical = _this$props8.vertical,\n        disabled = _this$props8.disabled,\n        classPrefix = _this$props8.classPrefix,\n        renderMark = _this$props8.renderMark,\n        rest = _objectWithoutPropertiesLoose(_this$props8, [\"graduated\", \"className\", \"barClassName\", \"progress\", \"vertical\", \"disabled\", \"classPrefix\", \"renderMark\"]);\n\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[this.addPrefix('vertical')] = vertical, _classNames[this.addPrefix('disabled')] = disabled, _classNames[this.addPrefix('graduated')] = graduated, _classNames[this.addPrefix('with-mark')] = renderMark, _classNames));\n    var unhandled = getUnhandledProps(Slider, rest);\n    return React.createElement(\"div\", _extends({}, unhandled, {\n      className: classes,\n      role: \"presentation\"\n    }), React.createElement(\"div\", {\n      className: classNames(this.addPrefix('bar'), barClassName),\n      ref: this.barRef,\n      onClick: this.handleClick\n    }, progress && this.renderProgress(), graduated && this.renderGraduated()), this.renderHandle());\n  };\n\n  return Slider;\n}(React.Component);\n\nSlider.propTypes = sliderPropTypes;\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 1,\n  defaultValue: 0,\n  tooltip: true,\n  locale: {}\n};\nexport default defaultProps({\n  classPrefix: 'slider'\n})(Slider);","map":null,"metadata":{},"sourceType":"module"}