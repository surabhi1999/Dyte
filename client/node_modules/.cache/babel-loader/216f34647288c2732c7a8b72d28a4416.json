{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport OverlayTrigger from '../Overlay/OverlayTrigger';\nimport { createChainedFunction, placementPolyfill, refType, mergeRefs } from '../utils';\nimport IntlContext from '../IntlProvider/IntlContext';\nexport var overlayProps = ['placement', 'shouldUpdatePosition', 'arrowOffsetLeft', 'arrowOffsetTop', 'positionLeft', 'positionTop'];\nvar Whisper = React.forwardRef(function (props, ref) {\n  var triggerRef = props.triggerRef,\n      onOpen = props.onOpen,\n      onClose = props.onClose,\n      onEntered = props.onEntered,\n      onExited = props.onExited,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'right' : _props$placement,\n      preventOverflow = props.preventOverflow,\n      rest = _objectWithoutPropertiesLoose(props, [\"triggerRef\", \"onOpen\", \"onClose\", \"onEntered\", \"onExited\", \"placement\", \"preventOverflow\"]);\n\n  return React.createElement(IntlContext.Consumer, null, function (context) {\n    return React.createElement(OverlayTrigger, _extends({\n      preventOverflow: preventOverflow,\n      placement: placementPolyfill(placement, context === null || context === void 0 ? void 0 : context.rtl),\n      onEntered: createChainedFunction(onOpen, onEntered),\n      onExited: createChainedFunction(onClose, onExited),\n      ref: mergeRefs(ref, triggerRef) // for test\n\n    }, rest));\n  });\n});\nWhisper.displayName = 'Whisper';\nWhisper.propTypes = {\n  triggerRef: refType,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExited: PropTypes.func,\n  placement: PropTypes.string,\n\n  /**\n   * Prevent floating element overflow\n   */\n  preventOverflow: PropTypes.bool\n};\nexport default Whisper;","map":null,"metadata":{},"sourceType":"module"}