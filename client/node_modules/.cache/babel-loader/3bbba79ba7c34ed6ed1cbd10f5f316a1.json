{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Ripple from '../Ripple';\nimport FormattedMessage from '../IntlProvider/FormattedMessage';\nimport { getUnhandledProps, defaultProps, prefix, isIE11 } from '../utils';\n\nvar Button = function Button(props) {\n  return React.createElement(\"button\", _extends({}, props, {\n    type: \"button\"\n  }));\n};\n\nvar UploadTrigger =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(UploadTrigger, _React$Component);\n\n  function UploadTrigger(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.inputRef = void 0;\n\n    _this.handleClick = function () {\n      !_this.props.disabled && _this.inputRef.current.click();\n    };\n\n    _this.handleDragEnter = function (event) {\n      var _this$props$onDragEnt, _this$props;\n\n      if (_this.props.draggable) {\n        event.preventDefault();\n\n        _this.setState({\n          dragOver: true\n        });\n      }\n\n      (_this$props$onDragEnt = (_this$props = _this.props).onDragEnter) === null || _this$props$onDragEnt === void 0 ? void 0 : _this$props$onDragEnt.call(_this$props, event);\n    };\n\n    _this.handleDragLeave = function (event) {\n      var _this$props$onDragLea, _this$props2;\n\n      if (_this.props.draggable) {\n        event.preventDefault();\n\n        _this.setState({\n          dragOver: false\n        });\n      }\n\n      (_this$props$onDragLea = (_this$props2 = _this.props).onDragLeave) === null || _this$props$onDragLea === void 0 ? void 0 : _this$props$onDragLea.call(_this$props2, event);\n    };\n\n    _this.handleDragOver = function (event) {\n      var _this$props$onDragOve, _this$props3;\n\n      _this.props.draggable && event.preventDefault();\n      (_this$props$onDragOve = (_this$props3 = _this.props).onDragOver) === null || _this$props$onDragOve === void 0 ? void 0 : _this$props$onDragOve.call(_this$props3, event);\n    };\n\n    _this.handleDrop = function (event) {\n      var _this$props$onDrop, _this$props5;\n\n      if (_this.props.draggable) {\n        var _this$props$onChange, _this$props4;\n\n        event.preventDefault();\n\n        _this.setState({\n          dragOver: false\n        });\n\n        (_this$props$onChange = (_this$props4 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props4, event);\n      }\n\n      (_this$props$onDrop = (_this$props5 = _this.props).onDrop) === null || _this$props$onDrop === void 0 ? void 0 : _this$props$onDrop.call(_this$props5, event);\n    };\n\n    _this.handleChange = function (event) {\n      var _this$props$onChange3, _this$props7;\n\n      if (isIE11()) {\n        var _event$target, _event$target$files;\n        /**\n         * IE11 triggers onChange event of file input when element.value is assigned\n         * https://github.com/facebook/react/issues/8793\n         */\n\n\n        if (((_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$files = _event$target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files.length) > 0) {\n          var _this$props$onChange2, _this$props6;\n\n          (_this$props$onChange2 = (_this$props6 = _this.props).onChange) === null || _this$props$onChange2 === void 0 ? void 0 : _this$props$onChange2.call(_this$props6, event);\n        }\n\n        return;\n      }\n\n      (_this$props$onChange3 = (_this$props7 = _this.props).onChange) === null || _this$props$onChange3 === void 0 ? void 0 : _this$props$onChange3.call(_this$props7, event);\n    };\n\n    _this.inputRef = React.createRef();\n    _this.state = {\n      dragOver: false\n    };\n    return _this;\n  }\n\n  var _proto = UploadTrigger.prototype;\n\n  _proto.getInputInstance = function getInputInstance() {\n    return this.inputRef.current;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props8 = this.props,\n        name = _this$props8.name,\n        accept = _this$props8.accept,\n        multiple = _this$props8.multiple,\n        disabled = _this$props8.disabled,\n        children = _this$props8.children,\n        classPrefix = _this$props8.classPrefix,\n        className = _this$props8.className,\n        Component = _this$props8.componentClass,\n        rest = _objectWithoutPropertiesLoose(_this$props8, [\"name\", \"accept\", \"multiple\", \"disabled\", \"children\", \"classPrefix\", \"className\", \"componentClass\"]);\n\n    var unhandled = getUnhandledProps(UploadTrigger, rest);\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix('customize')] = children, _classNames[addPrefix('drag-over')] = this.state.dragOver, _classNames));\n\n    var buttonProps = _extends({}, unhandled, {\n      className: addPrefix('btn'),\n      onClick: this.handleClick,\n      onDragEnter: this.handleDragEnter,\n      onDragLeave: this.handleDragLeave,\n      onDragOver: this.handleDragOver,\n      onDrop: this.handleDrop\n    });\n\n    var trigger = children ? React.cloneElement(React.Children.only(children), buttonProps) : React.createElement(Component, buttonProps, React.createElement(FormattedMessage, {\n      id: \"upload\"\n    }), React.createElement(Ripple, null));\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      name: name,\n      multiple: multiple,\n      disabled: disabled,\n      accept: accept,\n      ref: this.inputRef,\n      onChange: this.handleChange\n    }), trigger);\n  };\n\n  return UploadTrigger;\n}(React.Component);\n\nUploadTrigger.propTypes = {\n  name: PropTypes.string,\n  multiple: PropTypes.bool,\n  disabled: PropTypes.bool,\n  accept: PropTypes.string,\n  onChange: PropTypes.func,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  componentClass: PropTypes.elementType,\n  draggable: PropTypes.bool,\n  onDragEnter: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDrop: PropTypes.func\n};\nexport default defaultProps({\n  componentClass: Button,\n  classPrefix: 'uploader-trigger'\n})(UploadTrigger);","map":null,"metadata":{},"sourceType":"module"}