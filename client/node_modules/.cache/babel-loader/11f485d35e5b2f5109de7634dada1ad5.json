{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { DOMMouseMoveTracker, addStyle, getWidth } from 'dom-lib';\nimport Tooltip from '../Tooltip';\nimport { prefix, defaultProps } from '../utils';\n\nvar Handle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Handle, _React$Component);\n\n  function Handle(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.tooltipRef = void 0;\n    _this.mouseMoveTracker = null;\n\n    _this.releaseMouseMoves = function () {\n      if (_this.mouseMoveTracker) {\n        _this.mouseMoveTracker.releaseMouseMoves();\n\n        _this.mouseMoveTracker = null;\n      }\n    };\n\n    _this.handleDragMove = function (_deltaX, _deltaY, event) {\n      var _this$props$onDragMov, _this$props;\n\n      if (!_this.mouseMoveTracker || !_this.mouseMoveTracker.isDragging()) {\n        return;\n      }\n\n      (_this$props$onDragMov = (_this$props = _this.props).onDragMove) === null || _this$props$onDragMov === void 0 ? void 0 : _this$props$onDragMov.call(_this$props, event);\n\n      _this.setTooltipPosition();\n    };\n\n    _this.handleDragEnd = function (event) {\n      var _this$props$onDragEnd, _this$props2;\n\n      _this.releaseMouseMoves();\n\n      _this.setState({\n        active: false\n      });\n\n      (_this$props$onDragEnd = (_this$props2 = _this.props).onDragEnd) === null || _this$props$onDragEnd === void 0 ? void 0 : _this$props$onDragEnd.call(_this$props2, event);\n    };\n\n    _this.handleMouseDown = function (event) {\n      var _this$props$onDragSta, _this$props3;\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.mouseMoveTracker = _this.getMouseMoveTracker();\n\n      _this.mouseMoveTracker.captureMouseMoves(event);\n\n      _this.setState({\n        active: true\n      });\n\n      (_this$props$onDragSta = (_this$props3 = _this.props).onDragStart) === null || _this$props$onDragSta === void 0 ? void 0 : _this$props$onDragSta.call(_this$props3, event);\n    };\n\n    _this.handleMouseEnter = function () {\n      _this.setTooltipPosition();\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      active: false\n    };\n    _this.tooltipRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Handle.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.releaseMouseMoves();\n  };\n\n  _proto.getMouseMoveTracker = function getMouseMoveTracker() {\n    return this.mouseMoveTracker || new DOMMouseMoveTracker(this.handleDragMove, this.handleDragEnd, document.body);\n  };\n\n  _proto.setTooltipPosition = function setTooltipPosition() {\n    var tooltip = this.props.tooltip;\n    var tooltipElement = this.tooltipRef.current;\n\n    if (tooltip && tooltipElement) {\n      var width = getWidth(tooltipElement);\n      addStyle(tooltipElement, 'left', \"-\" + width / 2 + \"px\");\n    }\n  };\n\n  _proto.render = function render() {\n    var _extends2;\n\n    var _this$props4 = this.props,\n        className = _this$props4.className,\n        style = _this$props4.style,\n        children = _this$props4.children,\n        position = _this$props4.position,\n        vertical = _this$props4.vertical,\n        tooltip = _this$props4.tooltip,\n        renderTooltip = _this$props4.renderTooltip,\n        rtl = _this$props4.rtl,\n        value = _this$props4.value;\n    var active = this.state.active;\n    var horizontalKey = rtl ? 'right' : 'left';\n    var direction = vertical ? 'top' : horizontalKey;\n\n    var styles = _extends({}, style, (_extends2 = {}, _extends2[direction] = position + \"%\", _extends2));\n\n    var handleClasses = classNames(this.addPrefix('handle'), className, {\n      active: active\n    });\n    return React.createElement(\"div\", {\n      className: handleClasses,\n      role: \"presentation\",\n      onMouseDown: this.handleMouseDown,\n      onMouseEnter: this.handleMouseEnter,\n      style: styles\n    }, tooltip && React.createElement(Tooltip, {\n      htmlElementRef: this.tooltipRef,\n      className: classNames(this.addPrefix('tooltip'), 'placement-top')\n    }, renderTooltip ? renderTooltip(value) : value), children);\n  };\n\n  return Handle;\n}(React.Component);\n\nexport default defaultProps({\n  classPrefix: 'slider'\n})(Handle);","map":null,"metadata":{},"sourceType":"module"}