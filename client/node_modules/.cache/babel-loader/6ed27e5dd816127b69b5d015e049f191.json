{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport reactToString from '../utils/reactToString';\nimport { hasClass } from 'dom-lib';\nimport { TREE_NODE_PADDING, TREE_NODE_ROOT_PADDING } from '../constants';\nimport { defaultProps, prefix, refType } from '../utils';\n\nvar TreeNode =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TreeNode, _React$Component);\n\n  function TreeNode() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.handleTreeToggle = function (event) {\n      var _event$nativeEvent, _event$nativeEvent$st;\n\n      var _this$props = _this.props,\n          onTreeToggle = _this$props.onTreeToggle,\n          nodeData = _this$props.nodeData; // 异步加载数据自定义loading图标时，阻止原生冒泡，不触发 document.click\n\n      event === null || event === void 0 ? void 0 : (_event$nativeEvent = event.nativeEvent) === null || _event$nativeEvent === void 0 ? void 0 : (_event$nativeEvent$st = _event$nativeEvent.stopImmediatePropagation) === null || _event$nativeEvent$st === void 0 ? void 0 : _event$nativeEvent$st.call(_event$nativeEvent);\n      onTreeToggle === null || onTreeToggle === void 0 ? void 0 : onTreeToggle(nodeData);\n    };\n\n    _this.handleSelect = function (event) {\n      var _this$props2 = _this.props,\n          onSelect = _this$props2.onSelect,\n          disabled = _this$props2.disabled,\n          nodeData = _this$props2.nodeData;\n\n      if (disabled) {\n        return;\n      }\n\n      if (event.target instanceof HTMLElement) {\n        if (hasClass(event.target.parentNode, _this.addPrefix('expand-icon-wrapper'))) {\n          return;\n        }\n      }\n\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(nodeData, event);\n    };\n\n    _this.handleDragStart = function (event) {\n      var _this$props3 = _this.props,\n          nodeData = _this$props3.nodeData,\n          onDragStart = _this$props3.onDragStart;\n      var dragNode = document.getElementById('drag-node');\n\n      if (dragNode) {\n        event.dataTransfer.setDragImage(dragNode, 0, 0);\n      }\n\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(nodeData, event);\n    };\n\n    _this.handleDragEnter = function (event) {\n      var _this$props4 = _this.props,\n          nodeData = _this$props4.nodeData,\n          onDragEnter = _this$props4.onDragEnter;\n      event.preventDefault();\n      event.stopPropagation();\n      onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter(nodeData, event);\n    };\n\n    _this.handleDragOver = function (event) {\n      var _this$props5 = _this.props,\n          nodeData = _this$props5.nodeData,\n          onDragOver = _this$props5.onDragOver;\n      event.preventDefault();\n      event.stopPropagation();\n      onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver(nodeData, event);\n    };\n\n    _this.handleDragLeave = function (event) {\n      var _this$props6 = _this.props,\n          nodeData = _this$props6.nodeData,\n          onDragLeave = _this$props6.onDragLeave;\n      event.stopPropagation();\n      onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave(nodeData, event);\n    };\n\n    _this.handleDragEnd = function (event) {\n      var _this$props7 = _this.props,\n          nodeData = _this$props7.nodeData,\n          onDragEnd = _this$props7.onDragEnd;\n      event.stopPropagation();\n      onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(nodeData, event);\n    };\n\n    _this.handleDrop = function (event) {\n      var _this$props8 = _this.props,\n          nodeData = _this$props8.nodeData,\n          onDrop = _this$props8.onDrop;\n      event.preventDefault();\n      event.stopPropagation();\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(nodeData, event);\n    };\n\n    _this.renderIcon = function () {\n      var _classNames;\n\n      var _this$props9 = _this.props,\n          expand = _this$props9.expand,\n          onRenderTreeIcon = _this$props9.onRenderTreeIcon,\n          hasChildren = _this$props9.hasChildren,\n          nodeData = _this$props9.nodeData;\n      var classes = classNames(_this.addPrefix('expand-icon'), (_classNames = {}, _classNames[_this.addPrefix('expanded')] = !!expand, _classNames));\n      var expandIcon = React.createElement(\"i\", {\n        className: classes\n      });\n\n      if (nodeData !== undefined && typeof onRenderTreeIcon === 'function') {\n        var customIcon = onRenderTreeIcon(nodeData);\n        expandIcon = customIcon !== null ? React.createElement(\"div\", {\n          className: _this.addPrefix('custom-icon')\n        }, customIcon) : expandIcon;\n      }\n\n      return hasChildren ? React.createElement(\"div\", {\n        role: \"button\",\n        tabIndex: -1,\n        \"data-ref\": nodeData.refKey,\n        className: _this.addPrefix('expand-icon-wrapper'),\n        onClick: _this.handleTreeToggle\n      }, expandIcon) : null;\n    };\n\n    _this.renderLabel = function () {\n      var _classNames2;\n\n      var _this$props10 = _this.props,\n          nodeData = _this$props10.nodeData,\n          onRenderTreeNode = _this$props10.onRenderTreeNode,\n          label = _this$props10.label,\n          layer = _this$props10.layer,\n          dragging = _this$props10.dragging,\n          dragOver = _this$props10.dragOver,\n          dragOverTop = _this$props10.dragOverTop,\n          dragOverBottom = _this$props10.dragOverBottom;\n      var contentClasses = classNames(_this.addPrefix('label-content'), (_classNames2 = {}, _classNames2[_this.addPrefix('dragging')] = dragging, _classNames2[_this.addPrefix('drag-over')] = dragOver, _classNames2[_this.addPrefix('drag-over-top')] = dragOverTop, _classNames2[_this.addPrefix('drag-over-bottom')] = dragOverBottom, _classNames2));\n      return React.createElement(\"span\", {\n        className: _this.addPrefix('label'),\n        title: _this.getTitle(),\n        \"data-layer\": layer,\n        \"data-key\": (nodeData === null || nodeData === void 0 ? void 0 : nodeData.refKey) || '',\n        role: \"button\",\n        tabIndex: -1,\n        onClick: _this.handleSelect\n      }, React.createElement(\"span\", {\n        className: contentClasses\n      }, onRenderTreeNode ? onRenderTreeNode(nodeData) : label));\n    };\n\n    return _this;\n  }\n\n  var _proto = TreeNode.prototype;\n\n  _proto.getTitle = function getTitle() {\n    var label = this.props.label;\n\n    if (typeof label === 'string') {\n      return label;\n    } else if (React.isValidElement(label)) {\n      var nodes = reactToString(label);\n      return nodes.join('');\n    }\n  };\n\n  _proto.render = function render() {\n    var _classNames3, _extends2;\n\n    var _this$props11 = this.props,\n        rtl = _this$props11.rtl,\n        style = _this$props11.style,\n        className = _this$props11.className,\n        classPrefix = _this$props11.classPrefix,\n        active = _this$props11.active,\n        layer = _this$props11.layer,\n        disabled = _this$props11.disabled,\n        visible = _this$props11.visible,\n        innerRef = _this$props11.innerRef,\n        draggable = _this$props11.draggable;\n    var classes = classNames(className, classPrefix, (_classNames3 = {\n      'text-muted': disabled\n    }, _classNames3[this.addPrefix('disabled')] = disabled, _classNames3[this.addPrefix('active')] = active, _classNames3));\n    var padding = layer * TREE_NODE_PADDING + TREE_NODE_ROOT_PADDING;\n\n    var styles = _extends({}, style, (_extends2 = {}, _extends2[rtl ? 'paddingRight' : 'paddingLeft'] = padding, _extends2));\n\n    return visible ? React.createElement(\"div\", {\n      style: styles,\n      className: classes,\n      ref: innerRef,\n      draggable: draggable,\n      onDragStart: this.handleDragStart,\n      onDragEnter: this.handleDragEnter,\n      onDragOver: this.handleDragOver,\n      onDragLeave: this.handleDragLeave,\n      onDragEnd: this.handleDragEnd,\n      onDrop: this.handleDrop\n    }, this.renderIcon(), this.renderLabel()) : null;\n  };\n\n  return TreeNode;\n}(React.Component);\n\nTreeNode.propTypes = {\n  layer: PropTypes.number,\n  value: PropTypes.any,\n  label: PropTypes.any,\n  expand: PropTypes.bool,\n  active: PropTypes.bool,\n  visible: PropTypes.bool,\n  nodeData: PropTypes.any,\n  disabled: PropTypes.bool,\n  draggable: PropTypes.bool,\n  dragOver: PropTypes.bool,\n  hasChildren: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  style: PropTypes.object,\n  innerRef: refType,\n  onTreeToggle: PropTypes.func,\n  onSelect: PropTypes.func,\n  onRenderTreeIcon: PropTypes.func,\n  onRenderTreeNode: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func\n};\nTreeNode.defaultProps = {\n  visible: true\n};\nexport default defaultProps({\n  classPrefix: 'tree-node'\n})(TreeNode);","map":null,"metadata":{},"sourceType":"module"}