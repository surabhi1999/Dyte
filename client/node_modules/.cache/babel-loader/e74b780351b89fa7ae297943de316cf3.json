{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _findIndex from \"lodash/findIndex\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isString from \"lodash/isString\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getPosition, scrollTop, getHeight } from 'dom-lib';\nimport classNames from 'classnames';\nimport List from 'react-virtualized/dist/commonjs/List';\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\nimport shallowEqual from '../utils/shallowEqual';\nimport { getUnhandledProps, prefix, defaultProps } from '../utils';\nimport DropdownMenuGroup from './DropdownMenuGroup';\nimport { KEY_GROUP, KEY_GROUP_TITLE } from '../utils/getDataGroupBy';\nexport var dropdownMenuPropTypes = {\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  dropdownMenuItemComponentClass: PropTypes.elementType,\n  dropdownMenuItemClassPrefix: PropTypes.string,\n  data: PropTypes.array,\n  group: PropTypes.bool,\n  disabledItemValues: PropTypes.array,\n  activeItemValues: PropTypes.array,\n  focusItemValue: PropTypes.any,\n  maxHeight: PropTypes.number,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  style: PropTypes.object,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  virtualized: PropTypes.bool,\n  listProps: PropTypes.object\n};\nvar ROW_HEIGHT = 36;\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownMenu, _React$Component);\n\n  function DropdownMenu(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuBodyContainerRef = void 0;\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.handleSelect = function (item, value, event, checked) {\n      var _this$props$onSelect, _this$props;\n\n      (_this$props$onSelect = (_this$props = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props, value, item, event, checked);\n    };\n\n    _this.getItemData = function (itemData) {\n      return itemData;\n    };\n\n    _this.menuItems = {};\n\n    _this.bindMenuItems = function (disabled, key, ref) {\n      if (ref && !disabled) {\n        _this.menuItems[key] = ref;\n      }\n    };\n\n    _this.handleGroupTitleClick = function (key, event) {\n      var _this$props$onGroupTi, _this$props2;\n\n      var foldedGroupKeys = _this.state.foldedGroupKeys;\n      var nextGroupKeys = foldedGroupKeys.filter(function (item) {\n        return item !== key;\n      });\n\n      if (nextGroupKeys.length === foldedGroupKeys.length) {\n        nextGroupKeys.push(key);\n      }\n\n      _this.setState({\n        foldedGroupKeys: nextGroupKeys\n      });\n\n      (_this$props$onGroupTi = (_this$props2 = _this.props).onGroupTitleClick) === null || _this$props$onGroupTi === void 0 ? void 0 : _this$props$onGroupTi.call(_this$props2, event);\n    };\n\n    _this.menuBodyContainerRef = React.createRef();\n    _this.state = {\n      foldedGroupKeys: []\n    };\n    return _this;\n  }\n\n  var _proto = DropdownMenu.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateScrollPoistion();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!shallowEqual(prevProps.focusItemValue, this.props.focusItemValue)) {\n      this.updateScrollPoistion();\n    }\n  };\n\n  _proto.updateScrollPoistion = function updateScrollPoistion() {\n    var container = this.menuBodyContainerRef.current;\n    var activeItem = container.querySelector(\".\" + this.addPrefix('item-focus'));\n\n    if (!activeItem) {\n      activeItem = container.querySelector(\".\" + this.addPrefix('item-active'));\n    }\n\n    if (!activeItem) {\n      return;\n    }\n\n    var position = getPosition(activeItem, container);\n    var sTop = scrollTop(container);\n    var sHeight = getHeight(container);\n\n    if (sTop > position.top) {\n      scrollTop(container, Math.max(0, position.top - 20));\n    } else if (position.top > sTop + sHeight) {\n      scrollTop(container, Math.max(0, position.top - sHeight + 32));\n    }\n  };\n\n  _proto.getRowHeight = function getRowHeight(list, _ref) {\n    var index = _ref.index;\n    var item = list[index];\n\n    if (this.props.group && item[KEY_GROUP] && index !== 0) {\n      return 48;\n    }\n\n    return ROW_HEIGHT;\n  }\n  /**\n   * public: Provided to Picker calls, support keyboard operation to get focus.\n   */\n  ;\n\n  _proto.renderItem = function renderItem(list, _ref2) {\n    var index = _ref2.index,\n        style = _ref2.style;\n    var _this$props3 = this.props,\n        valueKey = _this$props3.valueKey,\n        labelKey = _this$props3.labelKey,\n        group = _this$props3.group,\n        renderMenuGroup = _this$props3.renderMenuGroup,\n        disabledItemValues = _this$props3.disabledItemValues,\n        activeItemValues = _this$props3.activeItemValues,\n        focusItemValue = _this$props3.focusItemValue,\n        renderMenuItem = _this$props3.renderMenuItem,\n        dropdownMenuItemClassPrefix = _this$props3.dropdownMenuItemClassPrefix,\n        DropdownMenuItem = _this$props3.dropdownMenuItemComponentClass;\n    var foldedGroupKeys = this.state.foldedGroupKeys;\n    var item = list[index];\n    var value = item[valueKey];\n    var label = item[labelKey];\n\n    if (_isUndefined(label) && !item[KEY_GROUP]) {\n      throw Error(\"labelKey \\\"\" + labelKey + \"\\\" is not defined in \\\"data\\\" : \" + index);\n    } // Use `value` in keys when If `value` is string or number\n\n\n    var itemKey = _isString(value) || _isNumber(value) ? value : index;\n    /**\n     * Render <DropdownMenuGroup>\n     * when if `group` is enabled\n     */\n\n    if (group && item[KEY_GROUP]) {\n      var groupValue = item[KEY_GROUP_TITLE];\n      return React.createElement(DropdownMenuGroup, {\n        style: style,\n        classPrefix: this.addPrefix('group'),\n        className: classNames({\n          folded: foldedGroupKeys.some(function (key) {\n            return key === groupValue;\n          })\n        }),\n        key: \"group-\" + groupValue,\n        \"data-key\": \"group-\" + groupValue,\n        onClick: this.handleGroupTitleClick.bind(null, groupValue)\n      }, renderMenuGroup ? renderMenuGroup(groupValue, item) : groupValue);\n    } else if (_isUndefined(value) && !_isUndefined(item[KEY_GROUP])) {\n      throw Error(\"valueKey \\\"\" + valueKey + \"\\\" is not defined in \\\"data\\\" : \" + index + \" \");\n    }\n\n    var disabled = disabledItemValues === null || disabledItemValues === void 0 ? void 0 : disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, value);\n    });\n    var active = activeItemValues === null || activeItemValues === void 0 ? void 0 : activeItemValues.some(function (v) {\n      return shallowEqual(v, value);\n    });\n    var focus = !_isUndefined(focusItemValue) && shallowEqual(focusItemValue, value);\n    return React.createElement(DropdownMenuItem, {\n      \"data-key\": itemKey,\n      style: style,\n      key: itemKey,\n      disabled: disabled,\n      active: active,\n      focus: focus,\n      value: value,\n      classPrefix: dropdownMenuItemClassPrefix,\n      getItemData: this.getItemData.bind(this, item),\n      ref: this.bindMenuItems.bind(this, disabled, itemKey),\n      onSelect: this.handleSelect.bind(this, item)\n    }, renderMenuItem ? renderMenuItem(label, item) : label);\n  };\n\n  _proto.renderMenuItems = function renderMenuItems() {\n    var _this2 = this;\n\n    this.menuItems = {};\n    var _this$props4 = this.props,\n        _this$props4$data = _this$props4.data,\n        data = _this$props4$data === void 0 ? [] : _this$props4$data,\n        group = _this$props4.group,\n        maxHeight = _this$props4.maxHeight,\n        activeItemValues = _this$props4.activeItemValues,\n        valueKey = _this$props4.valueKey,\n        virtualized = _this$props4.virtualized,\n        listProps = _this$props4.listProps;\n    var foldedGroupKeys = this.state.foldedGroupKeys;\n    var filteredItems = group ? data.filter(function (item) {\n      return !(foldedGroupKeys === null || foldedGroupKeys === void 0 ? void 0 : foldedGroupKeys.some(function (key) {\n        var _item$parent;\n\n        return key === ((_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent[KEY_GROUP_TITLE]);\n      }));\n    }) : data;\n    var rowCount = filteredItems.length;\n\n    if (virtualized && rowCount * ROW_HEIGHT > maxHeight) {\n      return React.createElement(AutoSizer, {\n        defaultHeight: maxHeight,\n        style: {\n          width: 'auto',\n          height: 'auto'\n        }\n      }, function (_ref3) {\n        var height = _ref3.height,\n            width = _ref3.width;\n        return React.createElement(List, _extends({}, listProps, {\n          width: width,\n          height: height || maxHeight,\n          scrollToIndex: _findIndex(data, function (item) {\n            return item[valueKey] === (activeItemValues === null || activeItemValues === void 0 ? void 0 : activeItemValues[0]);\n          }),\n          rowCount: rowCount,\n          rowHeight: _this2.getRowHeight.bind(_this2, filteredItems),\n          rowRenderer: _this2.renderItem.bind(_this2, filteredItems)\n        }));\n      });\n    }\n\n    return React.createElement(React.Fragment, null, filteredItems.map(function (_item, index) {\n      return _this2.renderItem(filteredItems, {\n        index: index\n      });\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        maxHeight = _this$props5.maxHeight,\n        className = _this$props5.className,\n        style = _this$props5.style,\n        group = _this$props5.group,\n        rest = _objectWithoutPropertiesLoose(_this$props5, [\"maxHeight\", \"className\", \"style\", \"group\"]);\n\n    var classes = classNames(className, this.addPrefix('items'), {\n      grouped: group\n    });\n    var unhandled = getUnhandledProps(DropdownMenu, rest);\n\n    var styles = _extends({}, style, {\n      maxHeight: maxHeight\n    });\n\n    return React.createElement(\"div\", _extends({\n      role: \"list\",\n      className: classes,\n      ref: this.menuBodyContainerRef,\n      style: styles\n    }, unhandled), this.renderMenuItems());\n  };\n\n  return DropdownMenu;\n}(React.Component);\n\nDropdownMenu.propTypes = dropdownMenuPropTypes;\nDropdownMenu.defaultProps = {\n  data: [],\n  activeItemValues: [],\n  disabledItemValues: [],\n  maxHeight: 320,\n  valueKey: 'value',\n  labelKey: 'label'\n};\nexport default defaultProps({\n  classPrefix: 'dropdown-menu'\n})(DropdownMenu);","map":null,"metadata":{},"sourceType":"module"}