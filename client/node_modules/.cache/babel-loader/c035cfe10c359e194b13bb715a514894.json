{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaModel = exports.Schema = void 0;\n\nvar _StringType = _interopRequireDefault(require(\"./StringType\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar Schema =\n/*#__PURE__*/\nfunction () {\n  function Schema(schema) {\n    this.schema = schema;\n  }\n\n  var _proto = Schema.prototype;\n\n  _proto.getFieldType = function getFieldType(fieldName) {\n    return this.schema[fieldName] || new _StringType[\"default\"]();\n  };\n\n  _proto.getKeys = function getKeys() {\n    return Object.keys(this.schema);\n  };\n\n  _proto.checkForField = function checkForField(fieldName, fieldValue, data) {\n    var fieldChecker = this.schema[fieldName];\n\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return {\n        hasError: false\n      };\n    }\n\n    return fieldChecker.check(fieldValue, data);\n  };\n\n  _proto.check = function check(data) {\n    var _this = this;\n\n    var checkResult = {};\n    Object.keys(this.schema).forEach(function (key) {\n      checkResult[key] = _this.checkForField(key, data[key], data);\n    });\n    return checkResult;\n  };\n\n  _proto.checkForFieldAsync = function checkForFieldAsync(fieldName, fieldValue, data) {\n    var fieldChecker = this.schema[fieldName];\n\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return Promise.resolve({\n        hasError: false\n      });\n    }\n\n    return fieldChecker.checkAsync(fieldValue, data);\n  };\n\n  _proto.checkAsync = function checkAsync(data) {\n    var _this2 = this;\n\n    var checkResult = {};\n    var promises = [];\n    var keys = [];\n    Object.keys(this.schema).forEach(function (key) {\n      keys.push(key);\n      promises.push(_this2.checkForFieldAsync(key, data[key], data));\n    });\n    return Promise.all(promises).then(function (values) {\n      for (var i = 0; i < values.length; i += 1) {\n        checkResult[keys[i]] = values[i];\n      }\n\n      return checkResult;\n    });\n  };\n\n  return Schema;\n}();\n\nexports.Schema = Schema;\n\nvar SchemaModel = function SchemaModel(o) {\n  return new Schema(o);\n};\n\nexports.SchemaModel = SchemaModel;\n\nSchemaModel.combine = function () {\n  for (var _len = arguments.length, models = new Array(_len), _key = 0; _key < _len; _key++) {\n    models[_key] = arguments[_key];\n  }\n\n  return new Schema(models.map(function (model) {\n    return model.schema;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};","map":null,"metadata":{},"sourceType":"script"}