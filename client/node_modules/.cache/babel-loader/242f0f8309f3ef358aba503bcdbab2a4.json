{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _camelCase from \"lodash/camelCase\";\nimport _isNumber from \"lodash/isNumber\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getPosition, scrollTop } from 'dom-lib';\nimport FormattedMessage from '../IntlProvider/FormattedMessage';\nimport classNames from 'classnames';\nimport { prefix, getUnhandledProps, defaultProps } from '../utils';\nimport scrollTopAnimation from '../utils/scrollTopAnimation';\nimport setHours from \"date-fns/set_hours\";\nimport setMinutes from \"date-fns/set_minutes\";\nimport setSeconds from \"date-fns/set_seconds\";\nimport getSeconds from \"date-fns/get_seconds\";\nimport getMinutes from \"date-fns/get_minutes\";\nimport getHours from \"date-fns/get_hours\";\n\nfunction getRanges(meridian) {\n  return {\n    hours: {\n      start: 0,\n      end: meridian ? 11 : 23\n    },\n    minutes: {\n      start: 0,\n      end: 59\n    },\n    seconds: {\n      start: 0,\n      end: 59\n    }\n  };\n}\n\nexport function getMeridianHours(hours) {\n  return hours >= 12 ? hours - 12 : hours;\n}\n\nvar TimeDropdown =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(TimeDropdown, _React$PureComponent);\n\n  function TimeDropdown() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.container = {};\n\n    _this.scrollTo = function (time) {\n      Object.entries(time).forEach(function (item) {\n        var container = _this.container[item[0]];\n        var node = container.querySelector(\"[data-key=\\\"\" + item[0] + \"-\" + item[1] + \"\\\"]\");\n\n        if (node && container) {\n          var _getPosition = getPosition(node, container),\n              top = _getPosition.top;\n\n          scrollTopAnimation(_this.container[item[0]], top, scrollTop(_this.container[item[0]]) !== 0);\n        }\n      });\n    };\n\n    _this.handleClick = function (type, d, event) {\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          date = _this$props.date; // $FlowFixMe\n\n      var nextDate = date || new Date();\n\n      switch (type) {\n        case 'hours':\n          nextDate = setHours(date, d);\n          break;\n\n        case 'minutes':\n          nextDate = setMinutes(date, d);\n          break;\n\n        case 'seconds':\n          nextDate = setSeconds(date, d);\n          break;\n      }\n\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextDate, event);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    return _this;\n  }\n\n  var _proto = TimeDropdown.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updatePosition();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.updatePosition();\n  };\n\n  _proto.getTime = function getTime(props) {\n    var _ref = props || this.props,\n        format = _ref.format,\n        date = _ref.date,\n        showMeridian = _ref.showMeridian;\n\n    var time = date || new Date();\n    var nextTime = {};\n\n    if (!format) {\n      return nextTime;\n    }\n\n    if (/(H|h)/.test(format)) {\n      var hours = getHours(time);\n      nextTime.hours = showMeridian ? getMeridianHours(hours) : hours;\n    }\n\n    if (/m/.test(format)) {\n      nextTime.minutes = getMinutes(time);\n    }\n\n    if (/s/.test(format)) {\n      nextTime.seconds = getSeconds(time);\n    }\n\n    return nextTime;\n  };\n\n  _proto.updatePosition = function updatePosition(props) {\n    var _ref2 = props || this.props,\n        show = _ref2.show;\n\n    var time = this.getTime(props);\n    show && this.scrollTo(time);\n  };\n\n  _proto.renderColumn = function renderColumn(type, active) {\n    var _this2 = this;\n\n    var showMeridian = this.props.showMeridian;\n\n    if (!_isNumber(active)) {\n      return null;\n    }\n\n    var date = this.props.date;\n    var _getRanges$type = getRanges(showMeridian)[type],\n        start = _getRanges$type.start,\n        end = _getRanges$type.end;\n    var items = [];\n\n    var hideFunc = this.props[_camelCase(\"hide_\" + type)];\n\n    var disabledFunc = this.props[_camelCase(\"disabled_\" + type)];\n\n    for (var i = start; i <= end; i += 1) {\n      if (!(hideFunc === null || hideFunc === void 0 ? void 0 : hideFunc(i, date))) {\n        var _classNames;\n\n        var disabled = disabledFunc === null || disabledFunc === void 0 ? void 0 : disabledFunc(i, date);\n        var itemClasses = classNames(this.addPrefix('cell'), (_classNames = {}, _classNames[this.addPrefix('cell-active')] = active === i, _classNames[this.addPrefix('cell-disabled')] = disabled, _classNames));\n        items.push(React.createElement(\"li\", {\n          key: i\n        }, React.createElement(\"a\", {\n          role: \"menu\",\n          className: itemClasses,\n          tabIndex: -1,\n          \"data-key\": type + \"-\" + i,\n          onClick: !disabled ? this.handleClick.bind(this, type, i) : null\n        }, showMeridian && type === 'hours' && i === 0 ? '12' : i)));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: this.addPrefix('column')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('column-title')\n    }, React.createElement(FormattedMessage, {\n      id: type\n    })), React.createElement(\"ul\", {\n      ref: function ref(_ref3) {\n        _this2.container[type] = _ref3;\n      }\n    }, items));\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        classPrefix = _this$props2.classPrefix,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"className\", \"classPrefix\"]);\n\n    var time = this.getTime();\n    var classes = classNames(classPrefix, className);\n    var unhandled = getUnhandledProps(TimeDropdown, rest);\n    return React.createElement(\"div\", _extends({}, unhandled, {\n      className: classes\n    }), React.createElement(\"div\", {\n      className: this.addPrefix('content')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('row')\n    }, this.renderColumn('hours', time.hours), this.renderColumn('minutes', time.minutes), this.renderColumn('seconds', time.seconds))));\n  };\n\n  return TimeDropdown;\n}(React.PureComponent);\n\nTimeDropdown.propTypes = {\n  date: PropTypes.instanceOf(Date),\n  show: PropTypes.bool,\n  showMeridian: PropTypes.bool,\n  format: PropTypes.string,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  disabledDate: PropTypes.func,\n  disabledHours: PropTypes.func,\n  disabledMinutes: PropTypes.func,\n  disabledSeconds: PropTypes.func,\n  hideHours: PropTypes.func,\n  hideMinutes: PropTypes.func,\n  hideSeconds: PropTypes.func,\n  onSelect: PropTypes.func\n};\nTimeDropdown.defaultProps = {\n  show: false\n};\nvar enhance = defaultProps({\n  classPrefix: 'calendar-time-dropdown'\n});\nexport default enhance(TimeDropdown);","map":null,"metadata":{},"sourceType":"module"}