{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport _trim from \"lodash/trim\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { findNodeOfTree } from '../utils/treeUtils';\nimport placementPolyfill from '../utils/placementPolyfill';\nimport reactToString from '../utils/reactToString';\nvar defaultNodeKeys = {\n  valueKey: 'value',\n  childrenKey: 'children'\n};\nexport function createConcatChildrenFunction(node, nodeValue, nodeKeys) {\n  if (nodeKeys === void 0) {\n    nodeKeys = defaultNodeKeys;\n  }\n\n  var _nodeKeys = nodeKeys,\n      valueKey = _nodeKeys.valueKey,\n      childrenKey = _nodeKeys.childrenKey;\n  return function (data, children) {\n    if (nodeValue) {\n      node = findNodeOfTree(data, function (item) {\n        return nodeValue === item[valueKey];\n      });\n    }\n\n    node[childrenKey] = children;\n    return data.concat([]);\n  };\n}\nexport function shouldDisplay(label, searchKeyword) {\n  if (!_trim(searchKeyword)) {\n    return true;\n  }\n\n  var keyword = searchKeyword.toLocaleLowerCase();\n\n  if (typeof label === 'string' || typeof label === 'number') {\n    return (\"\" + label).toLocaleLowerCase().indexOf(keyword) >= 0;\n  } else if (React.isValidElement(label)) {\n    var nodes = reactToString(label);\n    return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n  }\n\n  return false;\n}\nexport function getToggleWrapperClassName(name, prefix, props, hasValue, classes) {\n  var _extends2;\n\n  var className = props.className,\n      placement = props.placement,\n      appearance = props.appearance,\n      cleanable = props.cleanable,\n      block = props.block,\n      disabled = props.disabled,\n      countable = props.countable;\n  return classNames(className, prefix(name), prefix(appearance), prefix('toggle-wrapper'), _extends((_extends2 = {}, _extends2[prefix(\"placement-\" + _kebabCase(placementPolyfill(placement)))] = placement, _extends2[prefix('block')] = block, _extends2[prefix('has-value')] = hasValue, _extends2[prefix('disabled')] = disabled, _extends2[prefix('cleanable')] = hasValue && cleanable, _extends2[prefix('countable')] = countable, _extends2), classes));\n}\nexport function onMenuKeyDown(event, events) {\n  var down = events.down,\n      up = events.up,\n      enter = events.enter,\n      del = events.del,\n      esc = events.esc;\n\n  switch (event.keyCode) {\n    // down\n    case 40:\n      down === null || down === void 0 ? void 0 : down(event);\n      event.preventDefault();\n      break;\n    // up\n\n    case 38:\n      up === null || up === void 0 ? void 0 : up(event);\n      event.preventDefault();\n      break;\n    // enter\n\n    case 13:\n      enter === null || enter === void 0 ? void 0 : enter(event);\n      event.preventDefault();\n      break;\n    // delete\n\n    case 8:\n      del === null || del === void 0 ? void 0 : del(event);\n      break;\n    // esc | tab\n\n    case 27:\n    case 9:\n      esc === null || esc === void 0 ? void 0 : esc(event);\n      event.preventDefault();\n      break;\n\n    default:\n  }\n}","map":null,"metadata":{},"sourceType":"module"}