{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport compareAsc from \"date-fns/compare_asc\";\nimport endOfMonth from \"date-fns/end_of_month\";\nimport startOfMonth from \"date-fns/start_of_month\";\nimport endOfWeek from \"date-fns/end_of_week\";\nimport startOfWeek from \"date-fns/start_of_week\";\nimport endOfISOWeek from \"date-fns/end_of_iso_week\";\nimport startOfISOWeek from \"date-fns/start_of_iso_week\";\nimport addMonths from \"date-fns/add_months\";\nimport isSameMonth from \"date-fns/is_same_month\";\nimport isSameDay from \"date-fns/is_same_day\";\nimport isAfter from \"date-fns/is_after\";\nimport isBefore from \"date-fns/is_before\";\nimport addDays from \"date-fns/add_days\";\nimport IntlContext from '../IntlProvider/IntlContext';\nimport FormattedDate from '../IntlProvider/FormattedDate';\nimport Toolbar from './Toolbar';\nimport DatePicker from './DatePicker';\nimport { setTimingMargin, getCalendarDate } from './utils';\nimport { defaultProps, getUnhandledProps, prefix, createChainedFunction } from '../utils';\nimport { PickerToggle, MenuWrapper, PickerToggleTrigger, getToggleWrapperClassName } from '../Picker';\nimport { DATERANGE_DISABLED_TARGET } from '../constants';\nimport { pickerPropTypes, pickerDefaultProps } from '../Picker/propTypes';\n\nvar DateRangePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DateRangePicker, _React$Component);\n\n  DateRangePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value;\n\n    if (typeof value === 'undefined') {\n      return null;\n    }\n\n    if (value[0] && !isSameDay(value[0], prevState.value[0]) || value[1] && !isSameDay(value[1], prevState.value[1])) {\n      return {\n        value: value,\n        selectValue: value,\n        calendarDate: getCalendarDate(value)\n      };\n    }\n\n    return null;\n  };\n\n  function DateRangePicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuContainerRef = void 0;\n    _this.triggerRef = void 0;\n\n    _this.getValue = function () {\n      var value = _this.props.value;\n\n      if (typeof value !== 'undefined') {\n        return value;\n      }\n\n      return _this.state.value || [];\n    };\n\n    _this.getWeekHoverRange = function (date) {\n      var isoWeek = _this.props.isoWeek;\n\n      if (isoWeek) {\n        // set to the first day of this week according to ISO 8601, 12:00 am\n        return [startOfISOWeek(date), endOfISOWeek(date)];\n      }\n\n      return [startOfWeek(date), endOfWeek(date)];\n    };\n\n    _this.getMonthHoverRange = function (date) {\n      return [startOfMonth(date), endOfMonth(date)];\n    };\n\n    _this.handleChangeCalendarDate = function (index, date) {\n      var calendarDate = _this.state.calendarDate;\n      calendarDate[index] = date;\n\n      _this.setState({\n        calendarDate: calendarDate\n      });\n    };\n\n    _this.handleCloseDropdown = function () {\n      var _this$triggerRef$curr, _this$triggerRef$curr2;\n\n      (_this$triggerRef$curr = _this.triggerRef.current) === null || _this$triggerRef$curr === void 0 ? void 0 : (_this$triggerRef$curr2 = _this$triggerRef$curr.hide) === null || _this$triggerRef$curr2 === void 0 ? void 0 : _this$triggerRef$curr2.call(_this$triggerRef$curr);\n    };\n\n    _this.handleOpenDropdown = function () {\n      var _this$triggerRef$curr3, _this$triggerRef$curr4;\n\n      (_this$triggerRef$curr3 = _this.triggerRef.current) === null || _this$triggerRef$curr3 === void 0 ? void 0 : (_this$triggerRef$curr4 = _this$triggerRef$curr3.show) === null || _this$triggerRef$curr4 === void 0 ? void 0 : _this$triggerRef$curr4.call(_this$triggerRef$curr3);\n    };\n\n    _this.open = function () {\n      var _this$handleOpenDropd, _this2;\n\n      (_this$handleOpenDropd = (_this2 = _this).handleOpenDropdown) === null || _this$handleOpenDropd === void 0 ? void 0 : _this$handleOpenDropd.call(_this2);\n    };\n\n    _this.close = function () {\n      var _this$handleCloseDrop, _this3;\n\n      (_this$handleCloseDrop = (_this3 = _this).handleCloseDropdown) === null || _this$handleCloseDrop === void 0 ? void 0 : _this$handleCloseDrop.call(_this3);\n    };\n\n    _this.handleShortcutPageDate = function (value, closeOverlay, event) {\n      _this.updateValue(event, value, closeOverlay);\n    };\n\n    _this.handleOK = function (event) {\n      var _this$props$onOk, _this$props;\n\n      _this.updateValue(event);\n\n      (_this$props$onOk = (_this$props = _this.props).onOk) === null || _this$props$onOk === void 0 ? void 0 : _this$props$onOk.call(_this$props, _this.state.selectValue, event);\n    };\n\n    _this.handleChangeSelectValue = function (date, event) {\n      var _this$state = _this.state,\n          selectValue = _this$state.selectValue,\n          doneSelected = _this$state.doneSelected;\n      var _this$props2 = _this.props,\n          onSelect = _this$props2.onSelect,\n          oneTap = _this$props2.oneTap;\n      var nextValue = [];\n\n      var nextHoverValue = _this.getHoverRange(date);\n\n      if (doneSelected) {\n        if (nextHoverValue.length) {\n          nextValue = [nextHoverValue[0], nextHoverValue[1], date];\n          nextHoverValue = [nextHoverValue[0], nextHoverValue[1], date];\n        } else {\n          nextValue = [date, undefined, date];\n        }\n      } else {\n        if (nextHoverValue.length) {\n          nextValue = [selectValue[0], selectValue[1]];\n        } else {\n          nextValue = [selectValue[0], date];\n        }\n\n        if (isAfter(nextValue[0], nextValue[1])) {\n          nextValue.reverse();\n        }\n\n        nextValue[0] = setTimingMargin(nextValue[0]);\n        nextValue[1] = setTimingMargin(nextValue[1]);\n\n        _this.setState({\n          calendarDate: getCalendarDate(nextValue)\n        });\n      }\n\n      var nextState = {\n        doneSelected: !doneSelected,\n        selectValue: nextValue,\n        hoverValue: nextHoverValue\n      };\n      event.persist();\n\n      _this.setState(nextState, function () {\n        // 如果是单击模式，并且是第一次点选，再触发一次点击\n        if (oneTap && !_this.state.doneSelected) {\n          _this.handleChangeSelectValue(date, event);\n        } // 如果是单击模式，并且是第二次点选，更新值，并关闭面板\n\n\n        if (oneTap && _this.state.doneSelected) {\n          _this.updateValue(event);\n        }\n\n        onSelect === null || onSelect === void 0 ? void 0 : onSelect(date, event);\n      });\n    };\n\n    _this.handleMouseMoveSelectValue = function (date) {\n      var _this$state2 = _this.state,\n          doneSelected = _this$state2.doneSelected,\n          selectValue = _this$state2.selectValue,\n          hoverValue = _this$state2.hoverValue,\n          currentHoverDate = _this$state2.currentHoverDate;\n      var hoverRange = _this.props.hoverRange;\n\n      if (currentHoverDate && isSameDay(date, currentHoverDate)) {\n        return;\n      }\n\n      var nextHoverValue = _this.getHoverRange(date);\n\n      if (doneSelected && !_isUndefined(hoverRange)) {\n        _this.setState({\n          currentHoverDate: date,\n          hoverValue: nextHoverValue\n        });\n\n        return;\n      } else if (doneSelected) {\n        return;\n      }\n\n      var nextValue = selectValue;\n\n      if (!nextHoverValue.length) {\n        nextValue[1] = date;\n      } else if (hoverValue) {\n        nextValue = [isBefore(nextHoverValue[0], hoverValue[0]) ? nextHoverValue[0] : hoverValue[0], isAfter(nextHoverValue[1], hoverValue[1]) ? nextHoverValue[1] : hoverValue[1], nextValue[2]];\n      } // If `nextValue[0]` is greater than `nextValue[1]` then reverse order\n\n\n      if (isAfter(nextValue[0], nextValue[1])) {\n        nextValue.reverse();\n      }\n\n      _this.setState({\n        currentHoverDate: date,\n        selectValue: nextValue\n      });\n    };\n\n    _this.handleClean = function (event) {\n      _this.setState({\n        calendarDate: getCalendarDate()\n      });\n\n      _this.updateValue(event, []);\n    };\n\n    _this.handleEnter = function () {\n      var value = _this.getValue();\n\n      var calendarDate;\n\n      if (value && value.length) {\n        var startDate = value[0],\n            endData = value[1];\n        calendarDate = [startDate, isSameMonth(startDate, endData) ? addMonths(endData, 1) : endData];\n      } else {\n        calendarDate = getCalendarDate(_this.props.defaultCalendarValue);\n      }\n\n      _this.setState({\n        selectValue: value,\n        calendarDate: calendarDate,\n        active: true\n      });\n    };\n\n    _this.handleEntered = function () {\n      var _this$props$onOpen, _this$props3;\n\n      (_this$props$onOpen = (_this$props3 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props3);\n    };\n\n    _this.handleExit = function () {\n      var _this$props$onClose, _this$props4;\n\n      _this.setState({\n        active: false,\n        doneSelected: true\n      });\n\n      (_this$props$onClose = (_this$props4 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props4);\n    };\n\n    _this.disabledOkButton = function () {\n      var _this$state3 = _this.state,\n          selectValue = _this$state3.selectValue,\n          doneSelected = _this$state3.doneSelected;\n\n      if (!selectValue[0] || !selectValue[1] || !doneSelected) {\n        return true;\n      }\n\n      return _this.disabledByBetween(selectValue[0], selectValue[1], DATERANGE_DISABLED_TARGET.TOOLBAR_BUTTON_OK);\n    };\n\n    _this.disabledShortcutButton = function (value) {\n      if (value === void 0) {\n        value = [];\n      }\n\n      if (!value[0] || !value[1]) {\n        return true;\n      }\n\n      return _this.disabledByBetween(value[0], value[1], DATERANGE_DISABLED_TARGET.TOOLBAR_SHORTCUT);\n    };\n\n    _this.handleDisabledDate = function (date, values, type) {\n      var disabledDate = _this.props.disabledDate;\n      var doneSelected = _this.state.doneSelected;\n\n      if (disabledDate) {\n        return disabledDate(date, values, doneSelected, type);\n      }\n\n      return false;\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    var defaultValue = props.defaultValue,\n        _value = props.value,\n        defaultCalendarValue = props.defaultCalendarValue;\n    var activeValue = _value || defaultValue || [];\n\n    var _calendarDate = getCalendarDate(_value || defaultCalendarValue);\n\n    _this.state = {\n      value: activeValue,\n      selectValue: activeValue,\n      doneSelected: true,\n      calendarDate: _calendarDate,\n      hoverValue: [],\n      currentHoverDate: null\n    }; // for test\n\n    _this.menuContainerRef = React.createRef();\n    _this.triggerRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = DateRangePicker.prototype;\n\n  _proto.getDateString = function getDateString(value) {\n    var _this$props5 = this.props,\n        placeholder = _this$props5.placeholder,\n        formatType = _this$props5.format,\n        renderValue = _this$props5.renderValue;\n    var nextValue = value || this.getValue();\n    var startDate = nextValue === null || nextValue === void 0 ? void 0 : nextValue[0];\n    var endDate = nextValue === null || nextValue === void 0 ? void 0 : nextValue[1];\n\n    if (startDate && endDate) {\n      var displayValue = [startDate, endDate].sort(compareAsc);\n      return renderValue ? renderValue(displayValue, formatType) : React.createElement(React.Fragment, null, React.createElement(FormattedDate, {\n        date: displayValue[0],\n        formatStr: formatType\n      }), \" ~\", ' ', React.createElement(FormattedDate, {\n        date: displayValue[1],\n        formatStr: formatType\n      }));\n    }\n\n    return placeholder || formatType + \" ~ \" + formatType;\n  } // hover range presets\n  ;\n\n  _proto.getHoverRange = function getHoverRange(date) {\n    var hoverRange = this.props.hoverRange;\n\n    if (!hoverRange) {\n      return [];\n    }\n\n    var hoverRangeFunc = hoverRange;\n\n    if (hoverRange === 'week') {\n      hoverRangeFunc = this.getWeekHoverRange;\n    }\n\n    if (hoverRangeFunc === 'month') {\n      hoverRangeFunc = this.getMonthHoverRange;\n    }\n\n    if (typeof hoverRangeFunc !== 'function') {\n      return [];\n    }\n\n    var hoverValues = hoverRangeFunc(date);\n    var isHoverRangeValid = hoverValues instanceof Array && hoverValues.length === 2;\n\n    if (!isHoverRangeValid) {\n      return [];\n    }\n\n    if (isAfter(hoverValues[0], hoverValues[1])) {\n      hoverValues.reverse();\n    }\n\n    return hoverValues;\n  };\n\n  _proto.resetPageDate = function resetPageDate() {\n    var selectValue = this.getValue();\n    var calendarDate = getCalendarDate(selectValue);\n    this.setState({\n      selectValue: selectValue,\n      calendarDate: calendarDate\n    });\n  }\n  /**\n   * Toolbar operation callback function\n   */\n  ;\n\n  _proto.updateValue = function updateValue(event, nextSelectValue, closeOverlay) {\n    if (closeOverlay === void 0) {\n      closeOverlay = true;\n    }\n\n    var _this$state4 = this.state,\n        value = _this$state4.value,\n        selectValue = _this$state4.selectValue;\n    var onChange = this.props.onChange;\n    var nextValue = !_isUndefined(nextSelectValue) ? nextSelectValue : selectValue;\n    this.setState({\n      selectValue: nextValue || [],\n      value: nextValue\n    });\n\n    if (onChange && (!isSameDay(nextValue[0], value[0]) || !isSameDay(nextValue[1], value[1]))) {\n      onChange(nextValue, event);\n    } // `closeOverlay` default value is `true`\n\n\n    if (closeOverlay !== false) {\n      this.handleCloseDropdown();\n    }\n  };\n\n  _proto.disabledByBetween = function disabledByBetween(start, end, type) {\n    var disabledDate = this.props.disabledDate;\n    var _this$state5 = this.state,\n        selectValue = _this$state5.selectValue,\n        doneSelected = _this$state5.doneSelected;\n    var selectStartDate = selectValue[0];\n    var selectEndDate = selectValue[1];\n    var nextSelectValue = [selectStartDate, selectEndDate]; // If the date is between the start and the end\n    // the button is disabled\n\n    while (isBefore(start, end) || isSameDay(start, end)) {\n      if (disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(start, nextSelectValue, doneSelected, type)) {\n        return true;\n      }\n\n      start = addDays(start, 1);\n    }\n\n    return false;\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _classNames;\n\n    var _this$props6 = this.props,\n        menuClassName = _this$props6.menuClassName,\n        ranges = _this$props6.ranges,\n        isoWeek = _this$props6.isoWeek,\n        limitEndYear = _this$props6.limitEndYear,\n        oneTap = _this$props6.oneTap,\n        showWeekNumbers = _this$props6.showWeekNumbers,\n        showOneCalendar = _this$props6.showOneCalendar;\n    var _this$state6 = this.state,\n        calendarDate = _this$state6.calendarDate,\n        selectValue = _this$state6.selectValue,\n        hoverValue = _this$state6.hoverValue,\n        doneSelected = _this$state6.doneSelected;\n    var classes = classNames(this.addPrefix('daterange-menu'), menuClassName);\n    var panelClasses = classNames(this.addPrefix('daterange-panel'), (_classNames = {}, _classNames[this.addPrefix('daterange-panel-show-one-calendar')] = showOneCalendar, _classNames));\n    var pickerProps = {\n      isoWeek: isoWeek,\n      doneSelected: doneSelected,\n      hoverValue: hoverValue,\n      calendarDate: calendarDate,\n      limitEndYear: limitEndYear,\n      showWeekNumbers: showWeekNumbers,\n      value: selectValue,\n      disabledDate: this.handleDisabledDate,\n      onSelect: this.handleChangeSelectValue,\n      onMouseMove: this.handleMouseMoveSelectValue,\n      onChangeCalendarDate: this.handleChangeCalendarDate,\n      showOneCalendar: showOneCalendar\n    };\n    return React.createElement(MenuWrapper, {\n      className: classes,\n      ref: this.menuContainerRef\n    }, React.createElement(\"div\", {\n      className: panelClasses\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('daterange-content')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('daterange-header')\n    }, this.getDateString(selectValue)), React.createElement(\"div\", {\n      className: this.addPrefix(\"daterange-calendar-\" + (showOneCalendar ? 'single' : 'group'))\n    }, React.createElement(DatePicker, _extends({\n      index: 0\n    }, pickerProps)), !showOneCalendar && React.createElement(DatePicker, _extends({\n      index: 1\n    }, pickerProps)))), React.createElement(Toolbar, {\n      ranges: ranges,\n      selectValue: selectValue,\n      disabledOkButton: this.disabledOkButton,\n      disabledShortcutButton: this.disabledShortcutButton,\n      onShortcut: this.handleShortcutPageDate,\n      onOk: this.handleOK,\n      hideOkButton: oneTap\n    })));\n  };\n\n  _proto.render = function render() {\n    var _this$props7 = this.props,\n        disabled = _this$props7.disabled,\n        cleanable = _this$props7.cleanable,\n        locale = _this$props7.locale,\n        toggleComponentClass = _this$props7.toggleComponentClass,\n        style = _this$props7.style,\n        onEntered = _this$props7.onEntered,\n        onEnter = _this$props7.onEnter,\n        onExited = _this$props7.onExited,\n        onClean = _this$props7.onClean,\n        rest = _objectWithoutPropertiesLoose(_this$props7, [\"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEntered\", \"onEnter\", \"onExited\", \"onClean\"]);\n\n    var value = this.getValue();\n    var unhandled = getUnhandledProps(DateRangePicker, rest);\n    var hasValue = value && value.length > 1;\n    var classes = getToggleWrapperClassName('daterange', this.addPrefix, this.props, hasValue);\n    return React.createElement(IntlContext.Provider, {\n      value: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      onEnter: createChainedFunction(this.handleEnter, onEnter),\n      onEntered: createChainedFunction(this.handleEntered, onEntered),\n      onExited: createChainedFunction(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: createChainedFunction(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active,\n      \"aria-disabled\": disabled\n    }), this.getDateString()))));\n  };\n\n  return DateRangePicker;\n}(React.Component);\n\nDateRangePicker.propTypes = _extends({}, pickerPropTypes, {\n  ranges: PropTypes.array,\n  value: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  defaultValue: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  defaultCalendarValue: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  hoverRange: PropTypes.oneOfType([PropTypes.oneOf(['week', 'month']), PropTypes.func]),\n  format: PropTypes.string,\n  isoWeek: PropTypes.bool,\n  oneTap: PropTypes.bool,\n  limitEndYear: PropTypes.number,\n  showWeekNumbers: PropTypes.bool,\n  onChange: PropTypes.func,\n  onOk: PropTypes.func,\n  disabledDate: PropTypes.func,\n  onSelect: PropTypes.func,\n  showOneCalendar: PropTypes.bool\n});\nDateRangePicker.defaultProps = _extends({}, pickerDefaultProps, {\n  limitEndYear: 1000,\n  format: 'YYYY-MM-DD',\n  placeholder: '',\n  showOneCalendar: false,\n  locale: {\n    sunday: 'Su',\n    monday: 'Mo',\n    tuesday: 'Tu',\n    wednesday: 'We',\n    thursday: 'Th',\n    friday: 'Fr',\n    saturday: 'Sa',\n    ok: 'OK',\n    today: 'Today',\n    yesterday: 'Yesterday',\n    last7Days: 'Last 7 Days',\n    hours: 'Hours',\n    minutes: 'Minutes',\n    seconds: 'Seconds'\n  }\n});\nexport default defaultProps({\n  classPrefix: 'picker'\n})(DateRangePicker);","map":null,"metadata":{},"sourceType":"module"}