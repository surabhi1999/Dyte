{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SafeAnchor from '../SafeAnchor';\nimport Ripple from '../Ripple';\nimport { prefix, defaultProps, getUnhandledProps, createChainedFunction } from '../utils';\n\nvar PaginationButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(PaginationButton, _React$Component);\n\n  function PaginationButton() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleClick = function (event) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          onSelect = _this$props.onSelect,\n          eventKey = _this$props.eventKey;\n\n      if (disabled) {\n        return;\n      }\n\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    };\n\n    return _this;\n  }\n\n  var _proto = PaginationButton.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        active = _this$props2.active,\n        disabled = _this$props2.disabled,\n        onClick = _this$props2.onClick,\n        className = _this$props2.className,\n        classPrefix = _this$props2.classPrefix,\n        style = _this$props2.style,\n        Component = _this$props2.componentClass,\n        children = _this$props2.children,\n        renderItem = _this$props2.renderItem,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"active\", \"disabled\", \"onClick\", \"className\", \"classPrefix\", \"style\", \"componentClass\", \"children\", \"renderItem\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var unhandled = getUnhandledProps(PaginationButton, rest);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('active')] = active, _classNames[addPrefix('disabled')] = disabled, _classNames));\n\n    var itemProps = _extends({}, unhandled, {\n      disabled: disabled,\n      onClick: createChainedFunction(onClick, this.handleClick)\n    });\n\n    if (Component !== SafeAnchor && typeof Component !== 'string') {\n      itemProps.active = active;\n    }\n\n    var item = React.createElement(Component, itemProps, children, React.createElement(Ripple, null));\n    return React.createElement(\"li\", {\n      className: classes,\n      style: style\n    }, renderItem ? renderItem(item) : item);\n  };\n\n  return PaginationButton;\n}(React.Component);\n\nPaginationButton.propTypes = {\n  classPrefix: PropTypes.string,\n  eventKey: PropTypes.any,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  componentClass: PropTypes.elementType,\n  children: PropTypes.node,\n  style: PropTypes.object,\n  renderItem: PropTypes.func\n};\nexport default defaultProps({\n  classPrefix: 'pagination-btn',\n  componentClass: SafeAnchor\n})(PaginationButton);","map":null,"metadata":{},"sourceType":"module"}