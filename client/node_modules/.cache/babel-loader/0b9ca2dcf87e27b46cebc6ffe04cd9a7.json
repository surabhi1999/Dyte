{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { prefix, defaultProps, getUnhandledProps } from '../utils';\nimport ReactChildren from '../utils/ReactChildren';\n\nvar Carousel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Carousel, _React$Component);\n\n  function Carousel(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this._autoplayTimer = null;\n    _this._key = (Math.random() * 1e18).toString(36).slice(0, 6);\n\n    _this.handleAutoplay = function (nextActiveIndex) {\n      var children = _this.props.children;\n      var activeIndex = _this.state.activeIndex;\n\n      _this.clearTimer();\n\n      var count = ReactChildren.count(children);\n      var nextIndex = nextActiveIndex !== null && nextActiveIndex !== void 0 ? nextActiveIndex : activeIndex + 1;\n\n      _this.setState({\n        activeIndex: nextIndex % count,\n        lastIndex: nextActiveIndex == null ? activeIndex : nextIndex % count\n      });\n\n      _this.triggerAutoPlay();\n    };\n\n    _this.handleChange = function (event) {\n      var activeIndex = +event.target.value;\n\n      _this.handleAutoplay(activeIndex);\n    };\n\n    _this.state = {\n      activeIndex: 0,\n      lastIndex: 0\n    };\n    return _this;\n  }\n\n  var _proto = Carousel.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.triggerAutoPlay();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.triggerAutoPlay();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.clearTimer();\n  };\n\n  _proto.triggerAutoPlay = function triggerAutoPlay() {\n    var _this$props = this.props,\n        autoplay = _this$props.autoplay,\n        autoplayInterval = _this$props.autoplayInterval,\n        children = _this$props.children;\n    var count = ReactChildren.count(children);\n\n    if (!this._autoplayTimer && autoplay && count > 1) {\n      this._autoplayTimer = setTimeout(this.handleAutoplay, autoplayInterval);\n    }\n  };\n\n  _proto.clearTimer = function clearTimer() {\n    clearTimeout(this._autoplayTimer);\n    this._autoplayTimer = null;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this,\n        _sliderStyles,\n        _classNames,\n        _ref;\n\n    var _this$props2 = this.props,\n        Component = _this$props2.componentClass,\n        children = _this$props2.children,\n        classPrefix = _this$props2.classPrefix,\n        className = _this$props2.className,\n        placement = _this$props2.placement,\n        shape = _this$props2.shape,\n        locale = _this$props2.locale,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"componentClass\", \"children\", \"classPrefix\", \"className\", \"placement\", \"shape\", \"locale\"]);\n\n    var _this$state = this.state,\n        activeIndex = _this$state.activeIndex,\n        lastIndex = _this$state.lastIndex;\n    var addPrefix = prefix(classPrefix);\n    var count = ReactChildren.count(children);\n    var labels = [];\n    var vertical = placement === 'left' || placement === 'right';\n    var lengthKey = vertical ? 'height' : 'width';\n    var items = React.Children.map(children, function (child, index) {\n      var _extends2;\n\n      if (!child) {\n        return;\n      }\n\n      var inputKey = \"indicator_\" + _this2._key + \"_\" + index;\n      labels.push(React.createElement(\"li\", {\n        key: \"label\" + index,\n        className: addPrefix('label-wrapper')\n      }, React.createElement(\"input\", {\n        name: inputKey,\n        id: inputKey,\n        type: \"radio\",\n        onChange: _this2.handleChange,\n        value: index,\n        checked: activeIndex === index\n      }), React.createElement(\"label\", {\n        htmlFor: inputKey,\n        className: addPrefix('label')\n      })));\n      return React.cloneElement(child, {\n        key: \"slider-item\" + index,\n        style: _extends({}, child.props.style, (_extends2 = {}, _extends2[lengthKey] = 100 / count + \"%\", _extends2)),\n        className: classNames(addPrefix('slider-item'), child.props.className)\n      });\n    });\n    var classes = classNames(className, classPrefix, addPrefix(\"placement-\" + placement), addPrefix(\"shape-\" + shape));\n    var unhandled = getUnhandledProps(Carousel, rest);\n    var positiveOrder = vertical || !(locale === null || locale === void 0 ? void 0 : locale.rtl);\n    var sign = positiveOrder ? '-' : '';\n    var activeRatio = \"\" + sign + 100 / count * activeIndex + \"%\";\n    var sliderStyles = (_sliderStyles = {}, _sliderStyles[lengthKey] = count * 100 + \"%\", _sliderStyles.transform = vertical ? \"translate3d(0, \" + activeRatio + \" ,0)\" : \"translate3d(\" + activeRatio + \", 0 ,0)\", _sliderStyles);\n    var showMask = count > 1 && activeIndex === 0 && activeIndex !== lastIndex;\n    return React.createElement(Component, _extends({\n      className: classes\n    }, unhandled), React.createElement(\"div\", {\n      className: addPrefix('content')\n    }, React.createElement(\"div\", {\n      className: addPrefix('slider'),\n      style: sliderStyles\n    }, items), showMask && React.createElement(\"div\", {\n      className: classNames(addPrefix('slider-after'), (_classNames = {}, _classNames[addPrefix('slider-after-vertical')] = vertical, _classNames)),\n      style: (_ref = {}, _ref[lengthKey] = '200%', _ref)\n    }, [items[items.length - 1], items[0]].map(function (node) {\n      var _extends3;\n\n      return React.cloneElement(node, {\n        key: node.key,\n        style: _extends({}, node.props.style, (_extends3 = {}, _extends3[lengthKey] = '50%', _extends3))\n      });\n    }))), React.createElement(\"div\", {\n      className: addPrefix('toolbar')\n    }, React.createElement(\"ul\", null, labels)));\n  };\n\n  return Carousel;\n}(React.Component);\n\nCarousel.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  componentClass: PropTypes.elementType,\n  autoplay: PropTypes.bool,\n  autoplayInterval: PropTypes.number,\n  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  shape: PropTypes.oneOf(['dot', 'bar'])\n};\nCarousel.defaultProps = {\n  autoplayInterval: 4000,\n  placement: 'bottom',\n  shape: 'dot',\n  locale: {}\n};\nexport default defaultProps({\n  classPrefix: 'carousel',\n  componentClass: 'div'\n})(Carousel);","map":null,"metadata":{},"sourceType":"module"}