{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport shallowEqual from '../utils/shallowEqual';\nimport stringToObject from '../utils/stringToObject';\nexport function getDerivedStateForCascade(nextProps, prevState, selectNodeValue, newChildren) {\n  var data = nextProps.data,\n      labelKey = nextProps.labelKey,\n      valueKey = nextProps.valueKey,\n      childrenKey = nextProps.childrenKey,\n      value = nextProps.value;\n  var activeItemValue = selectNodeValue || (typeof value === 'undefined' ? prevState.value : value);\n  var nextItems = [];\n  var nextPathItems = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      items[i] = stringToObject(items[i], labelKey, valueKey);\n      var children = items[i][childrenKey];\n\n      if (shallowEqual(items[i][valueKey], activeItemValue)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var v = findNode(children);\n\n        if (v) {\n          nextItems.push(children.map(function (item) {\n            return _extends({}, stringToObject(item, labelKey, valueKey), {\n              parent: items[i]\n            });\n          }));\n          nextPathItems.push(v.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var activeItem = findNode(data);\n  nextItems.push(data);\n\n  if (activeItem) {\n    nextPathItems.push(activeItem.active);\n  }\n  /**\n   * 如果是异步更新 data 后，获取到的一个 selectNodeValue，则不更新 activePaths\n   * 但是需要更新 items， 因为这里的目的就是把异步更新后的的数据展示出来\n   */\n\n\n  var cascadePathItems = nextPathItems.reverse();\n\n  if (newChildren) {\n    return {\n      items: [].concat(nextItems.reverse(), [newChildren]),\n      tempActivePaths: cascadePathItems\n    };\n  }\n\n  return {\n    items: nextItems.reverse(),\n    tempActivePaths: null,\n    activePaths: cascadePathItems\n  };\n}","map":null,"metadata":{},"sourceType":"module"}