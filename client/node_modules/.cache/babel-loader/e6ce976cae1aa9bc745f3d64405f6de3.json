{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withStyleProps, defaultProps, prefix, refType } from '../utils';\nimport mergeRefs from '../utils/mergeRefs';\nexport var modalDialogPropTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  dialogClassName: PropTypes.string,\n  style: PropTypes.object,\n  dialogStyle: PropTypes.object,\n  children: PropTypes.node,\n  dialogRef: refType,\n  id: PropTypes.string,\n  'aria-labelledby': PropTypes.string\n};\n\nvar ModalDialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ModalDialog, _React$Component);\n\n  function ModalDialog() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.htmlElement = null;\n\n    _this.bindHtmlRef = function (ref) {\n      _this.htmlElement = ref;\n    };\n\n    return _this;\n  }\n\n  var _proto = ModalDialog.prototype;\n\n  _proto.getHTMLElement = function getHTMLElement() {\n    return this.htmlElement;\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        style = _this$props.style,\n        children = _this$props.children,\n        dialogClassName = _this$props.dialogClassName,\n        dialogStyle = _this$props.dialogStyle,\n        classPrefix = _this$props.classPrefix,\n        className = _this$props.className,\n        dialogRef = _this$props.dialogRef,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"style\", \"children\", \"dialogClassName\", \"dialogStyle\", \"classPrefix\", \"className\", \"dialogRef\"]);\n\n    var modalStyle = _extends({\n      display: 'block'\n    }, style);\n\n    var addPrefix = prefix(classPrefix);\n    var dialogClasses = classNames(addPrefix('dialog'), dialogClassName);\n    return React.createElement(\"div\", _extends({}, props, {\n      title: null,\n      role: \"dialog\",\n      ref: mergeRefs(this.bindHtmlRef, dialogRef),\n      className: classNames(classPrefix, className),\n      style: modalStyle\n    }), React.createElement(\"div\", {\n      className: dialogClasses,\n      style: dialogStyle\n    }, React.createElement(\"div\", {\n      className: addPrefix('content')\n    }, children)));\n  };\n\n  return ModalDialog;\n}(React.Component);\n\nModalDialog.propTypes = modalDialogPropTypes;\nexport default compose(withStyleProps({\n  hasSize: true\n}), defaultProps({\n  classPrefix: 'modal'\n}))(ModalDialog);","map":null,"metadata":{},"sourceType":"module"}