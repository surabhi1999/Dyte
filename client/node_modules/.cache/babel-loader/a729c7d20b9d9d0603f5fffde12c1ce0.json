{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport prefix, { defaultClassPrefix } from '../utils/prefix';\nimport { precisionMath } from './utils';\nvar addPrefix = prefix(defaultClassPrefix('slider'));\n\nfunction Mark(props) {\n  var _classNames;\n\n  var mark = props.mark,\n      last = props.last,\n      renderMark = props.renderMark;\n  var classes = classNames(addPrefix('mark'), (_classNames = {}, _classNames[addPrefix('last-mark')] = last, _classNames));\n\n  if (renderMark) {\n    return React.createElement(\"span\", {\n      className: classes\n    }, React.createElement(\"span\", {\n      className: addPrefix('mark-content')\n    }, renderMark(mark)));\n  }\n\n  return null;\n}\n\nfunction Graduated(props) {\n  var step = props.step,\n      min = props.min,\n      max = props.max,\n      count = props.count,\n      value = props.value,\n      renderMark = props.renderMark;\n  var activeIndexs = [];\n  var startIndex = 0;\n  var endIndex = 0;\n\n  if (Array.isArray(value)) {\n    var start = value[0],\n        end = value[1];\n    startIndex = precisionMath(start / step - min / step);\n    endIndex = precisionMath(end / step - min / step);\n    activeIndexs.push(precisionMath(Math.ceil((start - min) / (max - min) * count)));\n    activeIndexs.push(precisionMath(Math.ceil((end - min) / (max - min) * count)));\n  } else {\n    endIndex = precisionMath(value / step - min / step);\n    activeIndexs.push(precisionMath(Math.ceil((value - min) / (max - min) * count)));\n  }\n\n  var graduatedItems = [];\n\n  for (var i = 0; i < count; i += 1) {\n    var _classNames2;\n\n    var classes = classNames((_classNames2 = {}, _classNames2[addPrefix('pass')] = i >= startIndex && i <= endIndex, _classNames2[addPrefix('active')] = ~activeIndexs.indexOf(i), _classNames2));\n\n    var _mark = precisionMath(i * step + min);\n\n    var lastMark = Math.min(max, _mark + step);\n    var last = i === count - 1;\n    graduatedItems.push(React.createElement(\"li\", {\n      className: classes,\n      key: i\n    }, React.createElement(Mark, {\n      mark: _mark,\n      renderMark: renderMark\n    }), last ? React.createElement(Mark, {\n      mark: lastMark,\n      renderMark: renderMark,\n      last: last\n    }) : null));\n  }\n\n  return React.createElement(\"div\", {\n    className: addPrefix('graduator')\n  }, React.createElement(\"ul\", null, graduatedItems));\n}\n\nexport default Graduated;","map":null,"metadata":{},"sourceType":"module"}