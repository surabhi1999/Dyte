{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _pick from \"lodash/pick\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport setSeconds from \"date-fns/set_seconds\";\nimport setMinutes from \"date-fns/set_minutes\";\nimport setHours from \"date-fns/set_hours\";\nimport getSeconds from \"date-fns/get_seconds\";\nimport isSameDay from \"date-fns/is_same_day\";\nimport getHours from \"date-fns/get_hours\";\nimport getMinutes from \"date-fns/get_minutes\";\nimport IntlContext from '../IntlProvider/IntlContext';\nimport FormattedDate from '../IntlProvider/FormattedDate';\nimport Calendar from '../Calendar/Calendar';\nimport Toolbar from './Toolbar';\nimport { disabledTime, calendarOnlyProps } from '../utils/timeUtils';\nimport { shouldOnlyTime } from '../utils/formatUtils';\nimport composeFunctions from '../utils/composeFunctions';\nimport { defaultProps, getUnhandledProps, prefix, createChainedFunction } from '../utils';\nimport { PickerToggle, MenuWrapper, PickerToggleTrigger, getToggleWrapperClassName } from '../Picker';\nimport { pickerPropTypes, pickerDefaultProps } from '../Picker/propTypes';\n\nvar DatePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DatePicker, _React$Component);\n\n  function DatePicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuContainerRef = void 0;\n    _this.triggerRef = void 0;\n    _this.calendar = null;\n\n    _this.onMoveForword = function (nextPageDate) {\n      var _this$props$onNextMon, _this$props, _this$props$onChangeC, _this$props2;\n\n      _this.setState({\n        pageDate: nextPageDate\n      });\n\n      (_this$props$onNextMon = (_this$props = _this.props).onNextMonth) === null || _this$props$onNextMon === void 0 ? void 0 : _this$props$onNextMon.call(_this$props, nextPageDate);\n      (_this$props$onChangeC = (_this$props2 = _this.props).onChangeCalendarDate) === null || _this$props$onChangeC === void 0 ? void 0 : _this$props$onChangeC.call(_this$props2, nextPageDate);\n    };\n\n    _this.onMoveBackward = function (nextPageDate) {\n      var _this$props$onPrevMon, _this$props3, _this$props$onChangeC2, _this$props4;\n\n      _this.setState({\n        pageDate: nextPageDate\n      });\n\n      (_this$props$onPrevMon = (_this$props3 = _this.props).onPrevMonth) === null || _this$props$onPrevMon === void 0 ? void 0 : _this$props$onPrevMon.call(_this$props3, nextPageDate);\n      (_this$props$onChangeC2 = (_this$props4 = _this.props).onChangeCalendarDate) === null || _this$props$onChangeC2 === void 0 ? void 0 : _this$props$onChangeC2.call(_this$props4, nextPageDate);\n    };\n\n    _this.getValue = function () {\n      return _this.props.value || _this.state.value;\n    };\n\n    _this.handleChangePageDate = function (nextPageDate) {\n      _this.setState({\n        pageDate: nextPageDate,\n        calendarState: undefined\n      });\n\n      _this.handleAllSelect(nextPageDate);\n    };\n\n    _this.handleChangePageTime = function (nextPageTime) {\n      _this.setState({\n        pageDate: nextPageTime\n      });\n\n      _this.handleAllSelect(nextPageTime);\n    };\n\n    _this.handleToggleMeridian = function () {\n      var pageDate = _this.state.pageDate;\n      var hours = getHours(pageDate);\n      var nextHours = hours >= 12 ? hours - 12 : hours + 12;\n      var nextDate = setHours(pageDate, nextHours);\n\n      _this.setState({\n        pageDate: nextDate\n      });\n    };\n\n    _this.handleShortcutPageDate = function (value, closeOverlay, event) {\n      _this.updateValue(event, value, closeOverlay);\n\n      _this.handleAllSelect(value, event);\n    };\n\n    _this.handleOK = function (event) {\n      var _this$props$onOk, _this$props5;\n\n      _this.updateValue(event);\n\n      (_this$props$onOk = (_this$props5 = _this.props).onOk) === null || _this$props$onOk === void 0 ? void 0 : _this$props$onOk.call(_this$props5, _this.state.pageDate, event);\n    };\n\n    _this.handleCloseDropdown = function () {\n      var _this$triggerRef$curr, _this$triggerRef$curr2;\n\n      (_this$triggerRef$curr = _this.triggerRef.current) === null || _this$triggerRef$curr === void 0 ? void 0 : (_this$triggerRef$curr2 = _this$triggerRef$curr.hide) === null || _this$triggerRef$curr2 === void 0 ? void 0 : _this$triggerRef$curr2.call(_this$triggerRef$curr);\n    };\n\n    _this.handleOpenDropdown = function () {\n      var _this$triggerRef$curr3, _this$triggerRef$curr4;\n\n      (_this$triggerRef$curr3 = _this.triggerRef.current) === null || _this$triggerRef$curr3 === void 0 ? void 0 : (_this$triggerRef$curr4 = _this$triggerRef$curr3.show) === null || _this$triggerRef$curr4 === void 0 ? void 0 : _this$triggerRef$curr4.call(_this$triggerRef$curr3);\n    };\n\n    _this.open = function () {\n      var _this$handleOpenDropd, _this2;\n\n      (_this$handleOpenDropd = (_this2 = _this).handleOpenDropdown) === null || _this$handleOpenDropd === void 0 ? void 0 : _this$handleOpenDropd.call(_this2);\n    };\n\n    _this.close = function () {\n      var _this$handleCloseDrop, _this3;\n\n      (_this$handleCloseDrop = (_this3 = _this).handleCloseDropdown) === null || _this$handleCloseDrop === void 0 ? void 0 : _this$handleCloseDrop.call(_this3);\n    };\n\n    _this.toggleMonthDropdown = function () {\n      var _this$props$onToggleM, _this$props6;\n\n      var calendarState = _this.state.calendarState;\n      var toggle;\n\n      if (calendarState === 'DROP_MONTH') {\n        _this.hideDropdown();\n\n        toggle = false;\n      } else {\n        _this.showMonthDropdown();\n\n        toggle = true;\n      }\n\n      (_this$props$onToggleM = (_this$props6 = _this.props).onToggleMonthDropdown) === null || _this$props$onToggleM === void 0 ? void 0 : _this$props$onToggleM.call(_this$props6, toggle);\n    };\n\n    _this.toggleTimeDropdown = function () {\n      var _this$props$onToggleT, _this$props7;\n\n      var calendarState = _this.state.calendarState;\n      var toggle;\n\n      if (calendarState === 'DROP_TIME') {\n        _this.hideDropdown();\n\n        toggle = false;\n      } else {\n        _this.showTimeDropdown();\n\n        toggle = true;\n      }\n\n      (_this$props$onToggleT = (_this$props7 = _this.props).onToggleTimeDropdown) === null || _this$props$onToggleT === void 0 ? void 0 : _this$props$onToggleT.call(_this$props7, toggle);\n    };\n\n    _this.handleClean = function (event) {\n      _this.setState({\n        pageDate: new Date()\n      });\n\n      _this.updateValue(event, null);\n    };\n\n    _this.handleAllSelect = function (nextValue, event) {\n      var _this$props$onSelect, _this$props8, _this$props$onChangeC3, _this$props9;\n\n      (_this$props$onSelect = (_this$props8 = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props8, nextValue, event);\n      (_this$props$onChangeC3 = (_this$props9 = _this.props).onChangeCalendarDate) === null || _this$props$onChangeC3 === void 0 ? void 0 : _this$props$onChangeC3.call(_this$props9, nextValue, event);\n    };\n\n    _this.handleSelect = function (nextValue, event) {\n      var oneTap = _this.props.oneTap;\n      var pageDate = _this.state.pageDate;\n\n      _this.setState({\n        pageDate: composeFunctions(function (d) {\n          return setHours(d, getHours(pageDate));\n        }, function (d) {\n          return setMinutes(d, getMinutes(pageDate));\n        }, function (d) {\n          return setSeconds(d, getSeconds(pageDate));\n        })(nextValue)\n      });\n\n      _this.handleAllSelect(nextValue);\n\n      if (oneTap) {\n        _this.updateValue(event, nextValue);\n      }\n    };\n\n    _this.handleEntered = function () {\n      var _this$props$onOpen, _this$props10;\n\n      (_this$props$onOpen = (_this$props10 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props10);\n\n      _this.setState({\n        active: true\n      });\n    };\n\n    _this.handleExit = function () {\n      var _this$props$onClose, _this$props11;\n\n      (_this$props$onClose = (_this$props11 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props11);\n\n      _this.setState({\n        calendarState: undefined,\n        active: false\n      });\n    };\n\n    _this.disabledToolbarHandle = function (date) {\n      var disabledDate = _this.props.disabledDate;\n      var allowDate = disabledDate ? disabledDate(date) : false;\n      var allowTime = disabledTime(_this.props, date);\n      return allowDate || allowTime;\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    var defaultValue = props.defaultValue,\n        _value = props.value,\n        calendarDefaultDate = props.calendarDefaultDate;\n    var activeValue = _value || defaultValue;\n    _this.state = {\n      value: activeValue,\n      pageDate: activeValue || calendarDefaultDate || new Date() // display calendar date\n\n    };\n    _this.triggerRef = React.createRef(); // for test\n\n    _this.menuContainerRef = React.createRef();\n    return _this;\n  }\n\n  DatePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (typeof nextProps.value !== 'undefined') {\n      var value = nextProps.value;\n\n      if (value && !isSameDay(value, prevState.value)) {\n        return {\n          value: value,\n          pageDate: value\n        };\n      }\n\n      return {\n        value: value\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = DatePicker.prototype;\n\n  _proto.getDateString = function getDateString() {\n    var _this$props12 = this.props,\n        placeholder = _this$props12.placeholder,\n        formatType = _this$props12.format,\n        renderValue = _this$props12.renderValue;\n    var value = this.getValue();\n\n    if (value) {\n      return renderValue ? renderValue(value, formatType) : React.createElement(FormattedDate, {\n        date: value,\n        formatStr: formatType\n      });\n    }\n\n    return placeholder || formatType;\n  };\n\n  _proto.updateValue = function updateValue(event, nextPageDate, closeOverlay) {\n    if (closeOverlay === void 0) {\n      closeOverlay = true;\n    }\n\n    var pageDate = this.state.pageDate;\n    var value = this.getValue();\n    var nextValue = !_isUndefined(nextPageDate) ? nextPageDate : pageDate;\n    this.setState({\n      pageDate: nextValue || new Date(),\n      value: nextValue\n    });\n\n    if (nextValue !== value || !isSameDay(nextValue, value)) {\n      var _this$props$onChange, _this$props13;\n\n      (_this$props$onChange = (_this$props13 = this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props13, nextValue, event);\n    } // `closeOverlay` default value is `true`\n\n\n    if (closeOverlay !== false) {\n      this.handleCloseDropdown();\n    }\n  };\n\n  _proto.resetPageDate = function resetPageDate() {\n    var calendarDefaultDate = this.props.calendarDefaultDate;\n    var value = this.getValue();\n    this.setState({\n      pageDate: value || calendarDefaultDate || new Date()\n    });\n  };\n\n  _proto.showMonthDropdown = function showMonthDropdown() {\n    this.setState({\n      calendarState: 'DROP_MONTH'\n    });\n  };\n\n  _proto.hideDropdown = function hideDropdown() {\n    this.setState({\n      calendarState: undefined\n    });\n  };\n\n  _proto.showTimeDropdown = function showTimeDropdown() {\n    this.setState({\n      calendarState: 'DROP_TIME'\n    });\n  };\n\n  _proto.renderCalendar = function renderCalendar() {\n    var _this$props14 = this.props,\n        format = _this$props14.format,\n        isoWeek = _this$props14.isoWeek,\n        limitEndYear = _this$props14.limitEndYear,\n        disabledDate = _this$props14.disabledDate,\n        showWeekNumbers = _this$props14.showWeekNumbers,\n        showMeridian = _this$props14.showMeridian;\n    var _this$state = this.state,\n        calendarState = _this$state.calendarState,\n        pageDate = _this$state.pageDate;\n\n    var calendarProps = _pick(this.props, calendarOnlyProps);\n\n    return React.createElement(Calendar, _extends({}, calendarProps, {\n      showWeekNumbers: showWeekNumbers,\n      showMeridian: showMeridian,\n      disabledDate: disabledDate,\n      limitEndYear: limitEndYear,\n      format: format,\n      isoWeek: isoWeek,\n      calendarState: calendarState,\n      pageDate: pageDate,\n      onMoveForword: this.onMoveForword,\n      onMoveBackward: this.onMoveBackward,\n      onSelect: this.handleSelect,\n      onToggleMonthDropdown: this.toggleMonthDropdown,\n      onToggleTimeDropdown: this.toggleTimeDropdown,\n      onChangePageDate: this.handleChangePageDate,\n      onChangePageTime: this.handleChangePageTime,\n      onToggleMeridian: this.handleToggleMeridian\n    }));\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu(calendar) {\n    var _this$props15 = this.props,\n        ranges = _this$props15.ranges,\n        menuClassName = _this$props15.menuClassName,\n        oneTap = _this$props15.oneTap;\n    var pageDate = this.state.pageDate;\n    var classes = classNames(this.addPrefix('date-menu'), menuClassName);\n    return React.createElement(MenuWrapper, {\n      className: classes\n    }, React.createElement(\"div\", {\n      ref: this.menuContainerRef\n    }, calendar, React.createElement(Toolbar, {\n      ranges: ranges,\n      pageDate: pageDate,\n      disabledHandle: this.disabledToolbarHandle,\n      onShortcut: this.handleShortcutPageDate,\n      onOk: this.handleOK,\n      hideOkButton: oneTap\n    })));\n  };\n\n  _proto.render = function render() {\n    var _getToggleWrapperClas;\n\n    var _this$props16 = this.props,\n        inline = _this$props16.inline,\n        className = _this$props16.className,\n        disabled = _this$props16.disabled,\n        cleanable = _this$props16.cleanable,\n        classPrefix = _this$props16.classPrefix,\n        format = _this$props16.format,\n        locale = _this$props16.locale,\n        toggleComponentClass = _this$props16.toggleComponentClass,\n        style = _this$props16.style,\n        onEntered = _this$props16.onEntered,\n        onExited = _this$props16.onExited,\n        onClean = _this$props16.onClean,\n        rest = _objectWithoutPropertiesLoose(_this$props16, [\"inline\", \"className\", \"disabled\", \"cleanable\", \"classPrefix\", \"format\", \"locale\", \"toggleComponentClass\", \"style\", \"onEntered\", \"onExited\", \"onClean\"]);\n\n    var value = this.getValue();\n    var unhandled = getUnhandledProps(DatePicker, rest);\n    var hasValue = !!value;\n    var calendar = this.renderCalendar();\n\n    if (inline) {\n      return React.createElement(IntlContext.Provider, {\n        value: locale\n      }, React.createElement(\"div\", {\n        className: classNames(classPrefix, this.addPrefix('date-inline'), className)\n      }, calendar));\n    }\n\n    var classes = getToggleWrapperClassName('date', this.addPrefix, this.props, hasValue, (_getToggleWrapperClas = {}, _getToggleWrapperClas[this.addPrefix('date-only-time')] = shouldOnlyTime(format), _getToggleWrapperClas));\n    return React.createElement(IntlContext.Provider, {\n      value: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      onEntered: createChainedFunction(this.handleEntered, onEntered),\n      onExited: createChainedFunction(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu(calendar)\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: createChainedFunction(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active,\n      \"aria-disabled\": disabled\n    }), this.getDateString()))));\n  };\n\n  return DatePicker;\n}(React.Component);\n\nDatePicker.propTypes = _extends({}, pickerPropTypes, {\n  ranges: PropTypes.array,\n  defaultValue: PropTypes.instanceOf(Date),\n  value: PropTypes.instanceOf(Date),\n  calendarDefaultDate: PropTypes.instanceOf(Date),\n  format: PropTypes.string,\n  inline: PropTypes.bool,\n  isoWeek: PropTypes.bool,\n  limitEndYear: PropTypes.number,\n  oneTap: PropTypes.bool,\n  showWeekNumbers: PropTypes.bool,\n  showMeridian: PropTypes.bool,\n  disabledDate: PropTypes.func,\n  disabledHours: PropTypes.func,\n  disabledMinutes: PropTypes.func,\n  disabledSeconds: PropTypes.func,\n  hideHours: PropTypes.func,\n  hideMinutes: PropTypes.func,\n  hideSeconds: PropTypes.func,\n  onChange: PropTypes.func,\n  onChangeCalendarDate: PropTypes.func,\n  onToggleMonthDropdown: PropTypes.func,\n  onToggleTimeDropdown: PropTypes.func,\n  onSelect: PropTypes.func,\n  onPrevMonth: PropTypes.func,\n  onNextMonth: PropTypes.func,\n  onOk: PropTypes.func\n});\nDatePicker.defaultProps = _extends({}, pickerDefaultProps, {\n  limitEndYear: 1000,\n  format: 'YYYY-MM-DD',\n  placeholder: '',\n  locale: {\n    sunday: 'Su',\n    monday: 'Mo',\n    tuesday: 'Tu',\n    wednesday: 'We',\n    thursday: 'Th',\n    friday: 'Fr',\n    saturday: 'Sa',\n    ok: 'OK',\n    today: 'Today',\n    yesterday: 'Yesterday',\n    hours: 'Hours',\n    minutes: 'Minutes',\n    seconds: 'Seconds'\n  }\n});\npolyfill(DatePicker);\nexport default defaultProps({\n  classPrefix: 'picker'\n})(DatePicker);","map":null,"metadata":{},"sourceType":"module"}