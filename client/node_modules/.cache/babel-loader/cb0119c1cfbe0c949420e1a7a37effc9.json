{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport List from 'react-virtualized/dist/commonjs/List';\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\nimport { prefix, getUnhandledProps, defaultProps } from '../utils';\nimport MonthDropdownItem from './MonthDropdownItem';\nimport getDaysInMonth from \"date-fns/get_days_in_month\";\nimport getMonth from \"date-fns/get_month\";\nimport getYear from \"date-fns/get_year\";\nvar monthMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar defaultHeight = 221;\nvar defaultWidth = 256;\n\nfunction getRowHeight(count) {\n  return function (_ref) {\n    var index = _ref.index;\n\n    if (index === 0 || count - 1 === index) {\n      return 75 + 1;\n    }\n\n    return 75;\n  };\n}\n\nvar MonthDropdown =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(MonthDropdown, _React$PureComponent);\n\n  function MonthDropdown() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.getRowCount = function () {\n      var limitEndYear = _this.props.limitEndYear;\n      return getYear(new Date()) + limitEndYear;\n    };\n\n    _this.list = null;\n\n    _this.bindListRef = function (ref) {\n      _this.list = ref;\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.rowRenderer = function (_ref2) {\n      var _classNames;\n\n      var index = _ref2.index,\n          key = _ref2.key,\n          style = _ref2.style;\n      var _this$props = _this.props,\n          date = _this$props.date,\n          onSelect = _this$props.onSelect;\n      var selectedMonth = getMonth(date);\n      var selectedYear = getYear(date);\n      var year = index + 1;\n      var isSelectedYear = year === selectedYear;\n\n      var count = _this.getRowCount();\n\n      var titleClassName = classNames(_this.addPrefix('year'), (_classNames = {}, _classNames[_this.addPrefix('year-active')] = isSelectedYear, _classNames));\n      var rowClassName = classNames(_this.addPrefix('row'), {\n        'first-row': index === 0,\n        'last-row': index === count - 1\n      });\n      return React.createElement(\"div\", {\n        className: rowClassName,\n        key: key,\n        style: style\n      }, React.createElement(\"div\", {\n        className: titleClassName\n      }, year), React.createElement(\"div\", {\n        className: _this.addPrefix('list')\n      }, monthMap.map(function (item, month) {\n        return React.createElement(MonthDropdownItem, {\n          date: date,\n          onSelect: onSelect,\n          disabled: _this.disabledMonth(year, month),\n          active: isSelectedYear && month === selectedMonth,\n          key: month + \"_\" + item,\n          month: month + 1,\n          year: year\n        });\n      })));\n    };\n\n    return _this;\n  }\n\n  var _proto = MonthDropdown.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$list;\n\n    (_this$list = this.list) === null || _this$list === void 0 ? void 0 : _this$list.forceUpdateGrid();\n  };\n\n  _proto.disabledMonth = function disabledMonth(year, month) {\n    var disabledMonth = this.props.disabledMonth;\n\n    if (disabledMonth) {\n      var days = getDaysInMonth(new Date(year, month)); // If all dates in a month are disabled, disable the current month\n\n      for (var i = 1; i <= days; i++) {\n        if (!disabledMonth(new Date(year, month, i))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        classPrefix = _this$props2.classPrefix,\n        className = _this$props2.className,\n        date = _this$props2.date,\n        show = _this$props2.show,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"classPrefix\", \"className\", \"date\", \"show\"]);\n\n    var unhandled = getUnhandledProps(MonthDropdown, rest);\n    var count = this.getRowCount();\n    var classes = classNames(classPrefix, className, {\n      show: show\n    });\n    return React.createElement(\"div\", _extends({}, unhandled, {\n      className: classes\n    }), React.createElement(\"div\", {\n      className: this.addPrefix('content')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('scroll')\n    }, show && React.createElement(AutoSizer, {\n      defaultHeight: defaultHeight,\n      defaultWidth: defaultWidth\n    }, function (_ref3) {\n      var height = _ref3.height,\n          width = _ref3.width;\n      return React.createElement(List, {\n        className: _this2.addPrefix('row-wrapper'),\n        ref: _this2.bindListRef,\n        width: width || defaultWidth,\n        height: height || defaultHeight,\n        rowHeight: getRowHeight(count),\n        rowCount: count,\n        scrollToIndex: getYear(date),\n        rowRenderer: _this2.rowRenderer\n      });\n    }))));\n  };\n\n  return MonthDropdown;\n}(React.PureComponent);\n\nMonthDropdown.propTypes = {\n  date: PropTypes.instanceOf(Date),\n  limitEndYear: PropTypes.number,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  show: PropTypes.bool,\n  onSelect: PropTypes.func,\n  disabledMonth: PropTypes.func\n};\nMonthDropdown.defaultProps = {\n  show: false,\n  limitEndYear: 5,\n  date: new Date()\n};\nvar enhance = defaultProps({\n  classPrefix: 'calendar-month-dropdown'\n});\nexport default enhance(MonthDropdown);","map":null,"metadata":{},"sourceType":"module"}