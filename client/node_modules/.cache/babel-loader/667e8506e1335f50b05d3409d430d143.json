{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withStyleProps, defaultProps, prefix, createContext } from '../utils';\nexport var FormGroupContext = createContext(null);\n\nvar FormGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(FormGroup, _React$Component);\n\n  function FormGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = FormGroup.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props = this.props,\n        controlId = _this$props.controlId,\n        validationState = _this$props.validationState,\n        className = _this$props.className,\n        isValid = _this$props.isValid,\n        classPrefix = _this$props.classPrefix,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"controlId\", \"validationState\", \"className\", \"isValid\", \"classPrefix\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('has-success')] = !validationState && isValid, _classNames[addPrefix('has-error')] = !validationState && isValid === false, _classNames[addPrefix(\"has-\" + (validationState || ''))] = !_isUndefined(validationState), _classNames));\n    return React.createElement(FormGroupContext.Provider, {\n      value: controlId\n    }, React.createElement(\"div\", _extends({}, rest, {\n      className: classes,\n      role: \"group\"\n    })));\n  };\n\n  return FormGroup;\n}(React.Component);\n\nFormGroup.propTypes = {\n  controlId: PropTypes.string,\n  isValid: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  validationState: PropTypes.oneOf(['success', 'warning', 'error'])\n};\nexport default compose(withStyleProps({\n  hasSize: true\n}), defaultProps({\n  classPrefix: 'form-group'\n}))(FormGroup);","map":null,"metadata":{},"sourceType":"module"}