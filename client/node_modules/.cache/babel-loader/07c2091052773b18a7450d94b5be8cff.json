{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { defaultProps, prefix, placementPolyfill } from '../utils';\nimport { PLACEMENT_8 } from '../constants';\n\nvar ErrorMessage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ErrorMessage, _React$Component);\n\n  function ErrorMessage() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ErrorMessage.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        show = _this$props.show,\n        classPrefix = _this$props.classPrefix,\n        children = _this$props.children,\n        placement = _this$props.placement,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"show\", \"classPrefix\", \"children\", \"placement\"]);\n\n    if (!show) {\n      return null;\n    }\n\n    var addPrefix = prefix(classPrefix);\n    var wrapClasses = classNames(addPrefix('wrapper'), className, (_classNames = {}, _classNames[addPrefix(\"placement-\" + _kebabCase(placementPolyfill(placement)))] = placement, _classNames));\n    var classes = classNames(classPrefix, addPrefix('show'));\n    return React.createElement(\"div\", _extends({}, props, {\n      className: wrapClasses\n    }), React.createElement(\"span\", {\n      className: classes\n    }, React.createElement(\"span\", {\n      className: addPrefix('arrow')\n    }), React.createElement(\"span\", {\n      className: addPrefix('inner')\n    }, children)));\n  };\n\n  return ErrorMessage;\n}(React.Component);\n\nErrorMessage.propTypes = {\n  show: PropTypes.bool,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  placement: PropTypes.oneOf(PLACEMENT_8)\n};\nexport default defaultProps({\n  classPrefix: 'error-message'\n})(ErrorMessage);","map":null,"metadata":{},"sourceType":"module"}