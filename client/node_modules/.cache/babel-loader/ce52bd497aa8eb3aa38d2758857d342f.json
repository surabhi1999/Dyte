{"ast":null,"code":"import _flatten from \"lodash/flatten\";\n/*\n * Move manager\n * */\n\nvar Manager =\n/*#__PURE__*/\nfunction () {\n  function Manager() {\n    var _this = this;\n\n    this.refs = {};\n    this.active = void 0;\n\n    this.setActive = function (payload) {\n      return _this.active = payload;\n    };\n\n    this.getActive = function () {\n      return _this.active;\n    };\n\n    this.getIndex = function (collection, ref) {\n      return _this.refs[collection].indexOf(ref);\n    };\n\n    this.getNodeManagerRef = function (node) {\n      return _flatten(Object.values(_this.refs)).find(function (managerRef) {\n        return managerRef.node === node;\n      });\n    };\n\n    this.getOrderedRefs = function (collection) {\n      if (collection === undefined) {\n        collection = _this.active ? _this.active.info.collection : null;\n      }\n\n      if (collection !== null) {\n        var sortedRefs = [].concat(_this.refs[collection]);\n        sortedRefs.sort(function (nodeInfo1, nodeInfo2) {\n          return nodeInfo1.info.index - nodeInfo2.info.index;\n        });\n        return sortedRefs;\n      }\n\n      return [];\n    };\n  }\n\n  var _proto = Manager.prototype;\n\n  _proto.add = function add(collection, ref) {\n    if (!this.refs[collection]) {\n      this.refs[collection] = [];\n    }\n\n    this.refs[collection].push(ref);\n  };\n\n  _proto.remove = function remove(collection, ref) {\n    var index = this.getIndex(collection, ref);\n\n    if (index !== -1 && Array.isArray(this.refs[collection])) {\n      this.refs[collection].splice(index, 1);\n    }\n  };\n\n  return Manager;\n}();\n\nexport default Manager;","map":null,"metadata":{},"sourceType":"module"}