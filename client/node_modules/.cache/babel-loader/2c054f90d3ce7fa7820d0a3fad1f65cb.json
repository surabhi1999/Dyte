{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport Transition from '../Animation/Transition';\nimport { prefix, createChainedFunction } from '../utils';\nimport { defaultClassPrefix } from '../utils/prefix';\nimport Message from './Message';\nvar id = 0;\n\nvar getUid = function getUid() {\n  id += 1;\n  return defaultClassPrefix(\"notification-\" + Date.now() + \"-\" + id);\n};\n\nvar NoticeManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(NoticeManager, _React$Component);\n\n  NoticeManager.getInstance = function getInstance(props, callback) {\n    var getContainer = props.getContainer,\n        rest = _objectWithoutPropertiesLoose(props, [\"getContainer\"]);\n\n    var mountElement = document.createElement('div');\n    var container = typeof getContainer === 'function' ? getContainer() : document.body;\n    container.appendChild(mountElement);\n    var called = false;\n\n    function ref(ref) {\n      if (called) {\n        return;\n      }\n\n      var instance = {\n        push: function push(item) {\n          ref.add(item);\n        },\n        remove: function remove(key) {\n          ref.actualRemove(key);\n        },\n        removeAll: function removeAll() {\n          ref.removeAll();\n        },\n        component: ref,\n        destroy: function destroy() {\n          ReactDOM.unmountComponentAtNode(mountElement);\n          document.removeChild(mountElement);\n        }\n      };\n      called = true;\n      callback(instance);\n    }\n\n    ReactDOM.render(React.createElement(NoticeManager, _extends({}, rest, {\n      ref: ref\n    })), mountElement);\n  };\n\n  function NoticeManager(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this.add = function (item) {\n      var notices = _this.state.notices;\n      item.key = typeof item.key === 'undefined' ? getUid() : item.key;\n      item.show = true;\n\n      if (!notices.find(function (n) {\n        return n.key === item.key;\n      })) {\n        _this.setState({\n          notices: [].concat(notices, [item])\n        });\n      }\n    };\n\n    _this.removeAll = function () {\n      var notices = _this.state.notices;\n\n      _this.setState({\n        notices: notices.map(function (n) {\n          return _extends({}, n, {\n            show: false\n          });\n        })\n      }, function () {\n        setTimeout(function () {\n          var notices = _this.state.notices.filter(function (notice) {\n            return notice.show === true;\n          });\n\n          _this.setState({\n            notices: notices\n          });\n        }, 1000);\n      });\n    };\n\n    _this.remove = function (key) {\n      var notices = _this.state.notices;\n      key = _this.getKey(key);\n      var nextNotices = notices.map(function (n) {\n        if (n.key === key) {\n          n.show = false;\n        }\n\n        return n;\n      });\n\n      var callback = function callback() {\n        setTimeout(function () {\n          _this.actualRemove(key);\n        }, 1000);\n      };\n\n      _this.setState({\n        notices: nextNotices\n      }, callback);\n    };\n\n    _this.actualRemove = function (key) {\n      key = _this.getKey(key);\n\n      _this.setState(function (prevState) {\n        return {\n          notices: prevState.notices.filter(function (notice) {\n            return notice.key !== key;\n          })\n        };\n      });\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      show: false,\n      notices: []\n    };\n    return _this;\n  }\n\n  var _proto = NoticeManager.prototype;\n\n  _proto.getKey = function getKey(key) {\n    var notices = this.state.notices;\n\n    if (typeof key === 'undefined' && notices.length) {\n      key = notices[notices.length - 1].key;\n    }\n\n    return key;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var notices = this.state.notices;\n    var _this$props = this.props,\n        className = _this$props.className,\n        style = _this$props.style,\n        classPrefix = _this$props.classPrefix;\n    var elements = notices.map(function (item) {\n      var key = item.key,\n          show = item.show,\n          onClose = item.onClose,\n          itemClassName = item.className,\n          itemRest = _objectWithoutPropertiesLoose(item, [\"key\", \"show\", \"onClose\", \"className\"]);\n\n      return React.createElement(Transition, {\n        key: key,\n        in: show,\n        exitedClassName: _this2.addPrefix('fade-exited'),\n        exitingClassName: _this2.addPrefix('fade-leave-active'),\n        enteringClassName: _this2.addPrefix('fade-entering'),\n        enteredClassName: _this2.addPrefix('fade-entered'),\n        timeout: 300\n      }, function (props, ref) {\n        var transitionClassName = props.className,\n            rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n        return React.createElement(Message, _extends({}, itemRest, rest, {\n          className: classNames(itemClassName, transitionClassName),\n          htmlElementRef: ref,\n          classPrefix: classPrefix,\n          onClose: createChainedFunction(function () {\n            return _this2.remove(key);\n          }, onClose)\n        }));\n      });\n    });\n    var classes = classNames(classPrefix, className);\n    return React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, elements);\n  };\n\n  return NoticeManager;\n}(React.Component);\n\nNoticeManager.defaultProps = {\n  style: {\n    top: 5\n  }\n};\nexport default NoticeManager;","map":null,"metadata":{},"sourceType":"module"}