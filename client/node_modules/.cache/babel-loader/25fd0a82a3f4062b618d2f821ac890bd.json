{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isNil from \"lodash/isNil\";\nimport _isFunction from \"lodash/isFunction\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { polyfill } from 'react-lifecycles-compat';\nimport DropdownMenu, { dropdownMenuPropTypes } from './DropdownMenu';\nimport Checkbox from '../Checkbox';\nimport createUtils from './utils';\nimport { flattenTree, getNodeParents } from '../utils/treeUtils';\nimport { defaultProps, prefix, getUnhandledProps, createChainedFunction, mergeRefs } from '../utils';\nimport getSafeRegExpString from '../utils/getSafeRegExpString';\nimport { PickerToggle, MenuWrapper, SearchBar, SelectedElement, PickerToggleTrigger, getToggleWrapperClassName, createConcatChildrenFunction } from '../Picker';\nimport { listPickerPropTypes, listPickerDefaultProps } from '../Picker/propTypes';\n\nvar MultiCascader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(MultiCascader, _React$Component);\n\n  function MultiCascader(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.isControlled = null;\n    _this.menuContainerRef = void 0;\n    _this.positionRef = void 0;\n    _this.triggerRef = void 0;\n\n    _this.handleCheck = function (item, event, checked) {\n      var _this$props = _this.props,\n          valueKey = _this$props.valueKey,\n          cascade = _this$props.cascade,\n          uncheckableItemValues = _this$props.uncheckableItemValues,\n          onChange = _this$props.onChange,\n          onCheck = _this$props.onCheck;\n      var itemValue = item[valueKey];\n      var value = [];\n\n      if (cascade) {\n        value = MultiCascader.utils.splitValue(item, checked, _this.getValue(), uncheckableItemValues).value;\n      } else {\n        value = _this.getValue();\n\n        if (checked) {\n          value.push(itemValue);\n        } else {\n          value = value.filter(function (n) {\n            return n !== itemValue;\n          });\n        }\n      }\n\n      if (!_this.isControlled) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n      onCheck === null || onCheck === void 0 ? void 0 : onCheck(value, item, checked, event);\n    };\n\n    _this.handleChangeForSearchItem = function (value, checked, event) {\n      _this.handleCheck(value, event, checked);\n    };\n\n    _this.handleSelect = function (node, cascadeItems, activePaths, event) {\n      var _this$props2 = _this.props,\n          onSelect = _this$props2.onSelect,\n          valueKey = _this$props2.valueKey,\n          childrenKey = _this$props2.childrenKey;\n\n      _this.setState({\n        selectNode: node,\n        items: cascadeItems,\n        activePaths: activePaths\n      }, function () {\n        var _this$positionRef$cur, _this$positionRef$cur2;\n\n        (_this$positionRef$cur = _this.positionRef.current) === null || _this$positionRef$cur === void 0 ? void 0 : (_this$positionRef$cur2 = _this$positionRef$cur.updatePosition) === null || _this$positionRef$cur2 === void 0 ? void 0 : _this$positionRef$cur2.call(_this$positionRef$cur);\n      });\n\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, activePaths, createConcatChildrenFunction(node, node[valueKey], {\n        valueKey: valueKey,\n        childrenKey: childrenKey\n      }), event);\n    };\n\n    _this.handleSearch = function (searchKeyword, event) {\n      var _this$props$onSearch, _this$props3;\n\n      _this.setState({\n        searchKeyword: searchKeyword\n      });\n\n      (_this$props$onSearch = (_this$props3 = _this.props).onSearch) === null || _this$props$onSearch === void 0 ? void 0 : _this$props$onSearch.call(_this$props3, searchKeyword, event);\n    };\n\n    _this.handleCloseDropdown = function () {\n      var _this$triggerRef$curr, _this$triggerRef$curr2;\n\n      (_this$triggerRef$curr = _this.triggerRef.current) === null || _this$triggerRef$curr === void 0 ? void 0 : (_this$triggerRef$curr2 = _this$triggerRef$curr.hide) === null || _this$triggerRef$curr2 === void 0 ? void 0 : _this$triggerRef$curr2.call(_this$triggerRef$curr);\n    };\n\n    _this.handleOpenDropdown = function () {\n      var _this$triggerRef$curr3, _this$triggerRef$curr4;\n\n      (_this$triggerRef$curr3 = _this.triggerRef.current) === null || _this$triggerRef$curr3 === void 0 ? void 0 : (_this$triggerRef$curr4 = _this$triggerRef$curr3.show) === null || _this$triggerRef$curr4 === void 0 ? void 0 : _this$triggerRef$curr4.call(_this$triggerRef$curr3);\n    };\n\n    _this.open = function () {\n      var _this$handleOpenDropd, _this2;\n\n      (_this$handleOpenDropd = (_this2 = _this).handleOpenDropdown) === null || _this$handleOpenDropd === void 0 ? void 0 : _this$handleOpenDropd.call(_this2);\n    };\n\n    _this.close = function () {\n      var _this$handleCloseDrop, _this3;\n\n      (_this$handleCloseDrop = (_this3 = _this).handleCloseDropdown) === null || _this$handleCloseDrop === void 0 ? void 0 : _this$handleCloseDrop.call(_this3);\n    };\n\n    _this.handleClean = function (event) {\n      var _this$props4 = _this.props,\n          disabled = _this$props4.disabled,\n          onChange = _this$props4.onChange,\n          data = _this$props4.data;\n\n      if (disabled) {\n        return;\n      }\n\n      var nextState = {\n        items: [data],\n        selectNode: null,\n        activePaths: []\n      };\n\n      if (!_this.isControlled) {\n        nextState.value = [];\n      }\n\n      _this.setState(nextState);\n\n      onChange === null || onChange === void 0 ? void 0 : onChange([], event);\n    };\n\n    _this.handleEntered = function () {\n      var _this$props$onOpen, _this$props5;\n\n      (_this$props$onOpen = (_this$props5 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props5);\n\n      _this.setState({\n        active: true\n      });\n    };\n\n    _this.handleExit = function () {\n      var _this$props$onClose, _this$props6;\n\n      (_this$props$onClose = (_this$props6 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props6);\n\n      _this.setState({\n        searchKeyword: '',\n        active: false\n      });\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.renderSearchRow = function (item, key) {\n      var _extends2, _classNames;\n\n      var _this$props7 = _this.props,\n          labelKey = _this$props7.labelKey,\n          valueKey = _this$props7.valueKey,\n          cascade = _this$props7.cascade,\n          _this$props7$disabled = _this$props7.disabledItemValues,\n          disabledItemValues = _this$props7$disabled === void 0 ? [] : _this$props7$disabled;\n      var searchKeyword = _this.state.searchKeyword;\n\n      var values = _this.getValue();\n\n      var nodes = getNodeParents(item);\n      var regx = new RegExp(getSafeRegExpString(searchKeyword), 'ig');\n      var labelElements = [];\n      var a = item[labelKey].split(regx);\n      var b = item[labelKey].match(regx);\n\n      for (var i = 0; i < a.length; i++) {\n        labelElements.push(a[i]);\n\n        if (b[i]) {\n          labelElements.push(React.createElement(\"strong\", {\n            key: i\n          }, b[i]));\n        }\n      }\n\n      nodes.push(_extends({}, item, (_extends2 = {}, _extends2[labelKey] = labelElements, _extends2)));\n      var active = values.some(function (value) {\n        if (cascade) {\n          return nodes.some(function (node) {\n            return node[valueKey] === value;\n          });\n        }\n\n        return item[valueKey] === value;\n      });\n      var disabled = disabledItemValues.some(function (value) {\n        return nodes.some(function (node) {\n          return node[valueKey] === value;\n        });\n      });\n      var itemClasses = classNames(_this.addPrefix('cascader-row'), (_classNames = {}, _classNames[_this.addPrefix('cascader-row-disabled')] = disabled, _classNames));\n      return React.createElement(\"div\", {\n        key: key,\n        className: itemClasses\n      }, React.createElement(Checkbox, {\n        disabled: disabled,\n        checked: active,\n        value: item,\n        indeterminate: cascade && !active && MultiCascader.utils.isSomeChildChecked(item, values),\n        onChange: _this.handleChangeForSearchItem\n      }, React.createElement(\"span\", {\n        className: _this.addPrefix('cascader-cols')\n      }, nodes.map(function (node, index) {\n        return React.createElement(\"span\", {\n          key: \"col-\" + index,\n          className: _this.addPrefix('cascader-col')\n        }, node[labelKey]);\n      }))));\n    };\n\n    var _data = props.data,\n        _value = props.value,\n        defaultValue = props.defaultValue;\n    var initState = {\n      data: _data,\n      searchKeyword: '',\n      prevValue: _value,\n      value: defaultValue || [],\n      selectNode: null,\n\n      /**\n       * 选中值的路径\n       */\n      activePaths: []\n    };\n    MultiCascader.utils = createUtils(props);\n    var flattenData = flattenTree(_data, props.childrenKey);\n    _this.isControlled = !_isUndefined(_value);\n    _this.state = _extends({}, initState, {\n      flattenData: flattenData,\n\n      /**\n       * 用于展示面板的数据列表，是一个二维的数组\n       * 是通过 data 树结构转换成的二维的数组，其中只包含页面上展示的数据\n       */\n      items: [flattenData.filter(function (item) {\n        return !item.parent;\n      })]\n    }, MultiCascader.getCascadeState(props, flattenData)); // for test\n\n    _this.menuContainerRef = React.createRef();\n    _this.positionRef = React.createRef();\n    _this.triggerRef = React.createRef();\n    return _this;\n  }\n\n  MultiCascader.getCascadeState = function getCascadeState(nextProps, flattenData, nextValue) {\n    var data = nextProps.data,\n        cascade = nextProps.cascade,\n        value = nextProps.value,\n        defaultValue = nextProps.defaultValue,\n        uncheckableItemValues = nextProps.uncheckableItemValues;\n    var cascadeValue = nextValue || value || defaultValue || [];\n\n    if (cascade && data) {\n      cascadeValue = MultiCascader.utils.transformValue(cascadeValue, flattenData, uncheckableItemValues);\n    }\n\n    return {\n      value: cascadeValue\n    };\n  };\n\n  MultiCascader.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var data = nextProps.data,\n        valueKey = nextProps.valueKey,\n        childrenKey = nextProps.childrenKey;\n    var value = nextProps.value || prevState.value || [];\n    var prevValue = prevState.prevValue,\n        _prevState$selectNode = prevState.selectNode,\n        selectNode = _prevState$selectNode === void 0 ? {} : _prevState$selectNode,\n        items = prevState.items;\n    var flattenData = prevState.flattenData;\n    var isChangedData = data !== prevState.data;\n    var isChangedValue = !shallowEqualArray(prevValue, nextProps.value);\n\n    if (isChangedData || isChangedValue) {\n      if (isChangedData) {\n        flattenData = flattenTree(data, nextProps.childrenKey);\n      }\n      /**\n       * 如果更新了 data,\n       * 首先获取到被点击节点的值 `selectNode`， 然后再拿到新增后的 `newChildren`,\n       */\n\n\n      var nextSelectNode = flattenData.find(function (n) {\n        return selectNode && n[valueKey] === selectNode[valueKey];\n      });\n      var newChildren = (_get(nextSelectNode, childrenKey) || []).map(function (item) {\n        item.parent = nextSelectNode;\n        return item;\n      });\n\n      if (newChildren.length && items) {\n        items[items.length - 1] = newChildren;\n      }\n\n      var nextState = _extends({\n        selectNode: nextSelectNode,\n        flattenData: flattenData,\n        data: data,\n        items: MultiCascader.utils.getItems(nextSelectNode, flattenData)\n      }, MultiCascader.getCascadeState(nextProps, flattenData, value));\n\n      if (isChangedValue) {\n        nextState.prevValue = nextProps.value;\n      }\n\n      return nextState;\n    }\n\n    return null;\n  };\n\n  var _proto = MultiCascader.prototype;\n\n  _proto.getValue = function getValue() {\n    return this.state.value || [];\n  };\n\n  _proto.getSearchResult = function getSearchResult() {\n    var _this$props8 = this.props,\n        labelKey = _this$props8.labelKey,\n        valueKey = _this$props8.valueKey,\n        _this$props8$unchecka = _this$props8.uncheckableItemValues,\n        uncheckableItemValues = _this$props8$unchecka === void 0 ? [] : _this$props8$unchecka;\n    var _this$state = this.state,\n        searchKeyword = _this$state.searchKeyword,\n        flattenData = _this$state.flattenData;\n    var items = [];\n    var result = flattenData.filter(function (item) {\n      if (uncheckableItemValues.some(function (value) {\n        return item[valueKey] === value;\n      })) {\n        return false;\n      }\n\n      if (item[labelKey].match(new RegExp(getSafeRegExpString(searchKeyword), 'i'))) {\n        return true;\n      }\n\n      return false;\n    });\n\n    for (var i = 0; i < result.length; i++) {\n      items.push(result[i]);\n\n      if (i === 99) {\n        return items;\n      }\n    }\n\n    return items;\n  };\n\n  _proto.renderSearchResultPanel = function renderSearchResultPanel() {\n    var locale = this.props.locale;\n    var searchKeyword = this.state.searchKeyword;\n\n    if (searchKeyword === '') {\n      return null;\n    }\n\n    var items = this.getSearchResult();\n    return React.createElement(\"div\", {\n      className: this.addPrefix('cascader-search-panel')\n    }, items.length ? items.map(this.renderSearchRow) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText));\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _classNames2;\n\n    var _this$state2 = this.state,\n        items = _this$state2.items,\n        activePaths = _this$state2.activePaths,\n        searchKeyword = _this$state2.searchKeyword;\n    var _this$props9 = this.props,\n        renderMenu = _this$props9.renderMenu,\n        renderExtraFooter = _this$props9.renderExtraFooter,\n        menuClassName = _this$props9.menuClassName,\n        menuStyle = _this$props9.menuStyle,\n        classPrefix = _this$props9.classPrefix,\n        searchable = _this$props9.searchable,\n        locale = _this$props9.locale,\n        inline = _this$props9.inline;\n    var classes = classNames(this.addPrefix('cascader-menu'), this.addPrefix('multi-cascader-menu'), menuClassName, (_classNames2 = {}, _classNames2[this.addPrefix('inline')] = inline, _classNames2));\n\n    var menuProps = _pick(this.props, Object.keys(dropdownMenuPropTypes));\n\n    return React.createElement(MenuWrapper, {\n      className: classes,\n      style: menuStyle\n    }, searchable && React.createElement(SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: searchKeyword\n    }), this.renderSearchResultPanel(), searchKeyword === '' && React.createElement(DropdownMenu, _extends({}, menuProps, {\n      classPrefix: classPrefix,\n      ref: this.menuContainerRef,\n      cascadeItems: items,\n      cascadePathItems: activePaths,\n      value: this.getValue(),\n      onSelect: this.handleSelect,\n      onCheck: this.handleCheck,\n      renderMenu: renderMenu\n    })), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props$value;\n\n    var _this$props10 = this.props,\n        valueKey = _this$props10.valueKey,\n        labelKey = _this$props10.labelKey,\n        childrenKey = _this$props10.childrenKey,\n        placeholder = _this$props10.placeholder,\n        renderValue = _this$props10.renderValue,\n        disabled = _this$props10.disabled,\n        cleanable = _this$props10.cleanable,\n        locale = _this$props10.locale,\n        toggleComponentClass = _this$props10.toggleComponentClass,\n        style = _this$props10.style,\n        onEnter = _this$props10.onEnter,\n        onExited = _this$props10.onExited,\n        onClean = _this$props10.onClean,\n        countable = _this$props10.countable,\n        cascade = _this$props10.cascade,\n        inline = _this$props10.inline,\n        positionRef = _this$props10.positionRef,\n        rest = _objectWithoutPropertiesLoose(_this$props10, [\"valueKey\", \"labelKey\", \"childrenKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onExited\", \"onClean\", \"countable\", \"cascade\", \"inline\", \"positionRef\"]);\n\n    if (inline) {\n      return this.renderDropdownMenu();\n    }\n\n    var flattenData = this.state.flattenData;\n    var unhandled = getUnhandledProps(MultiCascader, rest);\n    var value = this.getValue();\n    var selectedItems = flattenData.filter(function (item) {\n      return value.some(function (v) {\n        return v === item[valueKey];\n      });\n    }) || [];\n    /**\n     * 1.Have a value and the value is valid.\n     * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n     */\n\n    var hasValue = selectedItems.length > 0 || ((_this$props$value = this.props.value) === null || _this$props$value === void 0 ? void 0 : _this$props$value.length) > 0 && _isFunction(renderValue);\n\n    var selectedElement = placeholder;\n\n    if (selectedItems.length > 0) {\n      selectedElement = React.createElement(SelectedElement, {\n        selectedItems: selectedItems,\n        countable: countable,\n        valueKey: valueKey,\n        labelKey: labelKey,\n        childrenKey: childrenKey,\n        prefix: this.addPrefix,\n        cascade: cascade,\n        locale: locale\n      });\n    }\n\n    if (hasValue && _isFunction(renderValue)) {\n      selectedElement = renderValue((value === null || value === void 0 ? void 0 : value.length) > 0 ? value : this.props.value, selectedItems, selectedElement);\n\n      if (_isNil(selectedElement)) {\n        hasValue = false;\n      }\n    }\n\n    var classes = getToggleWrapperClassName('cascader', this.addPrefix, this.props, hasValue);\n    return React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      tabIndex: -1,\n      role: \"menu\"\n    }, React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      positionRef: mergeRefs(this.positionRef, positionRef),\n      onEnter: createChainedFunction(this.handleEntered, onEnter),\n      onExited: createChainedFunction(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: createChainedFunction(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active,\n      \"aria-disabled\": disabled\n    }), selectedElement || locale.placeholder)));\n  };\n\n  return MultiCascader;\n}(React.Component);\n\nMultiCascader.propTypes = _extends({}, listPickerPropTypes, {\n  cascade: PropTypes.bool,\n  inline: PropTypes.bool,\n  countable: PropTypes.bool,\n  menuWidth: PropTypes.number,\n  menuHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  uncheckableItemValues: PropTypes.array,\n  searchable: PropTypes.bool,\n  renderMenuItem: PropTypes.func,\n  renderMenu: PropTypes.func,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onCheck: PropTypes.func\n});\nMultiCascader.defaultProps = _extends({}, listPickerDefaultProps, {\n  searchable: true,\n  countable: true,\n  cascade: true,\n  uncheckableItemValues: [],\n  locale: {\n    placeholder: 'Select',\n    checkAll: 'All',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  }\n});\nMultiCascader.utils = {};\npolyfill(MultiCascader);\nexport default defaultProps({\n  classPrefix: 'picker'\n})(MultiCascader);","map":null,"metadata":{},"sourceType":"module"}