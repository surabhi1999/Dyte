{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { setStatic } from 'recompose';\nimport { contains } from 'dom-lib';\nimport RootCloseWrapper from '../Overlay/RootCloseWrapper';\nimport shallowEqual from '../utils/shallowEqual';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownMenuItem from './DropdownMenuItem';\nimport { createChainedFunction, prefix, isOneOf, getUnhandledProps, defaultProps, placementPolyfill, getDOMNode } from '../utils';\nimport { SidenavContext } from '../Sidenav/Sidenav';\nimport { PLACEMENT_8 } from '../constants';\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.rootRef = void 0;\n\n    _this.toggle = function (isOpen) {\n      var _this$props = _this.props,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onToggle = _this$props.onToggle;\n      var open = _isUndefined(isOpen) ? !_this.getOpen() : isOpen;\n      var handleToggle = open ? onOpen : onClose;\n\n      _this.setState({\n        open: open\n      });\n\n      handleToggle === null || handleToggle === void 0 ? void 0 : handleToggle();\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(open);\n    };\n\n    _this.handleRootClose = function (event) {\n      var _this$props$onToggle, _this$props2, _this$props$onClose, _this$props3; // Prevent the event from bubbling when closing the overlay is triggered by its own element.\n      // fix#1435\n\n\n      if (contains(getDOMNode(_this.rootRef.current), event.target)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      _this.setState({\n        open: false\n      });\n\n      (_this$props$onToggle = (_this$props2 = _this.props).onToggle) === null || _this$props$onToggle === void 0 ? void 0 : _this$props$onToggle.call(_this$props2, false);\n      (_this$props$onClose = (_this$props3 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props3);\n    };\n\n    _this.handleClick = function (event) {\n      event.preventDefault();\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.toggle();\n    };\n\n    _this.handleOpenChange = function (event) {\n      var _this$context, _this$context$onOpenC;\n\n      var eventKey = _this.props.eventKey;\n      (_this$context = _this.context) === null || _this$context === void 0 ? void 0 : (_this$context$onOpenC = _this$context.onOpenChange) === null || _this$context$onOpenC === void 0 ? void 0 : _this$context$onOpenC.call(_this$context, eventKey, event);\n    };\n\n    _this.handleToggleChange = function (eventKey, event) {\n      var _this$context2, _this$context2$onOpen;\n\n      (_this$context2 = _this.context) === null || _this$context2 === void 0 ? void 0 : (_this$context2$onOpen = _this$context2.onOpenChange) === null || _this$context2$onOpen === void 0 ? void 0 : _this$context2$onOpen.call(_this$context2, eventKey, event);\n    };\n\n    _this.handleMouseEnter = function () {\n      if (!_this.props.disabled) {\n        _this.toggle(true);\n      }\n    };\n\n    _this.handleMouseLeave = function () {\n      if (!_this.props.disabled) {\n        _this.toggle(false);\n      }\n    };\n\n    _this.handleSelect = function (eventKey, event) {\n      var _this$props$onSelect, _this$props4;\n\n      (_this$props$onSelect = (_this$props4 = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props4, eventKey, event);\n\n      _this.toggle(false);\n    };\n\n    _this.state = {\n      open: props.open\n    };\n    _this.rootRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Dropdown.prototype;\n\n  _proto.getOpen = function getOpen() {\n    var open = this.props.open;\n\n    if (_isUndefined(open)) {\n      return this.state.open;\n    }\n\n    return open;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props5 = this.props,\n        title = _this$props5.title,\n        children = _this$props5.children,\n        className = _this$props5.className,\n        menuStyle = _this$props5.menuStyle,\n        disabled = _this$props5.disabled,\n        renderTitle = _this$props5.renderTitle,\n        classPrefix = _this$props5.classPrefix,\n        placement = _this$props5.placement,\n        activeKey = _this$props5.activeKey,\n        tabIndex = _this$props5.tabIndex,\n        toggleClassName = _this$props5.toggleClassName,\n        trigger = _this$props5.trigger,\n        icon = _this$props5.icon,\n        onClick = _this$props5.onClick,\n        onMouseEnter = _this$props5.onMouseEnter,\n        onMouseLeave = _this$props5.onMouseLeave,\n        onContextMenu = _this$props5.onContextMenu,\n        eventKey = _this$props5.eventKey,\n        Component = _this$props5.componentClass,\n        toggleComponentClass = _this$props5.toggleComponentClass,\n        noCaret = _this$props5.noCaret,\n        style = _this$props5.style,\n        showHeader = _this$props5.showHeader,\n        props = _objectWithoutPropertiesLoose(_this$props5, [\"title\", \"children\", \"className\", \"menuStyle\", \"disabled\", \"renderTitle\", \"classPrefix\", \"placement\", \"activeKey\", \"tabIndex\", \"toggleClassName\", \"trigger\", \"icon\", \"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"onContextMenu\", \"eventKey\", \"componentClass\", \"toggleComponentClass\", \"noCaret\", \"style\", \"showHeader\"]);\n\n    var _ref = this.context || {},\n        _ref$openKeys = _ref.openKeys,\n        openKeys = _ref$openKeys === void 0 ? [] : _ref$openKeys,\n        sidenav = _ref.sidenav,\n        expanded = _ref.expanded;\n\n    var menuExpanded = openKeys.some(function (key) {\n      return shallowEqual(key, eventKey);\n    });\n    var addPrefix = prefix(classPrefix);\n    var open = this.getOpen();\n    var collapsible = sidenav && expanded;\n    var unhandled = getUnhandledProps(Dropdown, props);\n\n    var toggleProps = _extends({}, unhandled, {\n      onClick: createChainedFunction(this.handleOpenChange, onClick),\n      onContextMenu: onContextMenu\n    });\n\n    var dropdownProps = {\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    };\n    /**\n     * Bind event of trigger,\n     * not used in  in the expanded state of '<Sidenav>'\n     */\n\n    if (!collapsible) {\n      if (isOneOf('click', trigger)) {\n        toggleProps.onClick = createChainedFunction(this.handleClick, toggleProps.onClick);\n      }\n\n      if (isOneOf('contextMenu', trigger)) {\n        toggleProps.onContextMenu = createChainedFunction(this.handleClick, onContextMenu);\n      }\n\n      if (isOneOf('hover', trigger)) {\n        dropdownProps.onMouseEnter = createChainedFunction(this.handleMouseEnter, onMouseEnter);\n        dropdownProps.onMouseLeave = createChainedFunction(this.handleMouseLeave, onMouseLeave);\n      }\n    }\n\n    var menuProps = {\n      collapsible: collapsible,\n      activeKey: activeKey,\n      openKeys: openKeys,\n      expanded: menuExpanded,\n      style: menuStyle,\n      onSelect: this.handleSelect,\n      onToggle: this.handleToggleChange\n    };\n    var menu = React.createElement(DropdownMenu, menuProps, children);\n\n    if (open) {\n      menu = React.createElement(RootCloseWrapper, {\n        onRootClose: this.handleRootClose\n      }, function (props, ref) {\n        return React.createElement(DropdownMenu, _extends({}, props, menuProps, {\n          htmlElementRef: ref\n        }), showHeader && React.createElement(\"li\", {\n          className: addPrefix('header')\n        }, title), children);\n      });\n    }\n\n    var toggle = React.createElement(DropdownToggle, _extends({}, toggleProps, {\n      noCaret: noCaret,\n      tabIndex: tabIndex,\n      className: toggleClassName,\n      renderTitle: renderTitle,\n      icon: icon,\n      componentClass: toggleComponentClass\n    }), title);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix(\"placement-\" + _kebabCase(placementPolyfill(placement)))] = placement, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix('no-caret')] = noCaret, _classNames[addPrefix('open')] = open, _classNames[addPrefix(menuExpanded ? 'expand' : 'collapse')] = sidenav, _classNames));\n    return React.createElement(Component, _extends({\n      ref: this.rootRef\n    }, dropdownProps, {\n      style: style,\n      className: classes,\n      role: \"menu\"\n    }), menu, toggle);\n  };\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.displayName = 'Dropdown';\nDropdown.contextType = SidenavContext;\nDropdown.propTypes = {\n  activeKey: PropTypes.any,\n  classPrefix: PropTypes.string,\n  trigger: PropTypes.oneOfType([PropTypes.array, PropTypes.oneOf(['click', 'hover', 'contextMenu'])]),\n  placement: PropTypes.oneOf(PLACEMENT_8),\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  menuStyle: PropTypes.object,\n  className: PropTypes.string,\n  toggleClassName: PropTypes.string,\n  children: PropTypes.node,\n  tabIndex: PropTypes.number,\n  open: PropTypes.bool,\n  eventKey: PropTypes.any,\n  componentClass: PropTypes.elementType,\n  toggleComponentClass: PropTypes.elementType,\n  noCaret: PropTypes.bool,\n  showHeader: PropTypes.bool,\n  style: PropTypes.object,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  onToggle: PropTypes.func,\n  onSelect: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func,\n  renderTitle: PropTypes.func\n};\nDropdown.defaultProps = {\n  placement: 'bottomStart',\n  trigger: 'click',\n  tabIndex: 0\n};\nvar EnhancedDropdown = defaultProps({\n  componentClass: 'div',\n  classPrefix: 'dropdown'\n})(Dropdown);\nsetStatic('Item', DropdownMenuItem)(EnhancedDropdown);\nsetStatic('Menu', DropdownMenu)(EnhancedDropdown);\nexport default EnhancedDropdown;","map":null,"metadata":{},"sourceType":"module"}