{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _omit from \"lodash/omit\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { SchemaModel } from 'schema-typed';\nimport classNames from 'classnames';\nimport shallowEqual from '../utils/shallowEqual';\nimport { getUnhandledProps, prefix } from '../utils';\nimport { defaultClassPrefix } from '../utils/prefix';\nimport FormContext, { FormValueContext, FormErrorContext } from './FormContext';\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Form, _React$Component);\n\n  function Form(_props) {\n    var _this;\n\n    _this = _React$Component.call(this, _props) || this;\n    _this.formContextValue = null;\n\n    _this.getFormValue = function (state, props) {\n      if (state === void 0) {\n        state = _this.state;\n      }\n\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      return _isUndefined(props.formValue) ? state.formValue : props.formValue;\n    };\n\n    _this.getFormError = function (state, props) {\n      if (state === void 0) {\n        state = _this.state;\n      }\n\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      return _isUndefined(props.formError) ? state.formError : props.formError;\n    };\n\n    _this.check = function (callback) {\n      var formValue = _this.getFormValue() || {};\n      var _this$props = _this.props,\n          model = _this$props.model,\n          onCheck = _this$props.onCheck,\n          onError = _this$props.onError;\n      var formError = {};\n      var errorCount = 0;\n      Object.keys(model.schema).forEach(function (key) {\n        var checkResult = model.checkForField(key, formValue[key], formValue);\n\n        if (checkResult.hasError === true) {\n          errorCount += 1;\n          formError[key] = checkResult.errorMessage;\n        }\n      });\n\n      _this.setState({\n        formError: formError\n      });\n\n      onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n      callback === null || callback === void 0 ? void 0 : callback(formError);\n\n      if (errorCount > 0) {\n        onError === null || onError === void 0 ? void 0 : onError(formError);\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.checkForField = function (fieldName, callback) {\n      var formValue = _this.getFormValue() || {};\n      var _this$props2 = _this.props,\n          model = _this$props2.model,\n          onCheck = _this$props2.onCheck,\n          onError = _this$props2.onError;\n      var checkResult = model.checkForField(fieldName, formValue[fieldName], formValue);\n\n      _this.setState(function (prvState, props) {\n        var _extends2;\n\n        var formError = _extends({}, _this.getFormError(prvState, props), (_extends2 = {}, _extends2[fieldName] = checkResult.errorMessage, _extends2));\n\n        onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n\n        if (checkResult.hasError) {\n          onError === null || onError === void 0 ? void 0 : onError(formError);\n        }\n\n        return {\n          formError: formError\n        };\n      });\n\n      callback === null || callback === void 0 ? void 0 : callback(checkResult);\n      return !checkResult.hasError;\n    };\n\n    _this.checkAsync = function () {\n      var formValue = _this.getFormValue() || {};\n      var _this$props3 = _this.props,\n          model = _this$props3.model,\n          onCheck = _this$props3.onCheck,\n          onError = _this$props3.onError;\n      var promises = [];\n      var keys = [];\n      Object.keys(model.schema).forEach(function (key) {\n        keys.push(key);\n        promises.push(model.checkForFieldAsync(key, formValue[key], formValue));\n      });\n      return Promise.all(promises).then(function (values) {\n        var formError = {};\n        var errorCount = 0;\n\n        for (var i = 0; i < values.length; i++) {\n          if (values[i].hasError) {\n            errorCount += 1;\n            formError[keys[i]] = values[i].errorMessage;\n          }\n        }\n\n        onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n\n        if (errorCount > 0) {\n          onError === null || onError === void 0 ? void 0 : onError(formError);\n        }\n\n        _this.setState({\n          formError: formError\n        });\n\n        return {\n          hasError: errorCount > 0,\n          formError: formError\n        };\n      });\n    };\n\n    _this.checkForFieldAsync = function (fieldName) {\n      var formValue = _this.getFormValue() || {};\n      var _this$props4 = _this.props,\n          model = _this$props4.model,\n          onCheck = _this$props4.onCheck,\n          onError = _this$props4.onError;\n      return model.checkForFieldAsync(fieldName, formValue[fieldName], formValue).then(function (checkResult) {\n        _this.setState(function (prvState, props) {\n          var _extends3;\n\n          var formError = _extends({}, _this.getFormError(prvState, props), (_extends3 = {}, _extends3[fieldName] = checkResult.errorMessage, _extends3));\n\n          onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n\n          if (checkResult.hasError) {\n            onError === null || onError === void 0 ? void 0 : onError(formError);\n          }\n\n          return {\n            formError: formError\n          };\n        });\n\n        return checkResult;\n      });\n    };\n\n    _this.handleFieldError = function (name, errorMessage) {\n      _this.setState(function (prvState, props) {\n        var _extends4, _this$props$onError, _this$props5, _this$props$onCheck, _this$props6;\n\n        var formError = _extends({}, _this.getFormError(prvState, props), (_extends4 = {}, _extends4[name] = errorMessage, _extends4));\n\n        (_this$props$onError = (_this$props5 = _this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props5, formError);\n        (_this$props$onCheck = (_this$props6 = _this.props).onCheck) === null || _this$props$onCheck === void 0 ? void 0 : _this$props$onCheck.call(_this$props6, formError);\n        return {\n          formError: formError\n        };\n      });\n    };\n\n    _this.handleFieldSuccess = function (name) {\n      _this.setState(function (prvState, props) {\n        var _this$props$onCheck2, _this$props7;\n\n        var formError = _omit(_this.getFormError(prvState, props), [name]);\n\n        (_this$props$onCheck2 = (_this$props7 = _this.props).onCheck) === null || _this$props$onCheck2 === void 0 ? void 0 : _this$props$onCheck2.call(_this$props7, formError);\n        return {\n          formError: formError\n        };\n      });\n    };\n\n    _this.handleFieldChange = function (name, value, event) {\n      var _extends5, _this$props$onChange, _this$props8;\n\n      var formValue = _this.getFormValue();\n\n      var nextFormValue = _extends({}, formValue, (_extends5 = {}, _extends5[name] = value, _extends5));\n\n      _this.setState({\n        formValue: nextFormValue\n      });\n\n      (_this$props$onChange = (_this$props8 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props8, nextFormValue, event);\n    };\n\n    _this.handleSubmit = function (event) {\n      var _this$props$onSubmit, _this$props9;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      var checkStatus = _this.check();\n\n      (_this$props$onSubmit = (_this$props9 = _this.props).onSubmit) === null || _this$props$onSubmit === void 0 ? void 0 : _this$props$onSubmit.call(_this$props9, checkStatus, event);\n    };\n\n    var _this$props10 = _this.props,\n        formDefaultValue = _this$props10.formDefaultValue,\n        _formError = _this$props10.formError;\n    _this.state = {\n      formError: _formError || {},\n      formValue: formDefaultValue\n    };\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n  /**\n   * public APIs\n   */\n\n  _proto.cleanErrors = function cleanErrors(callback) {\n    this.setState({\n      formError: {}\n    }, callback);\n  }\n  /**\n   * public APIs\n   */\n  ;\n\n  _proto.cleanErrorForFiled = function cleanErrorForFiled(fieldName, callback) {\n    this.setState({\n      formError: _omit(this.state.formError, [fieldName])\n    }, callback);\n  }\n  /**\n   * public APIs\n   */\n  ;\n\n  _proto.resetErrors = function resetErrors(formError, callback) {\n    if (formError === void 0) {\n      formError = {};\n    }\n\n    this.setState({\n      formError: formError\n    }, callback);\n  };\n\n  _proto.getFormContextValue = function getFormContextValue() {\n    var _this$props11 = this.props,\n        formDefaultValue = _this$props11.formDefaultValue,\n        errorFromContext = _this$props11.errorFromContext,\n        model = _this$props11.model,\n        checkTrigger = _this$props11.checkTrigger,\n        readOnly = _this$props11.readOnly,\n        plaintext = _this$props11.plaintext;\n    var nextFormContextValue = {\n      model: model,\n      checkTrigger: checkTrigger,\n      formDefaultValue: formDefaultValue,\n      errorFromContext: errorFromContext,\n      readOnly: readOnly,\n      plaintext: plaintext,\n      onFieldChange: this.handleFieldChange,\n      onFieldError: this.handleFieldError,\n      onFieldSuccess: this.handleFieldSuccess\n    };\n\n    if (!shallowEqual(nextFormContextValue, this.formContextValue)) {\n      this.formContextValue = nextFormContextValue;\n    }\n\n    return this.formContextValue;\n  };\n\n  _proto.checkErrorFromContext = function checkErrorFromContext(children) {\n    var errorFromContext = this.props.errorFromContext;\n\n    if (errorFromContext) {\n      var formError = this.getFormError();\n      return React.createElement(FormErrorContext.Provider, {\n        value: formError\n      }, children);\n    }\n\n    return children;\n  };\n\n  _proto.render = function render() {\n    var _this$props12 = this.props,\n        _this$props12$formVal = _this$props12.formValue,\n        formValue = _this$props12$formVal === void 0 ? {} : _this$props12$formVal,\n        layout = _this$props12.layout,\n        classPrefix = _this$props12.classPrefix,\n        fluid = _this$props12.fluid,\n        className = _this$props12.className,\n        children = _this$props12.children,\n        props = _objectWithoutPropertiesLoose(_this$props12, [\"formValue\", \"layout\", \"classPrefix\", \"fluid\", \"className\", \"children\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, addPrefix(layout), addPrefix(fluid && layout === 'vertical' ? 'fluid' : 'fixed-width'));\n    var unhandled = getUnhandledProps(Form, props);\n    var contextDefalutValue = this.getFormContextValue();\n    return React.createElement(\"form\", _extends({\n      onSubmit: this.handleSubmit\n    }, unhandled, {\n      className: classes\n    }), React.createElement(FormContext.Provider, {\n      value: contextDefalutValue\n    }, React.createElement(FormValueContext.Provider, {\n      value: formValue\n    }, this.checkErrorFromContext(children))));\n  };\n\n  return Form;\n}(React.Component);\n\nForm.propTypes = {\n  className: PropTypes.string,\n  layout: PropTypes.oneOf(['horizontal', 'vertical', 'inline']),\n  fluid: PropTypes.bool,\n  formValue: PropTypes.object,\n  formDefaultValue: PropTypes.object,\n  formError: PropTypes.object,\n  checkDelay: PropTypes.number,\n  checkTrigger: PropTypes.oneOf(['change', 'blur', 'none']),\n  onChange: PropTypes.func,\n  onError: PropTypes.func,\n  onCheck: PropTypes.func,\n  onSubmit: PropTypes.func,\n  model: PropTypes.object,\n  classPrefix: PropTypes.string,\n  errorFromContext: PropTypes.bool,\n  children: PropTypes.node,\n  readOnly: PropTypes.bool,\n  plaintext: PropTypes.bool\n};\nForm.defaultProps = {\n  classPrefix: defaultClassPrefix('form'),\n  model: SchemaModel({}),\n  layout: 'vertical',\n  formDefaultValue: {},\n  checkDelay: 500,\n  checkTrigger: 'change',\n  errorFromContext: true\n};\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}