{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isNil from \"lodash/isNil\";\nimport _get from \"lodash/get\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { on } from 'dom-lib';\nimport InputGroup from '../InputGroup/InputGroup';\nimport InputGroupAddon from '../InputGroup/InputGroupAddon';\nimport Input from '../Input';\nimport Button from '../Button';\nimport Icon from '../Icon';\nimport { prefix, defaultProps, getUnhandledProps, partitionHTMLProps, createChainedFunction } from '../utils';\n\nvar isFloat = function isFloat(value) {\n  return /(^-?|^\\+?|^\\d?)\\d*\\.\\d+$/.test(value + '');\n};\n\nfunction getDecimalLength(value) {\n  if (isFloat(value)) {\n    return value.toString().split('.')[1].length;\n  }\n\n  return 0;\n}\n\nfunction decimals() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  var lengths = values.map(getDecimalLength);\n  return Math.max.apply(Math, lengths);\n}\n\nfunction getButtonStatus(value, min, max) {\n  var status = {\n    disabledUpButton: false,\n    disabledDownButton: false\n  };\n\n  if (typeof value !== 'undefined' && value !== null) {\n    status.disabledUpButton = +value >= max;\n    status.disabledDownButton = +value <= min;\n  }\n\n  return status;\n}\n\nvar InputNumber =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(InputNumber, _React$Component);\n\n  function InputNumber(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.input = null;\n    _this.inputWheelListener = null;\n\n    _this.bindInputRef = function (ref) {\n      _this.input = ref;\n    };\n\n    _this.handleChange = function (value, event) {\n      if (!/^-?(?:\\d+)?(\\.)?(\\d+)*$/.test(value) && value !== '') {\n        return;\n      }\n\n      _this.handleValue(value, event);\n    };\n\n    _this.handleBlur = function (event) {\n      var targetValue = Number.parseFloat(_get(event, 'target.value'));\n\n      _this.handleValue(_this.getSafeValue(targetValue), event);\n    };\n\n    _this.handleWheel = function (event) {\n      var _this$props = _this.props,\n          onWheel = _this$props.onWheel,\n          disabled = _this$props.disabled;\n\n      if (!disabled && event.target === document.activeElement) {\n        event.preventDefault();\n        var delta = _get(event, 'wheelDelta') || -event.deltaY || -_get(event, 'detail');\n\n        if (delta > 0) {\n          _this.handleMinus(event);\n        }\n\n        if (delta < 0) {\n          _this.handlePlus(event);\n        }\n      }\n\n      onWheel && onWheel(event);\n    };\n\n    _this.handlePlus = function (event) {\n      var step = _this.props.step;\n      var value = +(_this.getValue() || 0);\n      var bit = decimals(value, step);\n      var nextValue = (value + step).toFixed(bit);\n\n      _this.handleValue(_this.getSafeValue(nextValue), event);\n    };\n\n    _this.handleMinus = function (event) {\n      var step = _this.props.step;\n      var value = +(_this.getValue() || 0);\n      var bit = decimals(value, step);\n      var nextValue = (value - step).toFixed(bit);\n\n      _this.handleValue(_this.getSafeValue(nextValue), event);\n    };\n\n    var _value = props.value,\n        defaultValue = props.defaultValue,\n        max = props.max,\n        min = props.min;\n\n    var _getButtonStatus = getButtonStatus(_isUndefined(_value) ? defaultValue : _value, min, max),\n        disabledUpButton = _getButtonStatus.disabledUpButton,\n        disabledDownButton = _getButtonStatus.disabledDownButton;\n\n    _this.state = {\n      value: defaultValue,\n      disabledUpButton: disabledUpButton,\n      disabledDownButton: disabledDownButton\n    };\n    return _this;\n  }\n\n  InputNumber.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if (typeof nextProps.value !== 'undefined') {\n      var value = nextProps.value,\n          min = nextProps.min,\n          max = nextProps.max;\n      return getButtonStatus(value, min, max);\n    }\n\n    return null;\n  };\n\n  var _proto = InputNumber.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.input && this.props.scrollable) {\n      this.inputWheelListener = on(this.input, 'wheel', this.handleWheel, {\n        passive: false\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.inputWheelListener) {\n      this.inputWheelListener.off();\n    }\n  };\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    return _isUndefined(value) ? this.state.value : value;\n  };\n\n  _proto.getSafeValue = function getSafeValue(value) {\n    var _this$props2 = this.props,\n        max = _this$props2.max,\n        min = _this$props2.min;\n\n    if (!Number.isNaN(value)) {\n      if (+value > max) {\n        value = max;\n      }\n\n      if (+value < min) {\n        value = min;\n      }\n    } else {\n      value = '';\n    }\n\n    return value.toString();\n  };\n\n  _proto.handleValue = function handleValue(currentValue, event) {\n    var value = this.state.value;\n    var _this$props3 = this.props,\n        onChange = _this$props3.onChange,\n        min = _this$props3.min,\n        max = _this$props3.max;\n\n    if (currentValue !== value) {\n      this.setState(_extends({}, getButtonStatus(currentValue, min, max), {\n        value: currentValue\n      }));\n      onChange === null || onChange === void 0 ? void 0 : onChange(currentValue, event);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        disabled = _this$props4.disabled,\n        size = _this$props4.size,\n        prefixElement = _this$props4.prefix,\n        postfix = _this$props4.postfix,\n        className = _this$props4.className,\n        classPrefix = _this$props4.classPrefix,\n        step = _this$props4.step,\n        buttonAppearance = _this$props4.buttonAppearance,\n        props = _objectWithoutPropertiesLoose(_this$props4, [\"disabled\", \"size\", \"prefix\", \"postfix\", \"className\", \"classPrefix\", \"step\", \"buttonAppearance\"]);\n\n    var _this$state = this.state,\n        disabledUpButton = _this$state.disabledUpButton,\n        disabledDownButton = _this$state.disabledDownButton;\n    var value = this.getValue();\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className);\n    var unhandled = getUnhandledProps(InputNumber, props);\n\n    var _partitionHTMLProps = partitionHTMLProps(unhandled),\n        htmlInputProps = _partitionHTMLProps[0],\n        rest = _partitionHTMLProps[1];\n\n    return React.createElement(InputGroup, _extends({}, rest, {\n      className: classes,\n      disabled: disabled,\n      size: size\n    }), prefixElement && React.createElement(InputGroupAddon, null, prefixElement), React.createElement(Input, _extends({}, htmlInputProps, {\n      type: \"text\",\n      autoComplete: \"off\",\n      step: step,\n      inputRef: this.bindInputRef,\n      onChange: this.handleChange,\n      onBlur: createChainedFunction(this.handleBlur, _get(htmlInputProps, 'onBlur')),\n      value: _isNil(value) ? '' : \"\" + value,\n      disabled: disabled\n    })), React.createElement(\"span\", {\n      className: addPrefix('btn-group-vertical')\n    }, React.createElement(Button, {\n      appearance: buttonAppearance,\n      className: addPrefix('touchspin-up'),\n      onClick: this.handlePlus,\n      disabled: disabledUpButton || disabled\n    }, React.createElement(Icon, {\n      icon: \"arrow-up-line\"\n    })), React.createElement(Button, {\n      appearance: buttonAppearance,\n      className: addPrefix('touchspin-down'),\n      onClick: this.handleMinus,\n      disabled: disabledDownButton || disabled\n    }, React.createElement(Icon, {\n      icon: \"arrow-down-line\"\n    }))), postfix && React.createElement(InputGroupAddon, null, postfix));\n  };\n\n  return InputNumber;\n}(React.Component);\n\nInputNumber.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  prefix: PropTypes.node,\n  postfix: PropTypes.node,\n  disabled: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),\n  buttonAppearance: PropTypes.oneOf(['default', 'primary', 'link', 'subtle', 'ghost']),\n  onWheel: PropTypes.func,\n  onChange: PropTypes.func\n};\nInputNumber.defaultProps = {\n  min: -Infinity,\n  max: Infinity,\n  step: 1,\n  buttonAppearance: 'subtle',\n  scrollable: true\n};\npolyfill(InputNumber);\nexport default defaultProps({\n  classPrefix: 'input-number'\n})(InputNumber);","map":null,"metadata":{},"sourceType":"module"}