{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _omit from \"lodash/omit\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { addStyle, getWidth } from 'dom-lib';\nimport { defaultProps } from '../utils';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport getDOMNode from '../utils/getDOMNode';\nimport mergeRefs from '../utils/mergeRefs';\nvar omitProps = ['placement', 'shouldUpdatePosition', 'arrowOffsetLeft', 'arrowOffsetTop', 'positionLeft', 'positionTop', 'getPositionInstance', 'getToggleInstance', 'autoWidth'];\nvar resizePlacement = ['topStart', 'topEnd', 'leftEnd', 'rightEnd', 'auto', 'autoVerticalStart', 'autoVerticalEnd', 'autoHorizontalEnd'];\n\nvar MenuWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(MenuWrapper, _React$Component);\n\n  function MenuWrapper(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.menuElementRef = void 0;\n\n    _this.handleResize = function () {\n      var getPositionInstance = _this.props.getPositionInstance;\n      var instance = getPositionInstance ? getPositionInstance() : null;\n\n      if (instance) {\n        instance.updatePosition(true);\n      }\n    };\n\n    _this.menuElementRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = MenuWrapper.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var autoWidth = this.props.autoWidth;\n\n    if (resizePlacement.includes(this.props.placement)) {\n      bindElementResize(this.menuElementRef.current, this.handleResize);\n    }\n\n    if (autoWidth) {\n      this.updateMenuStyle();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.menuElementRef.current) {\n      unbindElementResize(this.menuElementRef.current);\n    }\n  };\n\n  _proto.updateMenuStyle = function updateMenuStyle() {\n    var getToggleInstance = this.props.getToggleInstance;\n\n    if (this.menuElementRef.current && getToggleInstance) {\n      var _instance$toggleRef;\n\n      var instance = getToggleInstance();\n\n      if (instance === null || instance === void 0 ? void 0 : (_instance$toggleRef = instance.toggleRef) === null || _instance$toggleRef === void 0 ? void 0 : _instance$toggleRef.current) {\n        var width = getWidth(getDOMNode(instance.toggleRef.current));\n        addStyle(this.menuElementRef.current, 'min-width', width + \"px\");\n      }\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        classPrefix = _this$props.classPrefix,\n        htmlElementRef = _this$props.htmlElementRef,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"classPrefix\", \"htmlElementRef\"]);\n\n    return React.createElement(\"div\", _extends({}, _omit(rest, omitProps), {\n      ref: mergeRefs(this.menuElementRef, htmlElementRef),\n      className: classNames(classPrefix, className)\n    }));\n  };\n\n  return MenuWrapper;\n}(React.Component);\n\nvar enhance = defaultProps({\n  classPrefix: 'picker-menu'\n});\nexport default enhance(MenuWrapper);","map":null,"metadata":{},"sourceType":"module"}