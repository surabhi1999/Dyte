{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _pick from \"lodash/pick\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { setStatic } from 'recompose';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport BaseModal from './BaseModal';\nimport Bounce from '../Animation/Bounce';\nimport { on, getHeight } from 'dom-lib';\nimport { prefix, defaultProps, createChainedFunction } from '../utils';\nimport ModalDialog, { modalDialogPropTypes } from './ModalDialog';\nimport ModalBody from './ModalBody';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport ModalFooter from './ModalFooter';\nimport { SIZE } from '../constants';\nimport ModalContext from './ModalContext';\nimport mergeRefs from '../utils/mergeRefs';\nvar BACKDROP_TRANSITION_DURATION = 150;\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Modal, _React$Component); // for test\n\n\n  function Modal(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.dialogElement = void 0;\n    _this.modalRef = void 0;\n    _this.windowResizeListener = null;\n    _this.contentElement = null;\n\n    _this.getBodyStyles = function () {\n      return _this.state.bodyStyles;\n    };\n\n    _this.bindDialogRef = function (ref) {\n      _this.dialogElement = ref;\n    };\n\n    _this.handleShow = function () {\n      var dialogElement = _this.dialogElement;\n\n      _this.updateModalStyles(dialogElement);\n\n      _this.contentElement = dialogElement.querySelector(\".\" + _this.addPrefix('content'));\n      _this.windowResizeListener = on(window, 'resize', _this.handleResize);\n      bindElementResize(_this.contentElement, _this.handleResize);\n    };\n\n    _this.handleShowing = function () {\n      _this.updateModalStyles(_this.dialogElement, true);\n    };\n\n    _this.handleHide = function () {\n      _this.destroyEvent();\n    };\n\n    _this.handleDialogClick = function (event) {\n      var _this$props, _this$props$onHide;\n\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : (_this$props$onHide = _this$props.onHide) === null || _this$props$onHide === void 0 ? void 0 : _this$props$onHide.call(_this$props, event);\n    };\n\n    _this.handleResize = function () {\n      _this.updateModalStyles(_this.dialogElement);\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      bodyStyles: {}\n    };\n    _this.modalRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.destroyEvent();\n  };\n\n  _proto.getBodyStylesByDialog = function getBodyStylesByDialog(dialogElement, entering) {\n    var _this$props2 = this.props,\n        overflow = _this$props2.overflow,\n        drawer = _this$props2.drawer;\n    var node = dialogElement || this.dialogElement;\n    var scrollHeight = node ? node.scrollHeight : 0;\n\n    if (!overflow) {\n      return {};\n    }\n\n    var bodyStyles = {\n      overflow: 'auto'\n    };\n\n    if (node) {\n      // default margin\n      var headerHeight = 46;\n      var footerHeight = 46;\n      var contentHeight = 30;\n      var headerDOM = node.querySelector(\".\" + this.addPrefix('header'));\n      var footerDOM = node.querySelector(\".\" + this.addPrefix('footer'));\n      var contentDOM = node.querySelector(\".\" + this.addPrefix('content'));\n      headerHeight = headerDOM ? getHeight(headerDOM) + headerHeight : headerHeight;\n      footerHeight = footerDOM ? getHeight(footerDOM) + headerHeight : headerHeight;\n      contentHeight = contentDOM ? getHeight(contentDOM) + contentHeight : contentHeight;\n\n      if (drawer) {\n        bodyStyles.height = contentHeight - (headerHeight + footerHeight);\n      } else {\n        /**\n         * Header height + Footer height + Dialog margin\n         */\n        var excludeHeight = headerHeight + footerHeight + (entering ? 76 : 60);\n        var bodyHeight = getHeight(window) - excludeHeight;\n        var maxHeight = scrollHeight >= bodyHeight ? bodyHeight : scrollHeight;\n        bodyStyles.maxHeight = maxHeight;\n      }\n    }\n\n    return bodyStyles;\n  };\n\n  _proto.destroyEvent = function destroyEvent() {\n    var _this$windowResizeLis, _this$windowResizeLis2;\n\n    (_this$windowResizeLis = this.windowResizeListener) === null || _this$windowResizeLis === void 0 ? void 0 : (_this$windowResizeLis2 = _this$windowResizeLis.off) === null || _this$windowResizeLis2 === void 0 ? void 0 : _this$windowResizeLis2.call(_this$windowResizeLis);\n\n    if (this.contentElement) {\n      unbindElementResize(this.contentElement);\n    }\n  };\n\n  _proto.updateModalStyles = function updateModalStyles(dialogElement, entering) {\n    this.setState({\n      bodyStyles: this.getBodyStylesByDialog(dialogElement, entering)\n    });\n  };\n\n  _proto.render = function render() {\n    var _classNames,\n        _classNames2,\n        _this2 = this;\n\n    var _this$props3 = this.props,\n        className = _this$props3.className,\n        children = _this$props3.children,\n        dialogClassName = _this$props3.dialogClassName,\n        backdropClassName = _this$props3.backdropClassName,\n        dialogStyle = _this$props3.dialogStyle,\n        animation = _this$props3.animation,\n        classPrefix = _this$props3.classPrefix,\n        show = _this$props3.show,\n        size = _this$props3.size,\n        full = _this$props3.full,\n        dialogComponentClass = _this$props3.dialogComponentClass,\n        animationProps = _this$props3.animationProps,\n        animationTimeout = _this$props3.animationTimeout,\n        onHide = _this$props3.onHide,\n        rest = _objectWithoutPropertiesLoose(_this$props3, [\"className\", \"children\", \"dialogClassName\", \"backdropClassName\", \"dialogStyle\", \"animation\", \"classPrefix\", \"show\", \"size\", \"full\", \"dialogComponentClass\", \"animationProps\", \"animationTimeout\", \"onHide\"]);\n\n    var inClass = {\n      in: show && !animation\n    };\n    var Dialog = dialogComponentClass;\n    var classes = classNames(this.addPrefix(size), className, (_classNames = {}, _classNames[this.addPrefix('full')] = full, _classNames));\n    return React.createElement(ModalContext.Provider, {\n      value: {\n        onModalHide: onHide,\n        getBodyStyles: this.getBodyStyles\n      }\n    }, React.createElement(BaseModal, _extends({}, rest, {\n      ref: this.modalRef,\n      show: show,\n      onHide: onHide,\n      className: this.addPrefix('wrapper'),\n      onEntered: createChainedFunction(this.handleShow, this.props.onEntered),\n      onEntering: createChainedFunction(this.handleShowing, this.props.onEntering),\n      onExited: createChainedFunction(this.handleHide, this.props.onExited),\n      backdropClassName: classNames(this.addPrefix('backdrop'), backdropClassName, inClass),\n      containerClassName: classNames(this.addPrefix('open'), (_classNames2 = {}, _classNames2[this.addPrefix('has-backdrop')] = rest.backdrop, _classNames2)),\n      transition: animation ? animation : undefined,\n      animationProps: animationProps,\n      dialogTransitionTimeout: animationTimeout,\n      backdropTransitionTimeout: BACKDROP_TRANSITION_DURATION\n    }), function (transitionProps, ref) {\n      var transitionClassName = transitionProps.className,\n          transitionRest = _objectWithoutPropertiesLoose(transitionProps, [\"className\"]);\n\n      return React.createElement(Dialog, _extends({}, transitionRest, _pick(rest, Object.keys(modalDialogPropTypes)), {\n        classPrefix: classPrefix,\n        className: classNames(classes, transitionClassName),\n        dialogClassName: dialogClassName,\n        dialogStyle: dialogStyle,\n        onClick: rest.backdrop === true ? _this2.handleDialogClick : null,\n        dialogRef: mergeRefs(_this2.bindDialogRef, ref)\n      }), children);\n    }));\n  };\n\n  return Modal;\n}(React.Component);\n\nModal.propTypes = {\n  classPrefix: PropTypes.string,\n  size: PropTypes.oneOf(SIZE),\n  container: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  onRendered: PropTypes.func,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  dialogClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  style: PropTypes.object,\n  dialogStyle: PropTypes.object,\n  backdropStyle: PropTypes.object,\n  show: PropTypes.bool,\n  full: PropTypes.bool,\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  keyboard: PropTypes.bool,\n  transition: PropTypes.elementType,\n  dialogTransitionTimeout: PropTypes.number,\n  backdropTransitionTimeout: PropTypes.number,\n  autoFocus: PropTypes.bool,\n  enforceFocus: PropTypes.bool,\n  overflow: PropTypes.bool,\n  drawer: PropTypes.bool,\n  dialogComponentClass: PropTypes.elementType,\n  animation: PropTypes.any,\n  animationProps: PropTypes.object,\n  animationTimeout: PropTypes.number,\n  onEscapeKeyUp: PropTypes.func,\n  onBackdropClick: PropTypes.func,\n  onShow: PropTypes.func,\n  onHide: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n};\nModal.defaultProps = {\n  size: 'sm',\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  animation: Bounce,\n  animationTimeout: 300,\n  dialogComponentClass: ModalDialog,\n  overflow: true\n};\nvar EnhancedModal = defaultProps({\n  classPrefix: 'modal'\n})(Modal);\nsetStatic('Body', ModalBody)(EnhancedModal);\nsetStatic('Header', ModalHeader)(EnhancedModal);\nsetStatic('Title', ModalTitle)(EnhancedModal);\nsetStatic('Footer', ModalFooter)(EnhancedModal);\nsetStatic('Dialog', ModalDialog)(EnhancedModal);\nexport default EnhancedModal;","map":null,"metadata":{},"sourceType":"module"}