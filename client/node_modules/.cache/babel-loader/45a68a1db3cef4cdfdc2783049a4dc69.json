{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DOMMouseMoveTracker, addStyle, getOffset } from 'dom-lib';\nimport { SCROLLBAR_MIN_WIDTH } from './constants';\nimport { defaultClassPrefix, getUnhandledProps, prefix } from './utils';\nimport TableContext from './TableContext';\nvar propTypes = {\n  tableId: PropTypes.string,\n  vertical: PropTypes.bool,\n  length: PropTypes.number,\n  scrollLength: PropTypes.number,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  onScroll: PropTypes.func,\n  onMouseDown: PropTypes.func\n};\n\nvar Scrollbar =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(Scrollbar, _React$PureComponent);\n\n  function Scrollbar(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    _this.scrollOffset = 0;\n    _this.mouseMoveTracker = null;\n    _this.handleRef = void 0;\n    _this.barRef = void 0;\n\n    _this.handleMouseDown = function (event) {\n      var _this$mouseMoveTracke, _this$props$onMouseDo, _this$props;\n\n      _this.mouseMoveTracker = _this.getMouseMoveTracker();\n      (_this$mouseMoveTracke = _this.mouseMoveTracker) === null || _this$mouseMoveTracke === void 0 ? void 0 : _this$mouseMoveTracke.captureMouseMoves(event);\n\n      _this.setState({\n        handlePressed: true\n      });\n\n      (_this$props$onMouseDo = (_this$props = _this.props).onMouseDown) === null || _this$props$onMouseDo === void 0 ? void 0 : _this$props$onMouseDo.call(_this$props, event);\n    };\n\n    _this.handleDragEnd = function () {\n      _this.releaseMouseMoves();\n\n      _this.setState({\n        handlePressed: false\n      });\n    };\n\n    _this.handleDragMove = function (deltaX, deltaY, event) {\n      var _window, _window$event;\n\n      var vertical = _this.props.vertical;\n\n      if (!_this.mouseMoveTracker || !_this.mouseMoveTracker.isDragging()) {\n        return;\n      }\n\n      if ((event === null || event === void 0 ? void 0 : event.buttons) === 0 || ((_window = window) === null || _window === void 0 ? void 0 : (_window$event = _window.event) === null || _window$event === void 0 ? void 0 : _window$event['buttons']) === 0) {\n        _this.releaseMouseMoves();\n\n        return;\n      }\n\n      _this.handleScroll(vertical ? deltaY : deltaX, event);\n    };\n\n    _this.handleClick = function (event) {\n      var _this$handleRef$curre;\n\n      if (_this.handleRef.current && (_this$handleRef$curre = _this.handleRef.current) !== null && _this$handleRef$curre !== void 0 && _this$handleRef$curre.contains(event.target)) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          vertical = _this$props2.vertical,\n          length = _this$props2.length,\n          scrollLength = _this$props2.scrollLength;\n      var barOffset = _this.state.barOffset;\n      var offset = vertical ? event.pageY - barOffset.top : event.pageX - barOffset.left;\n      var handleWidth = length / scrollLength * length;\n      var delta = offset - handleWidth;\n      var nextDelta = offset > _this.scrollOffset ? delta - _this.scrollOffset : offset - _this.scrollOffset;\n\n      _this.handleScroll(nextDelta, event);\n    };\n\n    _this.state = {\n      barOffset: {\n        top: 0,\n        left: 0\n      },\n      handlePressed: false\n    };\n    _this.handleRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.barRef =\n    /*#__PURE__*/\n    React.createRef();\n    return _this;\n  }\n\n  var _proto = Scrollbar.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.initBarOffset();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.releaseMouseMoves();\n  };\n\n  _proto.onWheelScroll = function onWheelScroll(delta) {\n    var _this$props3 = this.props,\n        length = _this$props3.length,\n        scrollLength = _this$props3.scrollLength;\n    var nextDelta = delta / (scrollLength / length);\n    this.updateScrollBarPosition(nextDelta);\n  };\n\n  _proto.getMouseMoveTracker = function getMouseMoveTracker() {\n    return this.mouseMoveTracker || new DOMMouseMoveTracker(this.handleDragMove, this.handleDragEnd, document.body);\n  };\n\n  _proto.initBarOffset = function initBarOffset() {\n    var _this2 = this;\n\n    setTimeout(function () {\n      _this2.barRef.current && _this2.setState({\n        barOffset: getOffset(_this2.barRef.current)\n      });\n    }, 1);\n  };\n\n  _proto.handleScroll = function handleScroll(delta, event) {\n    var _this$props$onScroll, _this$props5;\n\n    var _this$props4 = this.props,\n        length = _this$props4.length,\n        scrollLength = _this$props4.scrollLength;\n    var scrollDelta = delta * (scrollLength / length);\n    this.updateScrollBarPosition(delta);\n    (_this$props$onScroll = (_this$props5 = this.props).onScroll) === null || _this$props$onScroll === void 0 ? void 0 : _this$props$onScroll.call(_this$props5, scrollDelta, event);\n  };\n\n  _proto.resetScrollBarPosition = function resetScrollBarPosition(forceDelta) {\n    if (forceDelta === void 0) {\n      forceDelta = 0;\n    }\n\n    this.scrollOffset = 0;\n    this.updateScrollBarPosition(0, forceDelta);\n  };\n\n  _proto.updateScrollBarPosition = function updateScrollBarPosition(delta, forceDelta) {\n    var _this$props6 = this.props,\n        vertical = _this$props6.vertical,\n        length = _this$props6.length,\n        scrollLength = _this$props6.scrollLength;\n    var translateDOMPositionXY = this.context.translateDOMPositionXY;\n    var max = scrollLength && length ? length - Math.max(length / scrollLength * length, SCROLLBAR_MIN_WIDTH + 2) : 0;\n    var styles = {};\n\n    if (typeof forceDelta === 'undefined') {\n      this.scrollOffset += delta;\n      this.scrollOffset = Math.max(this.scrollOffset, 0);\n      this.scrollOffset = Math.min(this.scrollOffset, max);\n    } else {\n      this.scrollOffset = forceDelta || 0;\n    }\n\n    if (vertical) {\n      translateDOMPositionXY === null || translateDOMPositionXY === void 0 ? void 0 : translateDOMPositionXY(styles, 0, this.scrollOffset);\n    } else {\n      translateDOMPositionXY === null || translateDOMPositionXY === void 0 ? void 0 : translateDOMPositionXY(styles, this.scrollOffset, 0);\n    }\n\n    addStyle(this.handleRef.current, styles);\n  };\n\n  _proto.releaseMouseMoves = function releaseMouseMoves() {\n    var _this$mouseMoveTracke2, _this$mouseMoveTracke3;\n\n    (_this$mouseMoveTracke2 = this.mouseMoveTracker) === null || _this$mouseMoveTracke2 === void 0 ? void 0 : (_this$mouseMoveTracke3 = _this$mouseMoveTracke2.releaseMouseMoves) === null || _this$mouseMoveTracke3 === void 0 ? void 0 : _this$mouseMoveTracke3.call(_this$mouseMoveTracke2);\n    this.mouseMoveTracker = null;\n  };\n\n  _proto.render = function render() {\n    var _classNames, _styles;\n\n    var _this$props7 = this.props,\n        vertical = _this$props7.vertical,\n        length = _this$props7.length,\n        scrollLength = _this$props7.scrollLength,\n        classPrefix = _this$props7.classPrefix,\n        className = _this$props7.className,\n        tableId = _this$props7.tableId,\n        rest = _objectWithoutPropertiesLoose(_this$props7, [\"vertical\", \"length\", \"scrollLength\", \"classPrefix\", \"className\", \"tableId\"]);\n\n    var handlePressed = this.state.handlePressed;\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('vertical')] = vertical, _classNames[addPrefix('horizontal')] = !vertical, _classNames[addPrefix('hide')] = scrollLength <= length, _classNames[addPrefix('pressed')] = handlePressed, _classNames));\n    var width = length / scrollLength * 100;\n    var styles = (_styles = {}, _styles[vertical ? 'height' : 'width'] = width + \"%\", _styles[vertical ? 'minHeight' : 'minWidth'] = SCROLLBAR_MIN_WIDTH, _styles);\n    var unhandled = getUnhandledProps(propTypes, rest);\n    var valuenow = this.scrollOffset / length * 100 + width;\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", _extends({\n        role: \"scrollbar\",\n        \"aria-controls\": tableId,\n        \"aria-valuemax\": \"100\",\n        \"aria-valuemin\": \"0\",\n        \"aria-valuenow\": valuenow,\n        \"aria-orientation\": vertical ? 'vertical' : 'horizontal'\n      }, unhandled, {\n        ref: this.barRef,\n        className: classes,\n        onClick: this.handleClick\n      }),\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        ref: this.handleRef,\n        className: addPrefix('handle'),\n        style: styles,\n        onMouseDown: this.handleMouseDown,\n        role: \"button\",\n        tabIndex: -1\n      }))\n    );\n  };\n\n  return Scrollbar;\n}(React.PureComponent);\n\nScrollbar.contextType = TableContext;\nScrollbar.propTypes = propTypes;\nScrollbar.defaultProps = {\n  classPrefix: defaultClassPrefix('table-scrollbar'),\n  scrollLength: 1,\n  length: 1\n};\nexport default Scrollbar;","map":null,"metadata":{},"sourceType":"module"}