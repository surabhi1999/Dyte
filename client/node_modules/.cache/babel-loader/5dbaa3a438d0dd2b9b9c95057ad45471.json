{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isNil from \"lodash/isNil\";\nimport _omit from \"lodash/omit\";\nimport _pick from \"lodash/pick\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from '../utils/shallowEqual';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { findNodeOfTree } from '../utils/treeUtils';\nimport IntlContext from '../IntlProvider/IntlContext';\nimport FormattedMessage from '../IntlProvider/FormattedMessage';\nimport DropdownMenu, { dropdownMenuPropTypes } from './DropdownMenu';\nimport _stringToObject from '../utils/stringToObject';\nimport getSafeRegExpString from '../utils/getSafeRegExpString';\nimport { flattenTree, getNodeParents } from '../utils/treeUtils';\nimport { getDerivedStateForCascade } from './utils';\nimport { defaultProps, prefix, getUnhandledProps, createChainedFunction, mergeRefs } from '../utils';\nimport { PickerToggle, MenuWrapper, SearchBar, PickerToggleTrigger, getToggleWrapperClassName, createConcatChildrenFunction } from '../Picker';\nimport { listPickerPropTypes, listPickerDefaultProps } from '../Picker/propTypes';\n\nvar Cascader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Cascader, _React$Component);\n\n  function Cascader(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.triggerRef = void 0;\n    _this.containerRef = void 0;\n    _this.positionRef = void 0;\n    _this.menuContainerRef = void 0;\n    _this.isControlled = void 0;\n\n    _this.handleSelect = function (node, cascadeItems, activePaths, isLeafNode, event) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          onSelect = _this$props.onSelect,\n          valueKey = _this$props.valueKey,\n          childrenKey = _this$props.childrenKey,\n          parentSelectable = _this$props.parentSelectable;\n\n      var prevValue = _this.getValue();\n\n      var value = node[valueKey];\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, activePaths, createConcatChildrenFunction(node, value, {\n        valueKey: valueKey,\n        childrenKey: childrenKey\n      }), event);\n      /**\n       Determines whether the option is a leaf node, and if so, closes the picker.\n       */\n\n      if (isLeafNode) {\n        _this.handleCloseDropdown();\n\n        var _nextState = {\n          selectNode: node\n        };\n\n        if (!_this.isControlled) {\n          _nextState = _extends({}, _nextState, {\n            value: value\n          }, getDerivedStateForCascade(_this.props, _this.state, value));\n        }\n\n        _this.setState(_nextState);\n\n        if (!shallowEqual(value, prevValue)) {\n          onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n        }\n\n        return;\n      }\n\n      var nextState = {\n        selectNode: node,\n        items: cascadeItems,\n        tempActivePaths: activePaths\n      };\n      /** When the parent is optional, the value and the displayed path are updated. */\n\n      if (parentSelectable) {\n        nextState.value = value;\n        nextState.activePaths = activePaths;\n\n        if (!shallowEqual(value, prevValue)) {\n          onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n        }\n      }\n\n      _this.setState(nextState, function () {\n        var _this$positionRef$cur, _this$positionRef$cur2; // Update menu position\n\n\n        (_this$positionRef$cur = _this.positionRef.current) === null || _this$positionRef$cur === void 0 ? void 0 : (_this$positionRef$cur2 = _this$positionRef$cur.updatePosition) === null || _this$positionRef$cur2 === void 0 ? void 0 : _this$positionRef$cur2.call(_this$positionRef$cur);\n      });\n    };\n\n    _this.handleSearchRowSelect = function (item, event) {\n      var _this$props2 = _this.props,\n          valueKey = _this$props2.valueKey,\n          onChange = _this$props2.onChange,\n          onSelect = _this$props2.onSelect;\n      var value = item[valueKey];\n\n      _this.handleCloseDropdown();\n\n      var nextState = {\n        selectNode: item,\n        searchKeyword: ''\n      };\n\n      if (!_this.isControlled) {\n        nextState = _extends({}, nextState, {}, getDerivedStateForCascade(_this.props, _this.state, value), {\n          value: value\n        });\n      }\n\n      _this.setState(nextState);\n\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(item, null, null, event);\n      onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n    };\n\n    _this.handleCloseDropdown = function () {\n      var _this$triggerRef$curr, _this$triggerRef$curr2;\n\n      (_this$triggerRef$curr = _this.triggerRef.current) === null || _this$triggerRef$curr === void 0 ? void 0 : (_this$triggerRef$curr2 = _this$triggerRef$curr.hide) === null || _this$triggerRef$curr2 === void 0 ? void 0 : _this$triggerRef$curr2.call(_this$triggerRef$curr);\n    };\n\n    _this.handleOpenDropdown = function () {\n      var _this$triggerRef$curr3, _this$triggerRef$curr4;\n\n      (_this$triggerRef$curr3 = _this.triggerRef.current) === null || _this$triggerRef$curr3 === void 0 ? void 0 : (_this$triggerRef$curr4 = _this$triggerRef$curr3.show) === null || _this$triggerRef$curr4 === void 0 ? void 0 : _this$triggerRef$curr4.call(_this$triggerRef$curr3);\n    };\n\n    _this.open = function () {\n      var _this$handleOpenDropd, _this2;\n\n      (_this$handleOpenDropd = (_this2 = _this).handleOpenDropdown) === null || _this$handleOpenDropd === void 0 ? void 0 : _this$handleOpenDropd.call(_this2);\n    };\n\n    _this.close = function () {\n      var _this$handleCloseDrop, _this3;\n\n      (_this$handleCloseDrop = (_this3 = _this).handleCloseDropdown) === null || _this$handleCloseDrop === void 0 ? void 0 : _this$handleCloseDrop.call(_this3);\n    };\n\n    _this.handleClean = function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          onChange = _this$props3.onChange,\n          data = _this$props3.data;\n\n      if (disabled) {\n        return;\n      }\n\n      var nextState = {\n        items: [data],\n        value: null,\n        selectNode: null,\n        activePaths: [],\n        tempActivePaths: []\n      };\n\n      _this.setState(nextState, function () {\n        onChange === null || onChange === void 0 ? void 0 : onChange(null, event);\n      });\n    };\n\n    _this.handleSearch = function (searchKeyword, event) {\n      var _this$props$onSearch, _this$props4;\n\n      _this.setState({\n        searchKeyword: searchKeyword\n      });\n\n      (_this$props$onSearch = (_this$props4 = _this.props).onSearch) === null || _this$props$onSearch === void 0 ? void 0 : _this$props$onSearch.call(_this$props4, searchKeyword, event);\n    };\n\n    _this.handleEntered = function () {\n      var _this$props$onOpen, _this$props5;\n\n      (_this$props$onOpen = (_this$props5 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props5);\n\n      _this.setState({\n        active: true\n      });\n    };\n\n    _this.handleExit = function () {\n      var _this$props$onClose, _this$props6;\n\n      (_this$props$onClose = (_this$props6 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props6);\n\n      _this.setState({\n        searchKeyword: '',\n        active: false\n      });\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.renderSearchRow = function (item, key) {\n      var _classNames;\n\n      var _this$props7 = _this.props,\n          labelKey = _this$props7.labelKey,\n          valueKey = _this$props7.valueKey,\n          _this$props7$disabled = _this$props7.disabledItemValues,\n          disabledItemValues = _this$props7$disabled === void 0 ? [] : _this$props7$disabled;\n      var searchKeyword = _this.state.searchKeyword;\n      var regx = new RegExp(getSafeRegExpString(searchKeyword), 'ig');\n      var nodes = getNodeParents(item);\n      nodes.push(item);\n      nodes = nodes.map(function (node) {\n        var _extends2;\n\n        var labelElements = [];\n        var a = node[labelKey].split(regx);\n        var b = node[labelKey].match(regx);\n\n        for (var i = 0; i < a.length; i++) {\n          labelElements.push(a[i]);\n\n          if (b && b[i]) {\n            labelElements.push(React.createElement(\"strong\", {\n              key: i\n            }, b[i]));\n          }\n        }\n\n        return _extends({}, node, (_extends2 = {}, _extends2[labelKey] = labelElements, _extends2));\n      });\n      var disabled = disabledItemValues.some(function (value) {\n        return nodes.some(function (node) {\n          return node[valueKey] === value;\n        });\n      });\n      var itemClasses = classNames(_this.addPrefix('cascader-row'), (_classNames = {}, _classNames[_this.addPrefix('cascader-row-disabled')] = disabled, _classNames));\n      return React.createElement(\"div\", {\n        key: key,\n        className: itemClasses,\n        onClick: function onClick(event) {\n          if (!disabled) {\n            _this.handleSearchRowSelect(item, event);\n          }\n        }\n      }, nodes.map(function (node, index) {\n        return React.createElement(\"span\", {\n          key: \"col-\" + index,\n          className: _this.addPrefix('cascader-col')\n        }, node[labelKey]);\n      }));\n    };\n\n    var initState = {\n      searchKeyword: '',\n      selectNode: null,\n      data: props.data,\n      value: props.defaultValue,\n\n      /**\n       * 选中值的路径\n       */\n      activePaths: [],\n\n      /**\n       * 用于展示面板的数据列表，是一个二维的数组\n       * 是通过 data 树结构转换成的二维的数组，其中只包含页面上展示的数据\n       */\n      items: []\n    };\n    _this.state = _extends({}, initState, {}, getDerivedStateForCascade(props, initState), {\n      flattenData: flattenTree(props.data)\n    });\n    _this.isControlled = !_isUndefined(props.value);\n    _this.triggerRef = React.createRef();\n    _this.containerRef = React.createRef();\n    _this.positionRef = React.createRef(); // for test\n\n    _this.menuContainerRef = React.createRef();\n    return _this;\n  }\n\n  Cascader.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value,\n        data = nextProps.data,\n        labelKey = nextProps.labelKey,\n        valueKey = nextProps.valueKey;\n\n    if (data !== prevState.data) {\n      var _prevState$selectNode; // First get the value of the clicked node `selectNodeValue`, and then get the new `newChildren`.\n\n\n      var selectNodeValue = prevState === null || prevState === void 0 ? void 0 : (_prevState$selectNode = prevState.selectNode) === null || _prevState$selectNode === void 0 ? void 0 : _prevState$selectNode[valueKey];\n\n      if (selectNodeValue) {\n        var _findNodeOfTree;\n\n        var newChildren = ((_findNodeOfTree = findNodeOfTree(data, function (item) {\n          return shallowEqual(item[valueKey], selectNodeValue);\n        })) === null || _findNodeOfTree === void 0 ? void 0 : _findNodeOfTree.children) || [];\n        return _extends({}, getDerivedStateForCascade(nextProps, prevState, selectNodeValue, newChildren.map(function (item) {\n          return _stringToObject(item, labelKey, valueKey);\n        })), {\n          data: data,\n          flattenData: flattenTree(data)\n        });\n      }\n\n      return _extends({}, getDerivedStateForCascade(nextProps, prevState), {\n        flattenData: flattenTree(data),\n        data: data\n      });\n    }\n\n    if (typeof value !== 'undefined' && !shallowEqual(value, prevState.value)) {\n      return _extends({}, getDerivedStateForCascade(nextProps, prevState), {\n        value: value\n      });\n    }\n\n    return null;\n  };\n\n  var _proto = Cascader.prototype;\n\n  _proto.getValue = function getValue(nextProps) {\n    var _ref = nextProps || this.props,\n        value = _ref.value;\n\n    return _isUndefined(value) ? this.state.value : value;\n  };\n  /**\n   * 在 data 对象中的数据类型是字符串比如: ['foo']\n   * 通过这个行数可以把值转换成 [{name:'foo':value:'foo'}]\n   */\n\n\n  _proto.stringToObject = function stringToObject(value) {\n    var _this$props8 = this.props,\n        labelKey = _this$props8.labelKey,\n        valueKey = _this$props8.valueKey;\n    return _stringToObject(value, labelKey, valueKey);\n  };\n\n  _proto.someKeyword = function someKeyword(item) {\n    var labelKey = this.props.labelKey;\n    var searchKeyword = this.state.searchKeyword;\n\n    if (item[labelKey].match(new RegExp(getSafeRegExpString(searchKeyword), 'i'))) {\n      return true;\n    }\n\n    if (item.parent && this.someKeyword(item.parent)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.getSearchResult = function getSearchResult() {\n    var _this4 = this;\n\n    var childrenKey = this.props.childrenKey;\n    var flattenData = this.state.flattenData;\n    var items = [];\n    var result = flattenData.filter(function (item) {\n      if (item[childrenKey]) {\n        return false;\n      }\n\n      return _this4.someKeyword(item);\n    });\n\n    for (var i = 0; i < result.length; i++) {\n      items.push(result[i]);\n\n      if (i === 99) {\n        return items;\n      }\n    }\n\n    return items;\n  };\n\n  _proto.renderSearchResultPanel = function renderSearchResultPanel() {\n    var locale = this.props.locale;\n    var searchKeyword = this.state.searchKeyword;\n\n    if (searchKeyword === '') {\n      return null;\n    }\n\n    var items = this.getSearchResult();\n    return React.createElement(\"div\", {\n      className: this.addPrefix('cascader-search-panel')\n    }, items.length ? items.map(this.renderSearchRow) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText));\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _classNames2;\n\n    var _this$state = this.state,\n        items = _this$state.items,\n        tempActivePaths = _this$state.tempActivePaths,\n        activePaths = _this$state.activePaths,\n        searchKeyword = _this$state.searchKeyword;\n    var _this$props9 = this.props,\n        renderMenu = _this$props9.renderMenu,\n        renderExtraFooter = _this$props9.renderExtraFooter,\n        menuClassName = _this$props9.menuClassName,\n        menuStyle = _this$props9.menuStyle,\n        searchable = _this$props9.searchable,\n        locale = _this$props9.locale,\n        inline = _this$props9.inline;\n    var classes = classNames(this.addPrefix('cascader-menu'), menuClassName, (_classNames2 = {}, _classNames2[this.addPrefix('inline')] = inline, _classNames2));\n\n    var menuProps = _pick(this.props, Object.keys(_omit(dropdownMenuPropTypes, ['classPrefix'])));\n\n    return React.createElement(MenuWrapper, {\n      className: classes,\n      style: menuStyle\n    }, searchable && React.createElement(SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: searchKeyword\n    }), this.renderSearchResultPanel(), searchKeyword === '' && React.createElement(DropdownMenu, _extends({}, menuProps, {\n      classPrefix: this.addPrefix('cascader-menu'),\n      ref: this.menuContainerRef,\n      cascadeItems: items,\n      cascadePathItems: tempActivePaths || activePaths,\n      activeItemValue: this.getValue(),\n      onSelect: this.handleSelect,\n      renderMenu: renderMenu\n    })), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props10 = this.props,\n        valueKey = _this$props10.valueKey,\n        labelKey = _this$props10.labelKey,\n        placeholder = _this$props10.placeholder,\n        renderValue = _this$props10.renderValue,\n        disabled = _this$props10.disabled,\n        cleanable = _this$props10.cleanable,\n        locale = _this$props10.locale,\n        toggleComponentClass = _this$props10.toggleComponentClass,\n        style = _this$props10.style,\n        onEnter = _this$props10.onEnter,\n        onExited = _this$props10.onExited,\n        onClean = _this$props10.onClean,\n        inline = _this$props10.inline,\n        positionRef = _this$props10.positionRef,\n        rest = _objectWithoutPropertiesLoose(_this$props10, [\"valueKey\", \"labelKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onExited\", \"onClean\", \"inline\", \"positionRef\"]);\n\n    if (inline) {\n      return this.renderDropdownMenu();\n    }\n\n    var _this$state2 = this.state,\n        activePaths = _this$state2.activePaths,\n        active = _this$state2.active;\n    var unhandled = getUnhandledProps(Cascader, rest);\n    var value = this.getValue();\n    /**\n     * 1.Have a value and the value is valid.\n     * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n     */\n\n    var hasValue = activePaths.length > 0 || !_isNil(value) && _isFunction(renderValue);\n\n    var activeItemLabel = placeholder;\n\n    if (activePaths.length > 0) {\n      activeItemLabel = [];\n      activePaths.forEach(function (item, index) {\n        var key = item[valueKey] || item[labelKey];\n        activeItemLabel.push(React.createElement(\"span\", {\n          key: key\n        }, item[labelKey]));\n\n        if (index < activePaths.length - 1) {\n          activeItemLabel.push(React.createElement(\"span\", {\n            className: \"separator\",\n            key: key + \"-separator\"\n          }, ' / '));\n        }\n      });\n    }\n\n    if (!_isNil(value) && _isFunction(renderValue)) {\n      activeItemLabel = renderValue(value, activePaths, activeItemLabel);\n\n      if (_isNil(activeItemLabel)) {\n        hasValue = false;\n      }\n    }\n\n    var classes = getToggleWrapperClassName('cascader', this.addPrefix, this.props, hasValue);\n    return React.createElement(IntlContext.Provider, {\n      value: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      tabIndex: -1,\n      role: \"menu\",\n      ref: this.containerRef\n    }, React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      positionRef: mergeRefs(this.positionRef, positionRef),\n      onEnter: createChainedFunction(this.handleEntered, onEnter),\n      onExited: createChainedFunction(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: createChainedFunction(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: active,\n      \"aria-disabled\": disabled\n    }), activeItemLabel || React.createElement(FormattedMessage, {\n      id: \"placeholder\"\n    })))));\n  };\n\n  return Cascader;\n}(React.Component);\n\nCascader.propTypes = _extends({}, listPickerPropTypes, {\n  renderMenu: PropTypes.func,\n  onSelect: PropTypes.func,\n  onSearch: PropTypes.func,\n  cleanable: PropTypes.bool,\n  renderMenuItem: PropTypes.func,\n  menuWidth: PropTypes.number,\n  menuHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  searchable: PropTypes.bool,\n  inline: PropTypes.bool,\n  parentSelectable: PropTypes.bool\n});\nCascader.defaultProps = _extends({}, listPickerDefaultProps, {\n  searchable: true,\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  }\n});\npolyfill(Cascader);\nexport default defaultProps({\n  classPrefix: 'picker'\n})(Cascader);","map":null,"metadata":{},"sourceType":"module"}