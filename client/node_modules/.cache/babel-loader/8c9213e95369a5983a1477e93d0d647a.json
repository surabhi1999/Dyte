{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _get from \"lodash/get\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SafeAnchor from '../SafeAnchor';\nimport { prefix, isOneOf, createChainedFunction, defaultProps, getUnhandledProps } from '../utils';\nimport { SidenavContext } from '../Sidenav/Sidenav';\n\nvar DropdownMenuItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownMenuItem, _React$Component);\n\n  function DropdownMenuItem(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this.toggle = function (_event, isOpen) {\n      var open = _isUndefined(isOpen) ? !_this.getOpen() : isOpen;\n\n      _this.setState({\n        open: open\n      });\n    };\n\n    _this.handleClick = function (event) {\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          eventKey = _this$props.eventKey,\n          disabled = _this$props.disabled,\n          onClick = _this$props.onClick;\n\n      if (disabled) {\n        event.preventDefault();\n        return;\n      }\n\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    };\n\n    _this.handleMouseOver = function (event) {\n      _this.toggle(event, true);\n    };\n\n    _this.handleMouseOut = function (event) {\n      _this.toggle(event, false);\n    };\n\n    _this.state = {\n      open: props.open\n    };\n    return _this;\n  }\n\n  var _proto = DropdownMenuItem.prototype;\n\n  _proto.getOpen = function getOpen() {\n    var open = this.props.open;\n\n    if (_isUndefined(open)) {\n      return this.state.open;\n    }\n\n    return open;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        divider = _this$props2.divider,\n        panel = _this$props2.panel,\n        active = _this$props2.active,\n        disabled = _this$props2.disabled,\n        className = _this$props2.className,\n        submenu = _this$props2.submenu,\n        style = _this$props2.style,\n        classPrefix = _this$props2.classPrefix,\n        tabIndex = _this$props2.tabIndex,\n        pullLeft = _this$props2.pullLeft,\n        icon = _this$props2.icon,\n        trigger = _this$props2.trigger,\n        expanded = _this$props2.expanded,\n        Component = _this$props2.componentClass,\n        renderItem = _this$props2.renderItem,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"divider\", \"panel\", \"active\", \"disabled\", \"className\", \"submenu\", \"style\", \"classPrefix\", \"tabIndex\", \"pullLeft\", \"icon\", \"trigger\", \"expanded\", \"componentClass\", \"renderItem\"]);\n\n    var unhandled = getUnhandledProps(DropdownMenuItem, rest);\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix(expanded ? 'expand' : 'collapse')] = submenu && _get(this.context, 'sidenav'), _classNames[addPrefix('submenu')] = submenu, _classNames[addPrefix('open')] = this.getOpen(), _classNames[addPrefix('active')] = active, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix(\"pull-\" + (pullLeft ? 'left' : 'right'))] = pullLeft, _classNames[addPrefix('with-icon')] = icon, _classNames));\n    var itemProps = {};\n    var itemToggleProps = {\n      onClick: this.handleClick\n    };\n\n    if (isOneOf('hover', trigger) && submenu && !_get(this.context, 'expanded')) {\n      itemProps.onMouseOver = this.handleMouseOver;\n      itemProps.onMouseOut = this.handleMouseOut;\n    }\n\n    if (isOneOf('click', trigger) && submenu) {\n      itemToggleProps.onClick = createChainedFunction(this.handleClick, this.toggle);\n    }\n\n    if (divider) {\n      return React.createElement(\"li\", {\n        role: \"separator\",\n        style: style,\n        className: classNames(addPrefix('divider'), className)\n      });\n    }\n\n    if (panel) {\n      return React.createElement(\"li\", {\n        style: style,\n        className: classNames(addPrefix('panel'), className)\n      }, children);\n    }\n\n    var item = React.createElement(Component, _extends({}, unhandled, itemToggleProps, {\n      className: addPrefix('content'),\n      tabIndex: tabIndex\n    }), icon && React.cloneElement(icon, {\n      className: addPrefix('menu-icon')\n    }), children);\n    return React.createElement(\"li\", _extends({}, itemProps, {\n      style: style,\n      className: classes\n    }), renderItem ? renderItem(item) : item);\n  };\n\n  return DropdownMenuItem;\n}(React.Component);\n\nDropdownMenuItem.displayName = 'DropdownMenuItem';\nDropdownMenuItem.contextType = SidenavContext;\nDropdownMenuItem.propTypes = {\n  divider: PropTypes.bool,\n  panel: PropTypes.bool,\n  trigger: PropTypes.oneOfType([PropTypes.array, PropTypes.oneOf(['click', 'hover'])]),\n  open: PropTypes.bool,\n  expanded: PropTypes.bool,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  pullLeft: PropTypes.bool,\n  submenu: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  icon: PropTypes.node,\n  eventKey: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number,\n  componentClass: PropTypes.elementType,\n  renderItem: PropTypes.func\n};\nDropdownMenuItem.defaultProps = {\n  tabIndex: -1,\n  trigger: 'hover'\n};\nexport default defaultProps({\n  classPrefix: 'dropdown-item',\n  componentClass: SafeAnchor\n})(DropdownMenuItem);","map":null,"metadata":{},"sourceType":"module"}