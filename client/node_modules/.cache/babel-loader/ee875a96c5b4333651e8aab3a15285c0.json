{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { prefix, defaultProps, getUnhandledProps, partitionHTMLProps, refType } from '../utils';\nimport { CheckboxContext } from '../CheckboxGroup/CheckboxGroup';\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Checkbox, _React$Component);\n\n  function Checkbox(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.context = {};\n\n    _this.handleChange = function (event) {\n      var _this$context$onChang, _this$context;\n\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          disabled = _this$props.disabled,\n          value = _this$props.value;\n      var checked = !_this.isChecked();\n\n      if (disabled) {\n        return;\n      }\n\n      _this.setState({\n        checked: checked\n      });\n\n      onChange === null || onChange === void 0 ? void 0 : onChange(value, checked, event);\n      (_this$context$onChang = (_this$context = _this.context).onChange) === null || _this$context$onChang === void 0 ? void 0 : _this$context$onChang.call(_this$context, value, checked, event);\n    };\n\n    _this.state = {\n      checked: props.defaultChecked\n    };\n    return _this;\n  }\n\n  var _proto = Checkbox.prototype;\n\n  _proto.getCheckedByValue = function getCheckedByValue() {\n    var _this2 = this;\n\n    var value = this.context.value;\n\n    if (!_isUndefined(value) && !_isUndefined(this.props.value)) {\n      return value.some(function (i) {\n        return i === _this2.props.value;\n      });\n    }\n\n    return this.props.checked;\n  };\n\n  _proto.isChecked = function isChecked() {\n    var checked = this.getCheckedByValue();\n    return _isUndefined(checked) ? this.state.checked : checked;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        disabled = _this$props2.disabled,\n        className = _this$props2.className,\n        children = _this$props2.children,\n        title = _this$props2.title,\n        inputRef = _this$props2.inputRef,\n        indeterminate = _this$props2.indeterminate,\n        tabIndex = _this$props2.tabIndex,\n        classPrefix = _this$props2.classPrefix,\n        onClick = _this$props2.onClick,\n        onCheckboxClick = _this$props2.onCheckboxClick,\n        checkable = _this$props2.checkable,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"disabled\", \"className\", \"children\", \"title\", \"inputRef\", \"indeterminate\", \"tabIndex\", \"classPrefix\", \"onClick\", \"onCheckboxClick\", \"checkable\"]);\n\n    var checked = this.isChecked();\n    var _this$context2 = this.context,\n        _this$context2$inline = _this$context2.inline,\n        inline = _this$context2$inline === void 0 ? this.props.inline : _this$context2$inline,\n        _this$context2$name = _this$context2.name,\n        name = _this$context2$name === void 0 ? this.props.name : _this$context2$name,\n        controlled = _this$context2.controlled;\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('inline')] = inline, _classNames[addPrefix('indeterminate')] = indeterminate, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix('checked')] = checked, _classNames));\n    var unhandled = getUnhandledProps(Checkbox, props);\n\n    var _partitionHTMLProps = partitionHTMLProps(unhandled),\n        htmlInputProps = _partitionHTMLProps[0],\n        rest = _partitionHTMLProps[1];\n\n    if (!_isUndefined(controlled)) {\n      htmlInputProps[controlled ? 'checked' : 'defaultChecked'] = checked;\n    }\n\n    var input = React.createElement(\"span\", {\n      className: addPrefix('wrapper'),\n      onClick: onCheckboxClick,\n      \"aria-disabled\": disabled\n    }, React.createElement(\"input\", _extends({}, htmlInputProps, {\n      name: name,\n      type: \"checkbox\",\n      ref: inputRef,\n      tabIndex: tabIndex,\n      onClick: function onClick(event) {\n        return event.stopPropagation();\n      },\n      disabled: disabled,\n      onChange: this.handleChange\n    })), React.createElement(\"span\", {\n      className: addPrefix('inner'),\n      \"aria-hidden\": true,\n      role: \"presentation\"\n    }));\n    return React.createElement(\"div\", _extends({}, rest, {\n      onClick: onClick,\n      className: classes\n    }), React.createElement(\"div\", {\n      className: addPrefix('checker')\n    }, React.createElement(\"label\", {\n      title: title\n    }, checkable ? input : null, children)));\n  };\n\n  return Checkbox;\n}(React.Component);\n\nCheckbox.contextType = CheckboxContext;\nCheckbox.propTypes = {\n  title: PropTypes.string,\n  className: PropTypes.string,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  inputRef: refType,\n  value: PropTypes.any,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number,\n  checkable: PropTypes.bool,\n  onCheckboxClick: PropTypes.func\n};\nCheckbox.defaultProps = {\n  checkable: true,\n  tabIndex: 0\n};\nexport default defaultProps({\n  classPrefix: 'checkbox'\n})(Checkbox);","map":null,"metadata":{},"sourceType":"module"}