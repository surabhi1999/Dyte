{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _get from \"lodash/get\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { prefix, getUnhandledProps, defaultProps, createChainedFunction } from '../utils';\nimport DefaultToggleButton from './DefaultToggleButton';\n\nvar PickerToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(PickerToggle, _React$Component);\n\n  function PickerToggle(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.toggleRef = void 0;\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.handleClean = function (event) {\n      var _this$props$onClean, _this$props;\n\n      (_this$props$onClean = (_this$props = _this.props).onClean) === null || _this$props$onClean === void 0 ? void 0 : _this$props$onClean.call(_this$props, event);\n      event.stopPropagation();\n\n      _this.handleBlur();\n    };\n\n    _this.handleFocus = function () {\n      _this.setState({\n        active: true\n      });\n    };\n\n    _this.handleBlur = function () {\n      _this.setState({\n        active: false\n      });\n    };\n\n    _this.getToggleNode = function () {\n      return _this.toggleRef.current;\n    };\n\n    _this.onFocus = function () {\n      var _this$toggleRef, _this$toggleRef$curre;\n\n      if (typeof ((_this$toggleRef = _this.toggleRef) === null || _this$toggleRef === void 0 ? void 0 : (_this$toggleRef$curre = _this$toggleRef.current) === null || _this$toggleRef$curre === void 0 ? void 0 : _this$toggleRef$curre.focus) === 'function') {\n        _this.toggleRef.current.focus();\n      }\n    };\n\n    _this.state = {\n      active: false\n    };\n    _this.toggleRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = PickerToggle.prototype;\n\n  _proto.renderToggleClean = function renderToggleClean() {\n    return React.createElement(\"span\", {\n      className: this.addPrefix('clean'),\n      role: \"button\",\n      tabIndex: -1,\n      onClick: this.handleClean\n    }, \"\\u2715\");\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        Component = _this$props2.componentClass,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        hasValue = _this$props2.hasValue,\n        cleanable = _this$props2.cleanable,\n        classPrefix = _this$props2.classPrefix,\n        caret = _this$props2.caret,\n        active = _this$props2.active,\n        tabIndex = _this$props2.tabIndex,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"componentClass\", \"children\", \"className\", \"hasValue\", \"cleanable\", \"classPrefix\", \"caret\", \"active\", \"tabIndex\"]);\n\n    var classes = classNames(classPrefix, className, {\n      active: active || this.state.active\n    });\n    var unhandled = getUnhandledProps(PickerToggle, rest);\n    return React.createElement(Component, _extends({}, unhandled, {\n      role: \"combobox\",\n      tabIndex: tabIndex,\n      className: classes,\n      ref: this.toggleRef,\n      onFocus: createChainedFunction(this.handleFocus, _get(unhandled, 'onFocus')),\n      onBlur: createChainedFunction(this.handleBlur, _get(unhandled, 'onBlur'))\n    }), React.createElement(\"span\", {\n      className: this.addPrefix(hasValue ? 'value' : 'placeholder')\n    }, children), hasValue && cleanable && this.renderToggleClean(), caret && React.createElement(\"span\", {\n      className: this.addPrefix('caret')\n    }));\n  };\n\n  return PickerToggle;\n}(React.Component);\n\nPickerToggle.propTypes = {\n  classPrefix: PropTypes.string,\n  hasValue: PropTypes.bool,\n  cleanable: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  caret: PropTypes.bool,\n  componentClass: PropTypes.elementType,\n  onClean: PropTypes.func,\n  active: PropTypes.bool\n};\nPickerToggle.defaultProps = {\n  componentClass: DefaultToggleButton,\n  tabIndex: 0,\n  caret: true\n};\nvar enhance = defaultProps({\n  classPrefix: 'picker-toggle'\n});\nexport default enhance(PickerToggle);","map":null,"metadata":{},"sourceType":"module"}