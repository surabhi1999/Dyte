{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { prefix, getUnhandledProps, defaultProps } from '../utils';\n\nvar DropdownMenuItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownMenuItem, _React$Component);\n\n  function DropdownMenuItem() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleClick = function (event) {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onSelect = _this$props.onSelect;\n      event.preventDefault();\n\n      if (!disabled && onSelect) {\n        onSelect(value, event);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = DropdownMenuItem.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        active = _this$props2.active,\n        onKeyDown = _this$props2.onKeyDown,\n        disabled = _this$props2.disabled,\n        focus = _this$props2.focus,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        classPrefix = _this$props2.classPrefix,\n        Component = _this$props2.componentClass,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"active\", \"onKeyDown\", \"disabled\", \"focus\", \"children\", \"className\", \"classPrefix\", \"componentClass\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var classes = classNames(classPrefix, (_classNames = {}, _classNames[addPrefix('active')] = active, _classNames[addPrefix('focus')] = focus, _classNames[addPrefix('disabled')] = disabled, _classNames));\n    var unhandled = getUnhandledProps(DropdownMenuItem, rest);\n    return React.createElement(Component, _extends({}, unhandled, {\n      className: className,\n      role: \"listitem\"\n    }), React.createElement(\"a\", {\n      className: classes,\n      tabIndex: -1,\n      onKeyDown: disabled ? null : onKeyDown,\n      onClick: this.handleClick\n    }, children));\n  };\n\n  return DropdownMenuItem;\n}(React.Component);\n\nDropdownMenuItem.propTypes = {\n  classPrefix: PropTypes.string.isRequired,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  onSelect: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  focus: PropTypes.bool,\n  title: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  getItemData: PropTypes.func,\n  componentClass: PropTypes.elementType\n};\nDropdownMenuItem.defaultProps = {\n  componentClass: 'div'\n};\nexport default defaultProps({\n  classPrefix: 'dropdown-menu-item'\n})(DropdownMenuItem);","map":null,"metadata":{},"sourceType":"module"}