{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { prefix, placementPolyfill } from '../utils';\nimport { defaultClassPrefix } from '../utils/prefix';\nimport NoticeManager from './NoticeManager';\n\nvar Notification =\n/*#__PURE__*/\nfunction () {\n  function Notification() {\n    var _this = this;\n\n    this.props = {\n      top: 24,\n      bottom: 24,\n      duration: 4500,\n      placement: 'topEnd',\n      classPrefix: defaultClassPrefix('notification'),\n      getContainer: null\n    };\n    this._instances = {};\n    this._cacheInstances = [];\n\n    this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n  }\n\n  var _proto = Notification.prototype;\n\n  _proto.setProps = function setProps(nextProps) {\n    this.props = _extends({}, this.props, {}, nextProps);\n\n    if (nextProps.top || nextProps.bottom) {\n      this._instances = {};\n    }\n  };\n\n  _proto.getPlacement = function getPlacement(placement) {\n    return placementPolyfill(placement || this.props.placement);\n  };\n\n  _proto.getPlacementStyle = function getPlacementStyle(config) {\n    var top = config.top,\n        bottom = config.bottom;\n    var placement = this.getPlacement(config.placement);\n    var style = {};\n\n    var _kebabCase$split = _kebabCase(placement).split('-'),\n        vertical = _kebabCase$split[0];\n\n    if (vertical === 'top') {\n      style.top = _isUndefined(top) ? this.props.top : top;\n    } else {\n      style.bottom = _isUndefined(top) ? this.props.bottom : bottom;\n    }\n\n    return style;\n  };\n\n  _proto.getInstance = function getInstance(config, callback) {\n    var _this$props = this.props,\n        classPrefix = _this$props.classPrefix,\n        getContainer = _this$props.getContainer;\n    var style = this.getPlacementStyle(config);\n    var placement = this.getPlacement(config.placement);\n    var nextProps = {\n      style: style,\n      className: classNames(this.addPrefix(_kebabCase(placement))),\n      classPrefix: classPrefix,\n      getContainer: getContainer\n    };\n    NoticeManager.getInstance(nextProps, callback);\n  };\n\n  _proto.open = function open(nextProps) {\n    var _this2 = this;\n\n    var description = nextProps.description,\n        onClose = nextProps.onClose,\n        priorPlacement = nextProps.placement,\n        _nextProps$duration = nextProps.duration,\n        duration = _nextProps$duration === void 0 ? this.props.duration : _nextProps$duration,\n        rest = _objectWithoutPropertiesLoose(nextProps, [\"description\", \"onClose\", \"placement\", \"duration\"]);\n\n    var placement = this.getPlacement(priorPlacement);\n    var content = React.createElement(\"div\", {\n      className: this.addPrefix('content')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('title')\n    }, nextProps.title), React.createElement(\"div\", {\n      className: this.addPrefix('description')\n    }, typeof description === 'function' ? description() : description));\n    var config = {\n      placement: placement,\n      top: nextProps.top,\n      bottom: nextProps.bottom\n    };\n\n    var itemProps = _extends({\n      closable: true,\n      content: content,\n      duration: duration,\n      onClose: onClose\n    }, rest);\n\n    var instance = this._instances[placement];\n\n    if (!instance) {\n      this.getInstance(config, function (nextInstance) {\n        nextInstance.push(itemProps);\n        _this2._instances[placement] = nextInstance;\n      });\n    } else {\n      instance.push(itemProps);\n    }\n\n    this._cacheInstances.push([placement, itemProps]);\n  };\n\n  _proto.close = function close(key) {\n    if (!this._cacheInstances.length) {\n      return;\n    }\n\n    if (typeof key !== 'undefined') {\n      var find = function find(item) {\n        return item[1].key === key;\n      };\n\n      var _this$_cacheInstances = this._cacheInstances.find(find),\n          _placement = _this$_cacheInstances[0];\n\n      this._instances[_placement].remove(key);\n\n      this._cacheInstances = this._cacheInstances.filter(find);\n      return;\n    }\n\n    var _this$_cacheInstances2 = this._cacheInstances.pop(),\n        placement = _this$_cacheInstances2[0];\n\n    this._instances[placement].remove();\n  };\n\n  _proto.closeAll = function closeAll() {\n    for (var key in this._instances) {\n      if (typeof this._instances[key].removeAll === 'function') {\n        this._instances[key].removeAll();\n      }\n    }\n\n    this._cacheInstances = [];\n  };\n\n  return Notification;\n}();\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}