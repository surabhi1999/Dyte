{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { defaultProps, prefix } from '../utils';\nimport classNames from 'classnames';\n\nvar Badge =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Badge, _React$Component);\n\n  function Badge() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Badge.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        classPrefix = _this$props.classPrefix,\n        children = _this$props.children,\n        contentText = _this$props.content,\n        maxCount = _this$props.maxCount,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"classPrefix\", \"children\", \"content\", \"maxCount\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var dot = contentText === undefined || contentText === null;\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('independent')] = !children, _classNames[addPrefix('wrapper')] = children, _classNames[addPrefix('dot')] = dot, _classNames));\n\n    if (contentText === false) {\n      return children;\n    }\n\n    var content = // $FlowFixMe I'm sure contenxtText is number type and maxCount is number type.\n    typeof contentText === 'number' && contentText > maxCount ? maxCount + \"+\" : contentText;\n\n    if (!children) {\n      return React.createElement(\"div\", _extends({}, rest, {\n        className: classes\n      }), content);\n    }\n\n    return React.createElement(\"div\", _extends({}, rest, {\n      className: classes\n    }), children, React.createElement(\"div\", {\n      className: addPrefix('content')\n    }, content));\n  };\n\n  return Badge;\n}(React.Component);\n\nBadge.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  maxCount: PropTypes.number\n};\nBadge.defaultProps = {\n  maxCount: 99\n};\nexport default defaultProps({\n  classPrefix: 'badge'\n})(Badge);","map":null,"metadata":{},"sourceType":"module"}