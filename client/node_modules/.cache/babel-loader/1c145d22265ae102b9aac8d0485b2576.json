{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { setStatic } from 'recompose';\nimport classNames from 'classnames';\nimport { on } from 'dom-lib';\nimport { setInlineStyles, setTranslate3d, setTransitionDuration, closest, getPosition, getEdgeOffset, getScrollingParent } from './utils';\nimport { prefix, defaultProps, getUnhandledProps } from '../utils';\nimport ListItem from './ListItem';\nimport Manager from './Manager';\nimport AutoScroller from './AutoScroller';\nimport ListContext from './ListContext';\nvar NodeType = {\n  Canvas: 'CANVAS',\n  Anchor: 'A',\n  Button: 'BUTTON',\n  Input: 'INPUT',\n  Option: 'OPTION',\n  Textarea: 'TEXTAREA',\n  Select: 'SELECT'\n};\nvar interactiveElements = [NodeType.Anchor, NodeType.Button, NodeType.Input, NodeType.Option, NodeType.Textarea, NodeType.Select];\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(List, _React$Component);\n\n  function List() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      sorting: false,\n      manager: new Manager()\n    };\n    _this.containerRef = React.createRef();\n    _this.containerBoundingRect = void 0;\n    _this.touched = void 0;\n    _this.scrollContainer = void 0;\n    _this.scrollContainerInitialScroll = void 0;\n    _this.autoScroller = void 0;\n    _this.windowInitialScroll = void 0;\n    _this.animatedNodeOffset = [];\n    _this.activeNodeBoundingClientRect = void 0;\n    _this.activeNodeGhost = void 0;\n    _this.activeNodeFlowBody = void 0;\n    _this.activeNodeFlowBodyTranslate = void 0;\n    _this.activeNodeMarginOffset = void 0;\n    _this.activeNodeOffsetEdge = void 0;\n    _this.activeNodeOldIndex = void 0;\n    _this.activeNodeNextIndex = void 0;\n    _this.activeNodeTranslateMin = void 0;\n    _this.activeNodeTranslateMax = void 0;\n    _this.windowStartListener = void 0;\n    _this.windowEndListener = void 0;\n    _this.sortMouseMoveListener = void 0;\n    _this.sortMouseEndListener = void 0;\n    _this.cursorInitialOffset = void 0;\n    _this.cursorCurrentPosition = void 0;\n    _this.pressTimer = void 0;\n\n    _this.handleStart = function (event) {\n      var _this$props = _this.props,\n          sortable = _this$props.sortable,\n          pressDelay = _this$props.pressDelay;\n      var _this$state = _this.state,\n          sorting = _this$state.sorting,\n          manager = _this$state.manager;\n      var node = closest(event.target, function (el) {\n        return !!manager.getNodeManagerRef(el);\n      });\n      var curManager = manager.getNodeManagerRef(node);\n\n      if (!((event === null || event === void 0 ? void 0 : event.target) && node instanceof HTMLElement && curManager)) {\n        return;\n      }\n\n      var _curManager$info = curManager.info,\n          disabled = _curManager$info.disabled,\n          curNodeManager = _curManager$info.manager;\n\n      if ( //is sortable\n      sortable && //is list item\n      !disabled && //is not secondary button pressed\n      event.button !== 2 && //is this list\n      curNodeManager === manager && //is not sorting\n      !sorting && //excludes interactive elements\n      !node.contains(closest(event.target, function (el) {\n        return interactiveElements.includes(el.tagName) || el.contentEditable === 'true';\n      }))) {\n        event.preventDefault();\n        _this.touched = true;\n        _this.cursorCurrentPosition = getPosition(event);\n        manager.setActive(curManager);\n        _this.pressTimer = setTimeout(function () {\n          return _this.handlePress(event);\n        }, pressDelay);\n      }\n    };\n\n    _this.handleEnd = function () {\n      var _this$state2 = _this.state,\n          sorting = _this$state2.sorting,\n          manager = _this$state2.manager;\n      _this.touched = false;\n\n      if (!sorting) {\n        clearTimeout(_this.pressTimer);\n        manager.setActive(null);\n      }\n    };\n\n    _this.handlePress = function _callee(event) {\n      var _this$props2, classPrefix, onSortStart, manager, _manager$getActive, activeNode, info, index, collection, addItemPrefix, style, activeNodeMargin;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props2 = _this.props, classPrefix = _this$props2.classPrefix, onSortStart = _this$props2.onSortStart;\n              manager = _this.state.manager;\n              _manager$getActive = manager.getActive(), activeNode = _manager$getActive.node, info = _manager$getActive.info; // return if no active node\n\n              if (!(!activeNode || !info)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              index = info.index, collection = info.collection;\n              addItemPrefix = prefix(classPrefix + '-item');\n              style = window.getComputedStyle(activeNode);\n              activeNodeMargin = {\n                bottom: parseFloat(style.marginBottom),\n                left: parseFloat(style.marginLeft),\n                right: parseFloat(style.marginRight),\n                top: parseFloat(style.marginTop)\n              };\n              _this.activeNodeMarginOffset = {\n                x: activeNodeMargin.left + activeNodeMargin.right,\n                y: Math.max(activeNodeMargin.top, activeNodeMargin.bottom)\n              };\n              _this.activeNodeBoundingClientRect = activeNode.getBoundingClientRect();\n              _this.containerBoundingRect = _this.scrollContainer.getBoundingClientRect();\n              _this.activeNodeOldIndex = index;\n              _this.activeNodeNextIndex = index;\n              _this.activeNodeOffsetEdge = getEdgeOffset(activeNode, _this.containerRef.current);\n              _this.cursorInitialOffset = getPosition(event);\n              _this.scrollContainerInitialScroll = {\n                left: _this.scrollContainer.scrollLeft,\n                top: _this.scrollContainer.scrollTop\n              };\n              _this.windowInitialScroll = {\n                left: window.pageXOffset,\n                top: window.pageYOffset\n              };\n              _this.activeNodeFlowBody = document.body.appendChild(activeNode.cloneNode(true));\n              _this.activeNodeFlowBody && _this.activeNodeFlowBody.classList.add(addItemPrefix('helper'));\n              setInlineStyles(_this.activeNodeFlowBody, {\n                position: 'fixed',\n                width: _this.activeNodeBoundingClientRect.width + \"px\",\n                height: _this.activeNodeBoundingClientRect.height + \"px\",\n                left: _this.activeNodeBoundingClientRect.left - activeNodeMargin.left + \"px\",\n                top: _this.activeNodeBoundingClientRect.top - activeNodeMargin.top + \"px\"\n              });\n              _this.activeNodeGhost = activeNode;\n              activeNode.classList.add(addItemPrefix('holder'));\n              _this.activeNodeTranslateMin = {\n                y: _this.containerBoundingRect.top - _this.activeNodeBoundingClientRect.top - _this.activeNodeBoundingClientRect.height / 2\n              };\n              _this.activeNodeTranslateMax = {\n                y: _this.containerBoundingRect.top + _this.containerBoundingRect.height - _this.activeNodeBoundingClientRect.top - _this.activeNodeBoundingClientRect.height / 2\n              };\n              _this.sortMouseMoveListener = on(window, 'mousemove', _this.handleSortMove, {\n                passive: false\n              });\n              _this.sortMouseEndListener = on(window, 'mouseup', _this.handleSortEnd, {\n                passive: false\n              });\n\n              _this.setState({\n                sorting: true\n              });\n\n              if (onSortStart) {\n                onSortStart({\n                  collection: collection,\n                  node: activeNode,\n                  oldIndex: _this.activeNodeOldIndex,\n                  newIndex: _this.activeNodeNextIndex\n                }, event);\n              }\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.handleSortMove = function (event) {\n      var _this$props3 = _this.props,\n          onSortMove = _this$props3.onSortMove,\n          autoScroll = _this$props3.autoScroll;\n      var manager = _this.state.manager; // Update helper position\n\n      var offset = getPosition(event);\n      var translate = {\n        x: offset.x - _this.cursorInitialOffset.x,\n        y: offset.y - _this.cursorInitialOffset.y\n      }; // Adjust for window scroll\n\n      translate.x -= window.pageXOffset - _this.windowInitialScroll.left;\n      translate.y -= window.pageYOffset - _this.windowInitialScroll.top;\n      _this.activeNodeFlowBodyTranslate = translate;\n      setTranslate3d(_this.activeNodeFlowBody, translate);\n\n      _this.animateNodes(); // auto scroll\n\n\n      if (autoScroll) {\n        _this.autoScroller.update({\n          width: _this.activeNodeBoundingClientRect.width,\n          height: _this.activeNodeBoundingClientRect.height,\n          translate: _this.activeNodeFlowBodyTranslate,\n          maxTranslate: _this.activeNodeTranslateMax,\n          minTranslate: _this.activeNodeTranslateMin\n        });\n      }\n\n      if (onSortMove) {\n        onSortMove({\n          collection: manager.getActive().info.collection,\n          node: manager.getActive().node,\n          oldIndex: _this.activeNodeOldIndex,\n          newIndex: _this.activeNodeNextIndex\n        }, event);\n      }\n    };\n\n    _this.handleSortEnd = function (event) {\n      var _this$props4 = _this.props,\n          onSortEnd = _this$props4.onSortEnd,\n          onSort = _this$props4.onSort,\n          classPrefix = _this$props4.classPrefix,\n          transitionDuration = _this$props4.transitionDuration;\n      var manager = _this.state.manager;\n      var activeManagerRef = manager.getActive();\n      var activeCollection = activeManagerRef ? activeManagerRef.info.collection : 0;\n      var managerRefs = manager.getOrderedRefs(activeCollection);\n      var addItemPrefix = prefix(classPrefix + '-item'); // Remove the event listeners\n\n      _this.sortMouseMoveListener.off();\n\n      _this.sortMouseEndListener.off();\n\n      setTransitionDuration(_this.activeNodeFlowBody, transitionDuration);\n      setTranslate3d(_this.activeNodeFlowBody, {\n        x: _this.holderTranslate.x - _this.containerScrollDelta.left,\n        y: _this.holderTranslate.y - _this.containerScrollDelta.top\n      }); // wait for animation\n\n      setTimeout(function () {\n        // Remove the helper from the DOM\n        if (_this.activeNodeFlowBody) {\n          _this.activeNodeFlowBody.parentNode && _this.activeNodeFlowBody.parentNode.removeChild(_this.activeNodeFlowBody);\n          _this.activeNodeFlowBody = null;\n        }\n\n        if (_this.activeNodeGhost) {\n          _this.activeNodeGhost.classList.remove(addItemPrefix('holder'));\n\n          setTranslate3d(_this.activeNodeGhost, null);\n          _this.animatedNodeOffset = [];\n        }\n\n        for (var i = 0, len = managerRefs.length; i < len; i++) {\n          var managerRef = managerRefs[i];\n          var el = managerRef.node; // Clear the cached offsetTop / offsetLeft value\n\n          managerRef.edgeOffset = null; // Remove the transforms / transitions\n\n          setTranslate3d(el, null);\n          setTransitionDuration(el, null);\n        } // Stop autoScroll\n\n\n        _this.autoScroller.clear(); // Update manager state\n\n\n        manager.setActive(null);\n\n        _this.setState({\n          sorting: false\n        });\n\n        if (typeof onSortEnd === 'function') {\n          onSortEnd({\n            collection: activeCollection,\n            node: activeManagerRef.node,\n            newIndex: _this.activeNodeNextIndex,\n            oldIndex: _this.activeNodeOldIndex\n          }, event);\n        }\n\n        if (typeof onSort === 'function') {\n          onSort({\n            collection: activeCollection,\n            node: activeManagerRef.node,\n            newIndex: _this.activeNodeNextIndex,\n            oldIndex: _this.activeNodeOldIndex\n          }, event);\n        }\n      }, transitionDuration);\n    };\n\n    return _this;\n  }\n\n  var _proto = List.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    if (this.containerRef.current instanceof HTMLElement) {\n      this.scrollContainer = getScrollingParent(this.containerRef.current) || this.containerRef.current;\n      this.autoScroller = new AutoScroller(this.scrollContainer, function (offset) {\n        _this2.activeNodeFlowBodyTranslate.x += offset.left;\n        _this2.activeNodeFlowBodyTranslate.y += offset.top;\n      });\n      this.windowStartListener = on(this.containerRef.current, 'mousedown', this.handleStart, {\n        passive: false\n      });\n      this.windowEndListener = on(this.containerRef.current, 'mouseup', this.handleEnd, {\n        passive: false\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var _this$windowStartList, _this$windowEndListen;\n\n    (_this$windowStartList = this.windowStartListener) === null || _this$windowStartList === void 0 ? void 0 : _this$windowStartList.off();\n    (_this$windowEndListen = this.windowEndListener) === null || _this$windowEndListen === void 0 ? void 0 : _this$windowEndListen.off();\n  };\n\n  _proto.animateNodes = function animateNodes() {\n    var transitionDuration = this.props.transitionDuration;\n    var manager = this.state.manager;\n    var listItemManagerRefs = manager.getOrderedRefs();\n    var sortingOffset = {\n      left: this.activeNodeOffsetEdge.left + this.activeNodeFlowBodyTranslate.x + this.containerScrollDelta.left,\n      top: this.activeNodeOffsetEdge.top + this.activeNodeFlowBodyTranslate.y + this.containerScrollDelta.top\n    };\n    this.activeNodeNextIndex = -1;\n\n    for (var i = 0, len = listItemManagerRefs.length; i < len; i++) {\n      var _listItemManagerRefs$ = listItemManagerRefs[i],\n          node = _listItemManagerRefs$.node,\n          index = _listItemManagerRefs$.info.index,\n          edgeOffset = _listItemManagerRefs$.edgeOffset;\n      var width = node.offsetWidth;\n      var height = node.offsetHeight;\n      var offset = {\n        height: this.activeNodeBoundingClientRect.height > height ? height / 2 : this.activeNodeBoundingClientRect.height / 2,\n        width: this.activeNodeBoundingClientRect.width > width ? width / 2 : this.activeNodeBoundingClientRect.width / 2\n      };\n      var translate = {\n        x: 0,\n        y: 0\n      }; // If we haven't cached the node's offsetTop / offsetLeft value\n\n      var curEdgeOffset = edgeOffset || getEdgeOffset(node, this.containerRef.current);\n      listItemManagerRefs[i].edgeOffset = curEdgeOffset; // Get a reference to the next node\n\n      var prvNode = i > 0 && listItemManagerRefs[i - 1];\n      var nextNode = i < len - 1 && listItemManagerRefs[i + 1]; // Also cache the node's edge offset if needed.\n\n      if (prvNode && !prvNode.edgeOffset) {\n        prvNode.edgeOffset = getEdgeOffset(prvNode.node, this.containerRef.current);\n      }\n\n      if (nextNode && !nextNode.edgeOffset) {\n        nextNode.edgeOffset = getEdgeOffset(nextNode.node, this.containerRef.current);\n      } // If the node is the one we're currently animating, skip it\n\n\n      if (index === this.activeNodeOldIndex) {\n        continue;\n      }\n\n      var distanceTop = sortingOffset.top + this.windowScrollDelta.top;\n\n      if (prvNode && index > this.activeNodeOldIndex && distanceTop + offset.height >= curEdgeOffset.top) {\n        translate.y = prvNode.edgeOffset.top - curEdgeOffset.top;\n        this.activeNodeNextIndex = index;\n      } else if (nextNode && index < this.activeNodeOldIndex && distanceTop <= curEdgeOffset.top + offset.height) {\n        translate.y = nextNode.edgeOffset.top - curEdgeOffset.top;\n\n        if (this.activeNodeNextIndex === -1) {\n          this.activeNodeNextIndex = index;\n        }\n      }\n\n      setTransitionDuration(node, transitionDuration);\n      setTranslate3d(node, translate); // translate holder\n\n      this.animatedNodeOffset[index] = translate;\n      setTranslate3d(this.activeNodeGhost, this.holderTranslate);\n    }\n\n    if (this.activeNodeNextIndex === -1) {\n      this.activeNodeNextIndex = this.activeNodeOldIndex;\n    }\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props5 = this.props,\n        className = _this$props5.className,\n        classPrefix = _this$props5.classPrefix,\n        bordered = _this$props5.bordered,\n        hover = _this$props5.hover,\n        size = _this$props5.size,\n        sortable = _this$props5.sortable,\n        children = _this$props5.children,\n        rest = _objectWithoutPropertiesLoose(_this$props5, [\"className\", \"classPrefix\", \"bordered\", \"hover\", \"size\", \"sortable\", \"children\"]);\n\n    var _this$state3 = this.state,\n        sorting = _this$state3.sorting,\n        manager = _this$state3.manager;\n    var addPrefix = prefix(classPrefix);\n    var unhandled = getUnhandledProps(List, rest);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('bordered')] = bordered, _classNames[addPrefix('sortable')] = sortable, _classNames[addPrefix('sorting')] = sorting, _classNames[addPrefix('hover')] = hover, _classNames));\n    var contextValue = {\n      bordered: bordered,\n      size: size,\n      manager: manager\n    };\n    return React.createElement(ListContext.Provider, {\n      value: contextValue\n    }, React.createElement(\"div\", _extends({\n      ref: this.containerRef,\n      className: classes\n    }, unhandled), children));\n  };\n\n  _createClass(List, [{\n    key: \"containerScrollDelta\",\n    get: function get() {\n      return {\n        left: this.scrollContainer.scrollLeft - this.scrollContainerInitialScroll.left,\n        top: this.scrollContainer.scrollTop - this.scrollContainerInitialScroll.top\n      };\n    }\n  }, {\n    key: \"windowScrollDelta\",\n    get: function get() {\n      return {\n        left: window.pageXOffset - this.windowInitialScroll.left,\n        top: window.pageYOffset - this.windowInitialScroll.top\n      };\n    }\n  }, {\n    key: \"holderTranslate\",\n    get: function get() {\n      return this.animatedNodeOffset.reduce(function (acc, item) {\n        return {\n          x: acc.x - item.x,\n          y: acc.y - item.y\n        };\n      }, {\n        x: 0,\n        y: 0\n      });\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nList.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  bordered: PropTypes.bool,\n  hover: PropTypes.bool,\n  sortable: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'md', 'sm']),\n  autoScroll: PropTypes.bool,\n  pressDelay: PropTypes.number,\n  transitionDuration: PropTypes.number,\n  onSortStart: PropTypes.func,\n  onSortMove: PropTypes.func,\n  onSortEnd: PropTypes.func,\n  onSort: PropTypes.func\n};\nList.defaultProps = {\n  size: 'md',\n  autoScroll: true,\n  pressDelay: 0,\n  transitionDuration: 300\n};\nvar EnhancedList = defaultProps({\n  classPrefix: 'list'\n})(List);\nsetStatic('Item', ListItem)(EnhancedList);\nexport default EnhancedList;","map":null,"metadata":{},"sourceType":"module"}