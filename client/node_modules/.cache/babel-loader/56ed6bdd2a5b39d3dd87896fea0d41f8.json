{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\nexport function getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  if (!(_isArray(a) && _isArray(b))) {\n    return a !== b;\n  }\n\n  return !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}","map":null,"metadata":{},"sourceType":"module"}