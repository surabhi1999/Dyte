{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport isFunction from 'lodash/isFunction';\nimport flatten from 'lodash/flatten';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport eq from 'lodash/eq';\nimport omit from 'lodash/omit';\nimport merge from 'lodash/merge';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport { getTranslateDOMPositionXY } from 'dom-lib/lib/transition/translateDOMPositionXY';\nimport { addStyle, getWidth, getHeight, WheelHandler, scrollLeft, scrollTop, on, getOffset } from 'dom-lib';\nimport Row from './Row';\nimport CellGroup from './CellGroup';\nimport Scrollbar from './Scrollbar';\nimport TableContext from './TableContext';\nimport { SCROLLBAR_WIDTH, CELL_PADDING_HEIGHT } from './constants';\nimport { getTotalByColumns, mergeCells, getUnhandledProps, defaultClassPrefix, toggleClass, flattenData, prefix, requestAnimationTimeout, cancelAnimationTimeout, isRTL as _isRTL, isNumberOrTrue, findRowKeys, findAllParents, shouldShowRowByExpanded, resetLeftForCells } from './utils';\nimport ColumnGroup from './ColumnGroup';\nvar SORT_TYPE = {\n  DESC: 'desc',\n  ASC: 'asc'\n};\nvar propTypes = {\n  autoHeight: PropTypes.bool,\n  affixHeader: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  affixHorizontalScrollbar: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  bordered: PropTypes.bool,\n  bodyRef: PropTypes.func,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.any,\n  cellBordered: PropTypes.bool,\n  data: PropTypes.arrayOf(PropTypes.object),\n  defaultExpandAllRows: PropTypes.bool,\n  defaultExpandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  defaultSortType: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  disabledScroll: PropTypes.bool,\n  expandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  hover: PropTypes.bool,\n  height: PropTypes.number,\n  headerHeight: PropTypes.number,\n  locale: PropTypes.object,\n  loading: PropTypes.bool,\n  loadAnimation: PropTypes.bool,\n  minHeight: PropTypes.number,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  renderTreeToggle: PropTypes.func,\n  renderRowExpanded: PropTypes.func,\n  rowExpandedHeight: PropTypes.number,\n  renderEmpty: PropTypes.func,\n  renderLoading: PropTypes.func,\n  rowClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  rtl: PropTypes.bool,\n  style: PropTypes.object,\n  sortColumn: PropTypes.string,\n  sortType: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  showHeader: PropTypes.bool,\n  shouldUpdateScroll: PropTypes.bool,\n  translate3d: PropTypes.bool,\n  wordWrap: PropTypes.bool,\n  width: PropTypes.number,\n  virtualized: PropTypes.bool,\n  isTree: PropTypes.bool,\n  onRowClick: PropTypes.func,\n  onRowContextMenu: PropTypes.func,\n  onScroll: PropTypes.func,\n  onSortColumn: PropTypes.func,\n  onExpandChange: PropTypes.func,\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onDataUpdated: PropTypes.func\n};\n\nvar Table =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Table, _React$Component);\n\n  Table.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (props.data !== state.cacheData || props.isTree !== state.isTree) {\n      return {\n        cacheData: props.data,\n        isTree: props.isTree,\n        data: props.isTree ? flattenData(props.data) : props.data\n      };\n    }\n\n    return null;\n  };\n\n  function Table(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.translateDOMPositionXY = null;\n    _this.scrollListener = null;\n    _this.tableRef = void 0;\n    _this.scrollbarYRef = void 0;\n    _this.scrollbarXRef = void 0;\n    _this.tableBodyRef = void 0;\n    _this.affixHeaderWrapperRef = void 0;\n    _this.mouseAreaRef = void 0;\n    _this.headerWrapperRef = void 0;\n    _this.tableHeaderRef = void 0;\n    _this.wheelWrapperRef = void 0;\n    _this.tableRows = {};\n    _this.mounted = false;\n    _this.disableEventsTimeoutId = null;\n    _this.scrollY = 0;\n    _this.scrollX = 0;\n    _this.wheelHandler = void 0;\n    _this.minScrollY = void 0;\n    _this.minScrollX = void 0;\n    _this.mouseArea = void 0;\n    _this.touchX = void 0;\n    _this.touchY = void 0;\n    _this.wheelListener = void 0;\n    _this.touchStartListener = void 0;\n    _this.touchMoveListener = void 0;\n    _this._cacheCells = null;\n    _this._cacheChildrenSize = 0;\n    _this._visibleRows = [];\n\n    _this.listenWheel = function (deltaX, deltaY) {\n      var _this$scrollbarXRef$c, _this$scrollbarXRef$c2, _this$scrollbarYRef$c, _this$scrollbarYRef$c2;\n\n      _this.handleWheel(deltaX, deltaY);\n\n      (_this$scrollbarXRef$c = _this.scrollbarXRef.current) === null || _this$scrollbarXRef$c === void 0 ? void 0 : (_this$scrollbarXRef$c2 = _this$scrollbarXRef$c.onWheelScroll) === null || _this$scrollbarXRef$c2 === void 0 ? void 0 : _this$scrollbarXRef$c2.call(_this$scrollbarXRef$c, deltaX);\n      (_this$scrollbarYRef$c = _this.scrollbarYRef.current) === null || _this$scrollbarYRef$c === void 0 ? void 0 : (_this$scrollbarYRef$c2 = _this$scrollbarYRef$c.onWheelScroll) === null || _this$scrollbarYRef$c2 === void 0 ? void 0 : _this$scrollbarYRef$c2.call(_this$scrollbarYRef$c, deltaY);\n    };\n\n    _this.setOffsetByAffix = function () {\n      var _this$headerWrapperRe, _this$tableRef;\n\n      var _this$props = _this.props,\n          affixHeader = _this$props.affixHeader,\n          affixHorizontalScrollbar = _this$props.affixHorizontalScrollbar;\n      var headerNode = (_this$headerWrapperRe = _this.headerWrapperRef) === null || _this$headerWrapperRe === void 0 ? void 0 : _this$headerWrapperRe.current;\n\n      if (isNumberOrTrue(affixHeader) && headerNode) {\n        _this.setState(function () {\n          return {\n            headerOffset: getOffset(headerNode)\n          };\n        });\n      }\n\n      var tableNode = (_this$tableRef = _this.tableRef) === null || _this$tableRef === void 0 ? void 0 : _this$tableRef.current;\n\n      if (isNumberOrTrue(affixHorizontalScrollbar) && tableNode) {\n        _this.setState(function () {\n          return {\n            tableOffset: getOffset(tableNode)\n          };\n        });\n      }\n    };\n\n    _this.handleWindowScroll = function () {\n      var _this$props2 = _this.props,\n          affixHeader = _this$props2.affixHeader,\n          affixHorizontalScrollbar = _this$props2.affixHorizontalScrollbar;\n\n      if (isNumberOrTrue(affixHeader)) {\n        _this.affixTableHeader();\n      }\n\n      if (isNumberOrTrue(affixHorizontalScrollbar)) {\n        _this.affixHorizontalScrollbar();\n      }\n    };\n\n    _this.affixHorizontalScrollbar = function () {\n      var _this$scrollbarXRef, _this$scrollbarXRef$c3, _this$scrollbarXRef$c4;\n\n      var scrollY = window.scrollY || window.pageYOffset;\n      var windowHeight = getHeight(window);\n\n      var height = _this.getTableHeight();\n\n      var _this$state = _this.state,\n          tableOffset = _this$state.tableOffset,\n          fixedHorizontalScrollbar = _this$state.fixedHorizontalScrollbar;\n      var affixHorizontalScrollbar = _this.props.affixHorizontalScrollbar;\n\n      var headerHeight = _this.getTableHeaderHeight();\n\n      var bottom = typeof affixHorizontalScrollbar === 'number' ? affixHorizontalScrollbar : 0;\n      var fixedScrollbar = scrollY + windowHeight < height + (tableOffset.top + bottom) && scrollY + windowHeight - headerHeight > tableOffset.top + bottom;\n\n      if ((_this$scrollbarXRef = _this.scrollbarXRef) !== null && _this$scrollbarXRef !== void 0 && (_this$scrollbarXRef$c3 = _this$scrollbarXRef.current) !== null && _this$scrollbarXRef$c3 !== void 0 && (_this$scrollbarXRef$c4 = _this$scrollbarXRef$c3.barRef) !== null && _this$scrollbarXRef$c4 !== void 0 && _this$scrollbarXRef$c4.current && fixedHorizontalScrollbar !== fixedScrollbar) {\n        _this.setState({\n          fixedHorizontalScrollbar: fixedScrollbar\n        });\n      }\n    };\n\n    _this.affixTableHeader = function () {\n      var affixHeader = _this.props.affixHeader;\n      var top = typeof affixHeader === 'number' ? affixHeader : 0;\n      var _this$state2 = _this.state,\n          headerOffset = _this$state2.headerOffset,\n          contentHeight = _this$state2.contentHeight;\n      var scrollY = window.scrollY || window.pageYOffset;\n      var fixedHeader = scrollY - (headerOffset.top - top) >= 0 && scrollY < headerOffset.top - top + contentHeight;\n\n      if (_this.affixHeaderWrapperRef.current) {\n        toggleClass(_this.affixHeaderWrapperRef.current, 'fixed', fixedHeader);\n      }\n    };\n\n    _this.handleSortColumn = function (dataKey) {\n      var _this$props$onSortCol, _this$props3;\n\n      var sortType = _this.getSortType();\n\n      if (_this.props.sortColumn === dataKey) {\n        sortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n\n        _this.setState({\n          sortType: sortType\n        });\n      }\n\n      (_this$props$onSortCol = (_this$props3 = _this.props).onSortColumn) === null || _this$props$onSortCol === void 0 ? void 0 : _this$props$onSortCol.call(_this$props3, dataKey, sortType);\n    };\n\n    _this.handleColumnResizeEnd = function (columnWidth, _cursorDelta, dataKey, index) {\n      var _this$setState;\n\n      _this._cacheCells = null;\n\n      _this.setState((_this$setState = {\n        isColumnResizing: false\n      }, _this$setState[dataKey + \"_\" + index + \"_width\"] = columnWidth, _this$setState));\n\n      addStyle(_this.mouseAreaRef.current, {\n        display: 'none'\n      });\n    };\n\n    _this.handleColumnResizeStart = function (width, left, fixed) {\n      _this.setState({\n        isColumnResizing: true\n      });\n\n      _this.handleColumnResizeMove(width, left, fixed);\n    };\n\n    _this.handleColumnResizeMove = function (width, left, fixed) {\n      var _addStyle;\n\n      var mouseAreaLeft = width + left;\n      var x = mouseAreaLeft;\n      var dir = 'left';\n\n      if (_this.isRTL()) {\n        mouseAreaLeft += _this.minScrollX + SCROLLBAR_WIDTH;\n        dir = 'right';\n      }\n\n      if (!fixed) {\n        x = mouseAreaLeft + (_this.isRTL() ? -_this.scrollX : _this.scrollX);\n      }\n\n      addStyle(_this.mouseAreaRef.current, (_addStyle = {\n        display: 'block'\n      }, _addStyle[dir] = x + \"px\", _addStyle));\n    };\n\n    _this.handleTreeToggle = function (rowKey, _rowIndex, rowData) {\n      var _this$props$onExpandC, _this$props4;\n\n      var expandedRowKeys = _this.getExpandedRowKeys();\n\n      var open = false;\n      var nextExpandedRowKeys = [];\n\n      for (var i = 0; i < expandedRowKeys.length; i++) {\n        var _key = expandedRowKeys[i];\n\n        if (_key === rowKey) {\n          open = true;\n        } else {\n          nextExpandedRowKeys.push(_key);\n        }\n      }\n\n      if (!open) {\n        nextExpandedRowKeys.push(rowKey);\n      }\n\n      _this.setState({\n        expandedRowKeys: nextExpandedRowKeys\n      });\n\n      (_this$props$onExpandC = (_this$props4 = _this.props).onExpandChange) === null || _this$props$onExpandC === void 0 ? void 0 : _this$props$onExpandC.call(_this$props4, !open, rowData);\n    };\n\n    _this.handleScrollX = function (delta) {\n      _this.handleWheel(delta, 0);\n    };\n\n    _this.handleScrollY = function (delta) {\n      _this.handleWheel(0, delta);\n    };\n\n    _this.handleWheel = function (deltaX, deltaY) {\n      var _this$props5 = _this.props,\n          onScroll = _this$props5.onScroll,\n          virtualized = _this$props5.virtualized;\n      var _this$state3 = _this.state,\n          contentWidth = _this$state3.contentWidth,\n          width = _this$state3.width;\n\n      if (!_this.tableRef.current) {\n        return;\n      }\n\n      var nextScrollX = contentWidth <= width ? 0 : _this.scrollX - deltaX;\n      var nextScrollY = _this.scrollY - deltaY;\n      _this.scrollY = Math.min(0, nextScrollY < _this.minScrollY ? _this.minScrollY : nextScrollY);\n      _this.scrollX = Math.min(0, nextScrollX < _this.minScrollX ? _this.minScrollX : nextScrollX);\n\n      _this.updatePosition();\n\n      onScroll === null || onScroll === void 0 ? void 0 : onScroll(_this.scrollX, _this.scrollY);\n\n      if (virtualized) {\n        _this.setState({\n          isScrolling: true,\n          scrollY: _this.scrollY\n        });\n\n        if (_this.disableEventsTimeoutId) {\n          cancelAnimationTimeout(_this.disableEventsTimeoutId);\n        }\n\n        _this.disableEventsTimeoutId = requestAnimationTimeout(_this.debounceScrollEndedCallback, 150);\n      }\n    };\n\n    _this.debounceScrollEndedCallback = function () {\n      _this.disableEventsTimeoutId = null;\n\n      _this.setState({\n        isScrolling: false\n      });\n    };\n\n    _this.handleTouchStart = function (event) {\n      var _this$props$onTouchSt, _this$props6;\n\n      if (event.touches) {\n        var _event$touches$ = event.touches[0],\n            pageX = _event$touches$.pageX,\n            pageY = _event$touches$.pageY;\n        _this.touchX = pageX;\n        _this.touchY = pageY;\n      }\n\n      (_this$props$onTouchSt = (_this$props6 = _this.props).onTouchStart) === null || _this$props$onTouchSt === void 0 ? void 0 : _this$props$onTouchSt.call(_this$props6, event);\n    };\n\n    _this.handleTouchMove = function (event) {\n      var _this$props$onTouchMo, _this$props7;\n\n      var autoHeight = _this.props.autoHeight;\n\n      if (event.touches) {\n        var _event$preventDefault, _this$scrollbarXRef$c5, _this$scrollbarXRef$c6, _this$scrollbarYRef$c3, _this$scrollbarYRef$c4;\n\n        var _event$touches$2 = event.touches[0],\n            pageX = _event$touches$2.pageX,\n            pageY = _event$touches$2.pageY;\n        var deltaX = _this.touchX - pageX;\n        var deltaY = autoHeight ? 0 : _this.touchY - pageY;\n\n        if (!_this.shouldHandleWheelY(deltaY) && !_this.shouldHandleWheelX(deltaX)) {\n          return;\n        }\n\n        (_event$preventDefault = event.preventDefault) === null || _event$preventDefault === void 0 ? void 0 : _event$preventDefault.call(event);\n\n        _this.handleWheel(deltaX, deltaY);\n\n        (_this$scrollbarXRef$c5 = _this.scrollbarXRef.current) === null || _this$scrollbarXRef$c5 === void 0 ? void 0 : (_this$scrollbarXRef$c6 = _this$scrollbarXRef$c5.onWheelScroll) === null || _this$scrollbarXRef$c6 === void 0 ? void 0 : _this$scrollbarXRef$c6.call(_this$scrollbarXRef$c5, deltaX);\n        (_this$scrollbarYRef$c3 = _this.scrollbarYRef.current) === null || _this$scrollbarYRef$c3 === void 0 ? void 0 : (_this$scrollbarYRef$c4 = _this$scrollbarYRef$c3.onWheelScroll) === null || _this$scrollbarYRef$c4 === void 0 ? void 0 : _this$scrollbarYRef$c4.call(_this$scrollbarYRef$c3, deltaY);\n        _this.touchX = pageX;\n        _this.touchY = pageY;\n      }\n\n      (_this$props$onTouchMo = (_this$props7 = _this.props).onTouchMove) === null || _this$props$onTouchMo === void 0 ? void 0 : _this$props$onTouchMo.call(_this$props7, event);\n    };\n\n    _this.handleBodyScroll = function (event) {\n      if (event.target !== _this.tableBodyRef.current) {\n        return;\n      }\n\n      var left = scrollLeft(event.target);\n      var top = scrollTop(event.target);\n\n      if (top === 0 && left === 0) {\n        return;\n      }\n\n      _this.listenWheel(left, top);\n\n      scrollLeft(event.target, 0);\n      scrollTop(event.target, 0);\n    };\n\n    _this.shouldHandleWheelX = function (delta) {\n      var _this$props8 = _this.props,\n          disabledScroll = _this$props8.disabledScroll,\n          loading = _this$props8.loading;\n\n      if (delta === 0 || disabledScroll || loading) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.shouldHandleWheelY = function (delta) {\n      var _this$props9 = _this.props,\n          disabledScroll = _this$props9.disabledScroll,\n          loading = _this$props9.loading;\n\n      if (delta === 0 || disabledScroll || loading) {\n        return false;\n      }\n\n      return delta >= 0 && _this.scrollY > _this.minScrollY || delta < 0 && _this.scrollY < 0;\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.calculateTableWidth = function () {\n      var _this$tableRef2;\n\n      var table = (_this$tableRef2 = _this.tableRef) === null || _this$tableRef2 === void 0 ? void 0 : _this$tableRef2.current;\n      var width = _this.state.width;\n\n      if (table) {\n        var nextWidth = getWidth(table);\n\n        if (width !== nextWidth) {\n          var _this$scrollbarXRef2, _this$scrollbarXRef2$;\n\n          _this.scrollX = 0;\n          (_this$scrollbarXRef2 = _this.scrollbarXRef) === null || _this$scrollbarXRef2 === void 0 ? void 0 : (_this$scrollbarXRef2$ = _this$scrollbarXRef2.current) === null || _this$scrollbarXRef2$ === void 0 ? void 0 : _this$scrollbarXRef2$.resetScrollBarPosition();\n        }\n\n        _this._cacheCells = null;\n\n        _this.setState({\n          width: nextWidth\n        });\n      }\n\n      _this.setOffsetByAffix();\n    };\n\n    _this.scrollTop = function (top) {\n      var _this$scrollbarYRef, _this$scrollbarYRef$c5, _this$scrollbarYRef$c6;\n\n      if (top === void 0) {\n        top = 0;\n      }\n\n      var _this$getControlledSc = _this.getControlledScrollTopValue(top),\n          scrollY = _this$getControlledSc[0],\n          handleScrollY = _this$getControlledSc[1];\n\n      _this.scrollY = scrollY;\n      (_this$scrollbarYRef = _this.scrollbarYRef) === null || _this$scrollbarYRef === void 0 ? void 0 : (_this$scrollbarYRef$c5 = _this$scrollbarYRef.current) === null || _this$scrollbarYRef$c5 === void 0 ? void 0 : (_this$scrollbarYRef$c6 = _this$scrollbarYRef$c5.resetScrollBarPosition) === null || _this$scrollbarYRef$c6 === void 0 ? void 0 : _this$scrollbarYRef$c6.call(_this$scrollbarYRef$c5, handleScrollY);\n\n      _this.updatePosition();\n      /**\n       * 当开启 virtualized，调用 scrollTop 后会出现白屏现象，\n       * 原因是直接操作 DOM 的坐标，但是组件没有重新渲染，需要调用 forceUpdate 重新进入 render。\n       * Fix: rsuite#1044\n       */\n\n\n      if (_this.props.virtualized && _this.state.contentHeight > _this.props.height) {\n        _this.forceUpdate();\n      }\n    };\n\n    _this.scrollLeft = function (left) {\n      var _this$scrollbarXRef3, _this$scrollbarXRef3$, _this$scrollbarXRef3$2;\n\n      if (left === void 0) {\n        left = 0;\n      }\n\n      var _this$getControlledSc2 = _this.getControlledScrollLeftValue(left),\n          scrollX = _this$getControlledSc2[0],\n          handleScrollX = _this$getControlledSc2[1];\n\n      _this.scrollX = scrollX;\n      (_this$scrollbarXRef3 = _this.scrollbarXRef) === null || _this$scrollbarXRef3 === void 0 ? void 0 : (_this$scrollbarXRef3$ = _this$scrollbarXRef3.current) === null || _this$scrollbarXRef3$ === void 0 ? void 0 : (_this$scrollbarXRef3$2 = _this$scrollbarXRef3$.resetScrollBarPosition) === null || _this$scrollbarXRef3$2 === void 0 ? void 0 : _this$scrollbarXRef3$2.call(_this$scrollbarXRef3$, handleScrollX);\n\n      _this.updatePosition();\n    };\n\n    _this.scrollTo = function (coord) {\n      var _ref = coord || {},\n          x = _ref.x,\n          y = _ref.y;\n\n      if (typeof x === 'number') {\n        _this.scrollLeft(x);\n      }\n\n      if (typeof y === 'number') {\n        _this.scrollTop(y);\n      }\n    };\n\n    _this.bindTableRowsRef = function (index, rowData) {\n      return function (ref) {\n        if (ref) {\n          _this.tableRows[index] = [ref, rowData];\n        }\n      };\n    };\n\n    _this.bindRowClick = function (rowData) {\n      return function (event) {\n        var _this$props$onRowClic, _this$props10;\n\n        (_this$props$onRowClic = (_this$props10 = _this.props).onRowClick) === null || _this$props$onRowClic === void 0 ? void 0 : _this$props$onRowClic.call(_this$props10, rowData, event);\n      };\n    };\n\n    _this.bindRowContextMenu = function (rowData) {\n      return function (event) {\n        var _this$props$onRowCont, _this$props11;\n\n        (_this$props$onRowCont = (_this$props11 = _this.props).onRowContextMenu) === null || _this$props$onRowCont === void 0 ? void 0 : _this$props$onRowCont.call(_this$props11, rowData, event);\n      };\n    };\n\n    var _width = props.width,\n        data = props.data,\n        _rowKey = props.rowKey,\n        defaultExpandAllRows = props.defaultExpandAllRows,\n        renderRowExpanded = props.renderRowExpanded,\n        defaultExpandedRowKeys = props.defaultExpandedRowKeys,\n        _props$children = props.children,\n        children = _props$children === void 0 ? [] : _props$children,\n        isTree = props.isTree,\n        defaultSortType = props.defaultSortType;\n\n    var _expandedRowKeys = defaultExpandAllRows ? findRowKeys(data, _rowKey, isFunction(renderRowExpanded)) : defaultExpandedRowKeys || [];\n\n    var shouldFixedColumn = Array.from(flatten(children)).some(function (child) {\n      return child && child.props && child.props.fixed;\n    });\n\n    if (isTree && !_rowKey) {\n      throw new Error('The `rowKey` is required when set isTree');\n    }\n\n    _this.state = {\n      isTree: isTree,\n      expandedRowKeys: _expandedRowKeys,\n      shouldFixedColumn: shouldFixedColumn,\n      cacheData: data,\n      data: isTree ? flattenData(data) : data,\n      width: _width || 0,\n      columnWidth: 0,\n      dataKey: 0,\n      contentHeight: 0,\n      contentWidth: 0,\n      tableRowsMaxHeight: [],\n      sortType: defaultSortType,\n      scrollY: 0,\n      isScrolling: false,\n      fixedHeader: false\n    };\n    _this.scrollY = 0;\n    _this.scrollX = 0;\n    _this.wheelHandler = new WheelHandler(_this.listenWheel, _this.shouldHandleWheelX, _this.shouldHandleWheelY, false);\n    _this._cacheChildrenSize = flatten(children).length;\n    _this.translateDOMPositionXY = getTranslateDOMPositionXY({\n      enable3DTransform: props.translate3d\n    });\n    _this.tableRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.scrollbarYRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.scrollbarXRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.tableBodyRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.affixHeaderWrapperRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.mouseAreaRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.headerWrapperRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.wheelWrapperRef =\n    /*#__PURE__*/\n    React.createRef();\n    _this.tableHeaderRef =\n    /*#__PURE__*/\n    React.createRef();\n    return _this;\n  }\n\n  var _proto = Table.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props13, _this$props13$bodyRef;\n\n    this.calculateTableWidth();\n    this.calculateTableContextHeight();\n    this.calculateRowMaxHeight();\n    this.setOffsetByAffix();\n    this.initPosition();\n    bindElementResize(this.tableRef.current, debounce(this.calculateTableWidth, 400));\n    var options = {\n      passive: false\n    };\n    var tableBody = this.tableBodyRef.current;\n\n    if (tableBody) {\n      this.wheelListener = on(tableBody, 'wheel', this.wheelHandler.onWheel, options);\n      this.touchStartListener = on(tableBody, 'touchstart', this.handleTouchStart, options);\n      this.touchMoveListener = on(tableBody, 'touchmove', this.handleTouchMove, options);\n    }\n\n    var _this$props12 = this.props,\n        affixHeader = _this$props12.affixHeader,\n        affixHorizontalScrollbar = _this$props12.affixHorizontalScrollbar;\n\n    if (isNumberOrTrue(affixHeader) || isNumberOrTrue(affixHorizontalScrollbar)) {\n      this.scrollListener = on(window, 'scroll', this.handleWindowScroll);\n    }\n\n    (_this$props13 = this.props) === null || _this$props13 === void 0 ? void 0 : (_this$props13$bodyRef = _this$props13.bodyRef) === null || _this$props13$bodyRef === void 0 ? void 0 : _this$props13$bodyRef.call(_this$props13, this.wheelWrapperRef.current);\n  };\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    var _cacheChildrenSize = flatten(nextProps.children || []).length;\n    /**\n     * 单元格列的信息在初始化后会被缓存，在某些属性被更新以后，需要清除缓存。\n     */\n\n    if (_cacheChildrenSize !== this._cacheChildrenSize) {\n      this._cacheChildrenSize = _cacheChildrenSize;\n      this._cacheCells = null;\n    } else if (this.props.children !== nextProps.children || this.props.sortColumn !== nextProps.sortColumn || this.props.sortType !== nextProps.sortType) {\n      this._cacheCells = null;\n    }\n\n    return !eq(this.props, nextProps) || !isEqual(this.state, nextState);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var rowHeight = prevProps.rowHeight,\n        data = prevProps.data,\n        height = prevProps.height;\n\n    if (data !== this.props.data) {\n      var _this$props$onDataUpd, _this$props14;\n\n      this.calculateRowMaxHeight();\n      (_this$props$onDataUpd = (_this$props14 = this.props).onDataUpdated) === null || _this$props$onDataUpd === void 0 ? void 0 : _this$props$onDataUpd.call(_this$props14, this.props.data, this.scrollTo);\n      var maxHeight = this.props.data.length * (typeof rowHeight === 'function' ? rowHeight(null) : rowHeight); // 当开启允许更新滚动条，或者滚动条位置大于表格的最大高度，则初始滚动条位置\n\n      if (this.props.shouldUpdateScroll || Math.abs(this.scrollY) > maxHeight) {\n        this.scrollTo({\n          x: 0,\n          y: 0\n        });\n      }\n    } else {\n      this.updatePosition();\n    }\n\n    if ( // 当 Table 的 data 发生变化，需要重新计算高度\n    data !== this.props.data || // 当 Table 的 height 属性发生变化，需要重新计算 Table 高度\n    height !== this.props.height || // 当 Table 内容区的高度发生变化需要重新计算\n    prevState.contentHeight !== this.state.contentHeight || // 当 expandedRowKeys 发生变化，需要重新计算 Table 高度，如果重算会导致滚动条不显示。\n    prevState.expandedRowKeys !== this.state.expandedRowKeys || prevProps.expandedRowKeys !== this.props.expandedRowKeys) {\n      this.calculateTableContextHeight(prevProps);\n    }\n\n    this.calculateTableContentWidth(prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var _this$wheelListener, _this$touchStartListe, _this$touchMoveListen, _this$scrollListener;\n\n    this.wheelHandler = null;\n\n    if (this.tableRef.current) {\n      unbindElementResize(this.tableRef.current);\n    }\n\n    (_this$wheelListener = this.wheelListener) === null || _this$wheelListener === void 0 ? void 0 : _this$wheelListener.off();\n    (_this$touchStartListe = this.touchStartListener) === null || _this$touchStartListe === void 0 ? void 0 : _this$touchStartListe.off();\n    (_this$touchMoveListen = this.touchMoveListener) === null || _this$touchMoveListen === void 0 ? void 0 : _this$touchMoveListen.off();\n    (_this$scrollListener = this.scrollListener) === null || _this$scrollListener === void 0 ? void 0 : _this$scrollListener.off();\n  };\n\n  _proto.getExpandedRowKeys = function getExpandedRowKeys() {\n    var expandedRowKeys = this.props.expandedRowKeys;\n    return typeof expandedRowKeys === 'undefined' ? this.state.expandedRowKeys : expandedRowKeys;\n  };\n\n  _proto.getSortType = function getSortType() {\n    var sortType = this.props.sortType;\n    return typeof sortType === 'undefined' ? this.state.sortType : sortType;\n  };\n\n  _proto.getScrollCellGroups = function getScrollCellGroups() {\n    var _this$tableRef$curren;\n\n    return (_this$tableRef$curren = this.tableRef.current) === null || _this$tableRef$curren === void 0 ? void 0 : _this$tableRef$curren.querySelectorAll(\".\" + this.addPrefix('cell-group-scroll'));\n  };\n\n  _proto.getFixedLeftCellGroups = function getFixedLeftCellGroups() {\n    var _this$tableRef$curren2;\n\n    return (_this$tableRef$curren2 = this.tableRef.current) === null || _this$tableRef$curren2 === void 0 ? void 0 : _this$tableRef$curren2.querySelectorAll(\".\" + this.addPrefix('cell-group-fixed-left'));\n  };\n\n  _proto.getFixedRightCellGroups = function getFixedRightCellGroups() {\n    var _this$tableRef$curren3;\n\n    return (_this$tableRef$curren3 = this.tableRef.current) === null || _this$tableRef$curren3 === void 0 ? void 0 : _this$tableRef$curren3.querySelectorAll(\".\" + this.addPrefix('cell-group-fixed-right'));\n  };\n\n  _proto.isRTL = function isRTL() {\n    return this.props.rtl || _isRTL();\n  };\n\n  _proto.getRowHeight = function getRowHeight(rowData) {\n    if (rowData === void 0) {\n      rowData = {};\n    }\n\n    var rowHeight = this.props.rowHeight;\n    return typeof rowHeight === 'function' ? rowHeight(rowData) : rowHeight;\n  }\n  /**\n   * 获取表头高度\n   */\n  ;\n\n  _proto.getTableHeaderHeight = function getTableHeaderHeight() {\n    var _this$props15 = this.props,\n        headerHeight = _this$props15.headerHeight,\n        showHeader = _this$props15.showHeader;\n    return showHeader ? headerHeight : 0;\n  }\n  /**\n   * 获取 Table 需要渲染的高度\n   */\n  ;\n\n  _proto.getTableHeight = function getTableHeight() {\n    var contentHeight = this.state.contentHeight;\n    var _this$props16 = this.props,\n        minHeight = _this$props16.minHeight,\n        height = _this$props16.height,\n        autoHeight = _this$props16.autoHeight,\n        data = _this$props16.data;\n    var headerHeight = this.getTableHeaderHeight();\n\n    if (data.length === 0 && autoHeight) {\n      return height;\n    }\n\n    return autoHeight ? Math.max(headerHeight + contentHeight, minHeight) : height;\n  }\n  /**\n   * 获取 columns ReactElement 数组\n   * - 处理 children 中存在 <Column> 数组的情况\n   * - 过滤 children 中的空项\n   */\n  ;\n\n  _proto.getTableColumns = function getTableColumns() {\n    var children = this.props.children;\n\n    if (!Array.isArray(children)) {\n      return children;\n    }\n\n    var flattenColumns = flatten(children).map(function (column) {\n      if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n        var _column$props = column === null || column === void 0 ? void 0 : column.props,\n            header = _column$props.header,\n            childColumns = _column$props.children,\n            align = _column$props.align,\n            fixed = _column$props.fixed,\n            verticalAlign = _column$props.verticalAlign;\n\n        return childColumns.map(function (childColumn, index) {\n          // 把 ColumnGroup 设置的属性覆盖到 Column\n          var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n            align: align,\n            fixed: fixed,\n            verticalAlign: verticalAlign\n          });\n          /**\n           * 为分组中的第一列设置属性:\n           * groupCount: 分组子项个数\n           * groupHeader: 分组标题\n           * resizable: 设置为不可自定义列宽\n           */\n\n\n          if (index === 0) {\n            groupCellProps.groupCount = childColumns.length;\n            groupCellProps.groupHeader = header;\n            groupCellProps.resizable = false;\n          }\n\n          return (\n            /*#__PURE__*/\n            React.cloneElement(childColumn, groupCellProps)\n          );\n        });\n      }\n\n      return column;\n    }); // 把 Columns 中的数组，展平为一维数组，计算 lastColumn 与 firstColumn。\n\n    return flatten(flattenColumns).filter(function (col) {\n      return col;\n    });\n  };\n\n  _proto.getCellDescriptor = function getCellDescriptor() {\n    var _this2 = this;\n\n    if (this._cacheCells) {\n      return this._cacheCells;\n    }\n\n    var hasCustomTreeCol = false;\n    var left = 0; // Cell left margin\n\n    var headerCells = []; // Table header cell\n\n    var bodyCells = []; // Table body cell\n\n    var children = this.props.children;\n\n    if (!children) {\n      this._cacheCells = {\n        headerCells: headerCells,\n        bodyCells: bodyCells,\n        hasCustomTreeCol: hasCustomTreeCol,\n        allColumnsWidth: left\n      };\n      return this._cacheCells;\n    }\n\n    var columns = this.getTableColumns();\n    var tableWidth = this.state.width;\n    var _this$props17 = this.props,\n        sortColumn = _this$props17.sortColumn,\n        rowHeight = _this$props17.rowHeight,\n        showHeader = _this$props17.showHeader;\n\n    var _getTotalByColumns = getTotalByColumns(columns),\n        totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n        totalWidth = _getTotalByColumns.totalWidth;\n\n    var headerHeight = this.getTableHeaderHeight();\n    React.Children.forEach(columns, function (column, index) {\n      if (\n      /*#__PURE__*/\n      React.isValidElement(column)) {\n        var columnChildren = column.props.children;\n        var _column$props2 = column.props,\n            width = _column$props2.width,\n            resizable = _column$props2.resizable,\n            flexGrow = _column$props2.flexGrow,\n            minWidth = _column$props2.minWidth,\n            onResize = _column$props2.onResize,\n            treeCol = _column$props2.treeCol;\n\n        if (treeCol) {\n          hasCustomTreeCol = true;\n        }\n\n        if (resizable && flexGrow) {\n          console.warn(\"Cannot set 'resizable' and 'flexGrow' together in <Column>, column index: \" + index);\n        }\n\n        if (columnChildren.length !== 2) {\n          throw new Error(\"Component <HeaderCell> and <Cell> is required, column index: \" + index + \" \");\n        }\n\n        var nextWidth = _this2.state[columnChildren[1].props.dataKey + \"_\" + index + \"_width\"] || width || 0;\n\n        if (tableWidth && flexGrow && totalFlexGrow) {\n          nextWidth = Math.max((tableWidth - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n        }\n\n        var cellProps = _extends({}, omit(column.props, ['children']), {\n          'aria-colindex': index + 1,\n          left: left,\n          headerHeight: headerHeight,\n          key: index,\n          width: nextWidth,\n          height: rowHeight,\n          firstColumn: index === 0,\n          lastColumn: index === columns.length - 1\n        });\n\n        if (showHeader && headerHeight) {\n          var headerCellProps = {\n            // index 用于拖拽列宽时候（Resizable column），定义的序号\n            index: index,\n            dataKey: columnChildren[1].props.dataKey,\n            isHeaderCell: true,\n            sortable: column.props.sortable,\n            onSortColumn: _this2.handleSortColumn,\n            sortType: _this2.getSortType(),\n            sortColumn: sortColumn,\n            flexGrow: flexGrow\n          };\n\n          if (resizable) {\n            merge(headerCellProps, {\n              onResize: onResize,\n              onColumnResizeEnd: _this2.handleColumnResizeEnd,\n              onColumnResizeStart: _this2.handleColumnResizeStart,\n              onColumnResizeMove: _this2.handleColumnResizeMove\n            });\n          }\n\n          headerCells.push(\n          /*#__PURE__*/\n          React.cloneElement(columnChildren[0], _extends({}, cellProps, headerCellProps)));\n        }\n\n        bodyCells.push(\n        /*#__PURE__*/\n        React.cloneElement(columnChildren[1], cellProps));\n        left += nextWidth;\n      }\n    });\n    return this._cacheCells = {\n      headerCells: headerCells,\n      bodyCells: bodyCells,\n      allColumnsWidth: left,\n      hasCustomTreeCol: hasCustomTreeCol\n    };\n  };\n\n  _proto.initPosition = function initPosition() {\n    var _this3 = this;\n\n    if (this.isRTL()) {\n      setTimeout(function () {\n        var _this3$scrollbarXRef, _this3$scrollbarXRef$, _this3$scrollbarXRef$2;\n\n        var _this3$state = _this3.state,\n            contentWidth = _this3$state.contentWidth,\n            width = _this3$state.width;\n        _this3.scrollX = width - contentWidth - SCROLLBAR_WIDTH;\n\n        _this3.updatePosition();\n\n        (_this3$scrollbarXRef = _this3.scrollbarXRef) === null || _this3$scrollbarXRef === void 0 ? void 0 : (_this3$scrollbarXRef$ = _this3$scrollbarXRef.current) === null || _this3$scrollbarXRef$ === void 0 ? void 0 : (_this3$scrollbarXRef$2 = _this3$scrollbarXRef$.resetScrollBarPosition) === null || _this3$scrollbarXRef$2 === void 0 ? void 0 : _this3$scrollbarXRef$2.call(_this3$scrollbarXRef$, -_this3.scrollX);\n      }, 0);\n    }\n  };\n\n  _proto.updatePosition = function updatePosition() {\n    var _this$tableHeaderRef;\n    /**\n     * 当存在锁定列情况处理\n     */\n\n\n    if (this.state.shouldFixedColumn) {\n      this.updatePositionByFixedCell();\n    } else {\n      var _this$wheelWrapperRef, _this$headerWrapperRe2, _this$affixHeaderWrap, _affixHeaderElement$h;\n\n      var wheelStyle = {};\n      var headerStyle = {};\n      this.translateDOMPositionXY(wheelStyle, this.scrollX, this.scrollY);\n      this.translateDOMPositionXY(headerStyle, this.scrollX, 0);\n      var wheelElement = (_this$wheelWrapperRef = this.wheelWrapperRef) === null || _this$wheelWrapperRef === void 0 ? void 0 : _this$wheelWrapperRef.current;\n      var headerElement = (_this$headerWrapperRe2 = this.headerWrapperRef) === null || _this$headerWrapperRe2 === void 0 ? void 0 : _this$headerWrapperRe2.current;\n      var affixHeaderElement = (_this$affixHeaderWrap = this.affixHeaderWrapperRef) === null || _this$affixHeaderWrap === void 0 ? void 0 : _this$affixHeaderWrap.current;\n      wheelElement && addStyle(wheelElement, wheelStyle);\n      headerElement && addStyle(headerElement, headerStyle);\n\n      if (affixHeaderElement !== null && affixHeaderElement !== void 0 && (_affixHeaderElement$h = affixHeaderElement.hasChildNodes) !== null && _affixHeaderElement$h !== void 0 && _affixHeaderElement$h.call(affixHeaderElement)) {\n        addStyle(affixHeaderElement.firstChild, headerStyle);\n      }\n    }\n\n    if ((_this$tableHeaderRef = this.tableHeaderRef) !== null && _this$tableHeaderRef !== void 0 && _this$tableHeaderRef.current) {\n      toggleClass(this.tableHeaderRef.current, this.addPrefix('cell-group-shadow'), this.scrollY < 0);\n    }\n  };\n\n  _proto.updatePositionByFixedCell = function updatePositionByFixedCell() {\n    var _this$wheelWrapperRef2;\n\n    var wheelGroupStyle = {};\n    var wheelStyle = {};\n    var scrollGroups = this.getScrollCellGroups();\n    var fixedLeftGroups = this.getFixedLeftCellGroups();\n    var fixedRightGroups = this.getFixedRightCellGroups();\n    var _this$state4 = this.state,\n        contentWidth = _this$state4.contentWidth,\n        width = _this$state4.width;\n    this.translateDOMPositionXY(wheelGroupStyle, this.scrollX, 0);\n    this.translateDOMPositionXY(wheelStyle, 0, this.scrollY);\n    var scrollArrayGroups = Array.from(scrollGroups);\n\n    for (var i = 0; i < scrollArrayGroups.length; i++) {\n      var group = scrollArrayGroups[i];\n      addStyle(group, wheelGroupStyle);\n    }\n\n    if ((_this$wheelWrapperRef2 = this.wheelWrapperRef) !== null && _this$wheelWrapperRef2 !== void 0 && _this$wheelWrapperRef2.current) {\n      addStyle(this.wheelWrapperRef.current, wheelStyle);\n    }\n\n    var leftShadowClassName = this.addPrefix('cell-group-left-shadow');\n    var rightShadowClassName = this.addPrefix('cell-group-right-shadow');\n    var showLeftShadow = this.scrollX < 0;\n    var showRightShadow = width - contentWidth - SCROLLBAR_WIDTH !== this.scrollX;\n    toggleClass(fixedLeftGroups, leftShadowClassName, showLeftShadow);\n    toggleClass(fixedRightGroups, rightShadowClassName, showRightShadow);\n  };\n\n  _proto.shouldRenderExpandedRow = function shouldRenderExpandedRow(rowData) {\n    var _this$props18 = this.props,\n        rowKey = _this$props18.rowKey,\n        renderRowExpanded = _this$props18.renderRowExpanded,\n        isTree = _this$props18.isTree;\n    var expandedRowKeys = this.getExpandedRowKeys() || [];\n    return isFunction(renderRowExpanded) && !isTree && expandedRowKeys.some(function (key) {\n      return key === rowData[rowKey];\n    });\n  };\n\n  _proto.calculateRowMaxHeight = function calculateRowMaxHeight() {\n    var wordWrap = this.props.wordWrap;\n\n    if (wordWrap) {\n      var tableRowsMaxHeight = [];\n      var tableRows = Object.values(this.tableRows);\n\n      for (var i = 0; i < tableRows.length; i++) {\n        var _tableRows$i = tableRows[i],\n            row = _tableRows$i[0];\n\n        if (row) {\n          var cells = row.querySelectorAll(\".\" + this.addPrefix('cell-wrap')) || [];\n          var cellArray = Array.from(cells);\n          var maxHeight = 0;\n\n          for (var j = 0; j < cellArray.length; j++) {\n            var cell = cellArray[j];\n            var h = getHeight(cell);\n            maxHeight = Math.max(maxHeight, h);\n          }\n\n          tableRowsMaxHeight.push(maxHeight);\n        }\n      }\n\n      this.setState({\n        tableRowsMaxHeight: tableRowsMaxHeight\n      });\n    }\n  };\n\n  _proto.calculateTableContentWidth = function calculateTableContentWidth(prevProps) {\n    var _this$tableRef3;\n\n    var table = (_this$tableRef3 = this.tableRef) === null || _this$tableRef3 === void 0 ? void 0 : _this$tableRef3.current;\n    var row = table.querySelector(\".\" + this.addPrefix('row') + \":not(.virtualized)\");\n    var contentWidth = row ? getWidth(row) : 0;\n    this.setState({\n      contentWidth: contentWidth\n    }); // 这里 -SCROLLBAR_WIDTH 是为了让滚动条不挡住内容部分\n\n    this.minScrollX = -(contentWidth - this.state.width) - SCROLLBAR_WIDTH;\n    /**\n     * 1.判断 Table 列数是否发生变化\n     * 2.判断 Table 内容区域是否宽度有变化\n     *\n     * 满足 1 和 2 则更新横向滚动条位置\n     */\n\n    if (flatten(this.props.children).length !== flatten(prevProps.children).length && this.state.contentWidth !== contentWidth) {\n      this.scrollLeft(0);\n    }\n  };\n\n  _proto.calculateTableContextHeight = function calculateTableContextHeight(prevProps) {\n    var table = this.tableRef.current;\n    var rows = table.querySelectorAll(\".\" + this.addPrefix('row')) || [];\n    var _this$props19 = this.props,\n        height = _this$props19.height,\n        autoHeight = _this$props19.autoHeight,\n        rowHeight = _this$props19.rowHeight,\n        affixHeader = _this$props19.affixHeader;\n    var headerHeight = this.getTableHeaderHeight();\n    var contentHeight = rows.length ? Array.from(rows).map(function (row) {\n      return getHeight(row) || rowHeight;\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // 当设置 affixHeader 属性后要减掉两个 header 的高度\n\n    var nextContentHeight = contentHeight - (affixHeader ? headerHeight * 2 : headerHeight);\n\n    if (nextContentHeight !== this.state.contentHeight) {\n      this.setState({\n        contentHeight: nextContentHeight\n      });\n    }\n\n    if (prevProps && ( // 当 data 更新，或者表格高度更新，则更新滚动条\n    prevProps.height !== height || prevProps.data !== this.props.data) && this.scrollY !== 0) {\n      this.scrollTop(Math.abs(this.scrollY));\n      this.updatePosition();\n    }\n\n    if (!autoHeight) {\n      // 这里 -SCROLLBAR_WIDTH 是为了让滚动条不挡住内容部分\n      this.minScrollY = -(contentHeight - height) - SCROLLBAR_WIDTH;\n    } // 如果内容区域的高度小于表格的高度，则重置 Y 坐标滚动条\n\n\n    if (contentHeight < height) {\n      this.scrollTop(0);\n    } // 如果 scrollTop 的值大于可以滚动的范围 ，则重置 Y 坐标滚动条\n    // 当 Table 为 virtualized 时， wheel 事件触发每次都会进入该逻辑， 避免在滚动到底部后滚动条重置, +SCROLLBAR_WIDTH\n\n\n    if (Math.abs(this.scrollY) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      this.scrollTop(this.scrollY);\n    }\n  };\n\n  _proto.getControlledScrollTopValue = function getControlledScrollTopValue(value) {\n    if (this.props.autoHeight) {\n      return [0, 0];\n    }\n\n    var contentHeight = this.state.contentHeight;\n    var headerHeight = this.getTableHeaderHeight();\n    var height = this.getTableHeight(); // 滚动值的最大范围判断\n\n    value = Math.min(value, Math.max(0, contentHeight - (height - headerHeight))); // value 值是表格理论滚动位置的一个值，通过 value 计算出 scrollY 坐标值与滚动条位置的值\n\n    return [-value, value / contentHeight * (height - headerHeight)];\n  };\n\n  _proto.getControlledScrollLeftValue = function getControlledScrollLeftValue(value) {\n    var _this$state5 = this.state,\n        contentWidth = _this$state5.contentWidth,\n        width = _this$state5.width; // 滚动值的最大范围判断\n\n    value = Math.min(value, Math.max(0, contentWidth - width));\n    return [-value, value / contentWidth * width];\n  }\n  /**\n   * public method\n   */\n  ;\n\n  _proto.renderRowData = function renderRowData(bodyCells, rowData, props, shouldRenderExpandedRow) {\n    var _this$props20 = this.props,\n        renderTreeToggle = _this$props20.renderTreeToggle,\n        rowKey = _this$props20.rowKey,\n        wordWrap = _this$props20.wordWrap,\n        isTree = _this$props20.isTree;\n    var hasChildren = isTree && rowData.children && Array.isArray(rowData.children);\n    var nextRowKey = typeof rowData[rowKey] !== 'undefined' ? rowData[rowKey] : props.key;\n\n    var rowProps = _extends({}, props, {\n      key: nextRowKey,\n      'aria-rowindex': props.key + 2,\n      rowRef: this.bindTableRowsRef(props.key, rowData),\n      onClick: this.bindRowClick(rowData),\n      onContextMenu: this.bindRowContextMenu(rowData)\n    });\n\n    var expandedRowKeys = this.getExpandedRowKeys() || [];\n    var expanded = expandedRowKeys.some(function (key) {\n      return key === rowData[rowKey];\n    });\n    var cells = [];\n\n    for (var i = 0; i < bodyCells.length; i++) {\n      var cell = bodyCells[i];\n      cells.push(\n      /*#__PURE__*/\n      React.cloneElement(cell, {\n        hasChildren: hasChildren,\n        rowData: rowData,\n        wordWrap: wordWrap,\n        renderTreeToggle: renderTreeToggle,\n        height: props.height,\n        rowIndex: props.key,\n        depth: props.depth,\n        onTreeToggle: this.handleTreeToggle,\n        rowKey: nextRowKey,\n        expanded: expanded\n      }));\n    }\n\n    return this.renderRow(rowProps, cells, shouldRenderExpandedRow, rowData);\n  };\n\n  _proto.renderRow = function renderRow(props, cells, shouldRenderExpandedRow, rowData) {\n    var rowClassName = this.props.rowClassName;\n    var _this$state6 = this.state,\n        shouldFixedColumn = _this$state6.shouldFixedColumn,\n        width = _this$state6.width,\n        contentWidth = _this$state6.contentWidth;\n\n    var depth = props.depth,\n        restRowProps = _objectWithoutPropertiesLoose(props, [\"depth\"]);\n\n    if (typeof rowClassName === 'function') {\n      restRowProps.className = rowClassName(rowData);\n    } else {\n      restRowProps.className = rowClassName;\n    }\n\n    var rowStyles = {};\n    var rowRight = 0;\n\n    if (this.isRTL() && contentWidth > width) {\n      rowRight = width - contentWidth;\n      rowStyles.right = rowRight;\n    } // IF there are fixed columns, add a fixed group\n\n\n    if (shouldFixedColumn && contentWidth > width) {\n      var fixedLeftCells = [];\n      var fixedRightCells = [];\n      var scrollCells = [];\n      var fixedLeftCellGroupWidth = 0;\n      var fixedRightCellGroupWidth = 0;\n\n      for (var i = 0; i < cells.length; i++) {\n        var cell = cells[i];\n        var _cell$props = cell.props,\n            fixed = _cell$props.fixed,\n            _width2 = _cell$props.width;\n        var isFixedStart = fixed === 'left' || fixed === true;\n        var isFixedEnd = fixed === 'right';\n\n        if (this.isRTL()) {\n          isFixedStart = fixed === 'right';\n          isFixedEnd = fixed === 'left' || fixed === true;\n        }\n\n        if (isFixedStart) {\n          fixedLeftCells.push(cell);\n          fixedLeftCellGroupWidth += _width2;\n        } else if (isFixedEnd) {\n          fixedRightCells.push(cell);\n          fixedRightCellGroupWidth += _width2;\n        } else {\n          scrollCells.push(cell);\n        }\n      }\n\n      return (\n        /*#__PURE__*/\n        React.createElement(Row, _extends({}, restRowProps, {\n          \"data-depth\": depth,\n          style: rowStyles\n        }), fixedLeftCellGroupWidth ?\n        /*#__PURE__*/\n        React.createElement(CellGroup, {\n          fixed: \"left\",\n          height: props.isHeaderRow ? props.headerHeight : props.height,\n          width: fixedLeftCellGroupWidth,\n          style: this.isRTL() ? {\n            right: width - fixedLeftCellGroupWidth - rowRight\n          } : null\n        }, mergeCells(resetLeftForCells(fixedLeftCells))) : null,\n        /*#__PURE__*/\n        React.createElement(CellGroup, null, mergeCells(scrollCells)), fixedRightCellGroupWidth ?\n        /*#__PURE__*/\n        React.createElement(CellGroup, {\n          fixed: \"right\",\n          style: this.isRTL() ? {\n            right: 0 - rowRight\n          } : {\n            left: width - fixedRightCellGroupWidth - SCROLLBAR_WIDTH\n          },\n          height: props.isHeaderRow ? props.headerHeight : props.height,\n          width: fixedRightCellGroupWidth + SCROLLBAR_WIDTH\n        }, mergeCells(resetLeftForCells(fixedRightCells, SCROLLBAR_WIDTH))) : null, shouldRenderExpandedRow && this.renderRowExpanded(rowData))\n      );\n    }\n\n    return (\n      /*#__PURE__*/\n      React.createElement(Row, _extends({}, restRowProps, {\n        \"data-depth\": depth,\n        style: rowStyles\n      }),\n      /*#__PURE__*/\n      React.createElement(CellGroup, null, mergeCells(cells)), shouldRenderExpandedRow && this.renderRowExpanded(rowData))\n    );\n  };\n\n  _proto.renderRowExpanded = function renderRowExpanded(rowData) {\n    var _this$props21 = this.props,\n        renderRowExpanded = _this$props21.renderRowExpanded,\n        rowExpandedHeight = _this$props21.rowExpandedHeight;\n    var styles = {\n      height: rowExpandedHeight\n    };\n\n    if (typeof renderRowExpanded === 'function') {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: this.addPrefix('row-expanded'),\n          style: styles\n        }, renderRowExpanded(rowData))\n      );\n    }\n\n    return null;\n  };\n\n  _proto.renderMouseArea = function renderMouseArea() {\n    var headerHeight = this.getTableHeaderHeight();\n    var styles = {\n      height: this.getTableHeight()\n    };\n    var spanStyles = {\n      height: headerHeight - 1\n    };\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        ref: this.mouseAreaRef,\n        className: this.addPrefix('mouse-area'),\n        style: styles\n      },\n      /*#__PURE__*/\n      React.createElement(\"span\", {\n        style: spanStyles\n      }))\n    );\n  };\n\n  _proto.renderTableHeader = function renderTableHeader(headerCells, rowWidth) {\n    var affixHeader = this.props.affixHeader;\n    var tableWidth = this.state.width;\n    var top = typeof affixHeader === 'number' ? affixHeader : 0;\n    var headerHeight = this.getTableHeaderHeight();\n    var rowProps = {\n      'aria-rowindex': 1,\n      rowRef: this.tableHeaderRef,\n      width: rowWidth,\n      height: this.getRowHeight(),\n      headerHeight: headerHeight,\n      isHeaderRow: true,\n      top: 0\n    };\n    var fixedStyle = {\n      position: 'fixed',\n      overflow: 'hidden',\n      height: this.getTableHeaderHeight(),\n      width: tableWidth,\n      top: top\n    }; // Affix header\n\n    var header =\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: classNames(this.addPrefix('affix-header')),\n      style: fixedStyle,\n      ref: this.affixHeaderWrapperRef\n    }, this.renderRow(rowProps, headerCells));\n    return (\n      /*#__PURE__*/\n      React.createElement(React.Fragment, null, (affixHeader === 0 || affixHeader) && header,\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        role: \"rowgroup\",\n        className: this.addPrefix('header-row-wrapper'),\n        ref: this.headerWrapperRef\n      }, this.renderRow(rowProps, headerCells)))\n    );\n  };\n\n  _proto.renderTableBody = function renderTableBody(bodyCells, rowWidth) {\n    var _this$props22 = this.props,\n        rowExpandedHeight = _this$props22.rowExpandedHeight,\n        renderRowExpanded = _this$props22.renderRowExpanded,\n        isTree = _this$props22.isTree,\n        rowKey = _this$props22.rowKey,\n        wordWrap = _this$props22.wordWrap,\n        virtualized = _this$props22.virtualized,\n        rowHeight = _this$props22.rowHeight;\n    var headerHeight = this.getTableHeaderHeight();\n    var _this$state7 = this.state,\n        tableRowsMaxHeight = _this$state7.tableRowsMaxHeight,\n        isScrolling = _this$state7.isScrolling,\n        data = _this$state7.data;\n    var height = this.getTableHeight();\n    var bodyHeight = height - headerHeight;\n    var bodyStyles = {\n      top: headerHeight,\n      height: bodyHeight\n    };\n    var contentHeight = 0;\n    var topHideHeight = 0;\n    var bottomHideHeight = 0;\n    this._visibleRows = [];\n\n    if (data) {\n      var top = 0; // Row position\n\n      var minTop = Math.abs(this.scrollY);\n      var maxTop = minTop + height + rowExpandedHeight;\n      var isCustomRowHeight = typeof rowHeight === 'function';\n      var isUncertainHeight = !!(renderRowExpanded || isCustomRowHeight || isTree);\n      /**\n      如果开启了 virtualized  同时 Table 中的的行高是可变的，\n      则需要循环遍历 data, 获取每一行的高度。\n      */\n\n      if (isUncertainHeight && virtualized || !virtualized) {\n        for (var index = 0; index < data.length; index++) {\n          var rowData = data[index];\n          var maxHeight = tableRowsMaxHeight[index];\n          var shouldRenderExpandedRow = this.shouldRenderExpandedRow(rowData);\n          var nextRowHeight = 0;\n          var depth = 0;\n\n          if (typeof rowHeight === 'function') {\n            nextRowHeight = rowHeight(rowData);\n          } else {\n            nextRowHeight = maxHeight ? Math.max(maxHeight + CELL_PADDING_HEIGHT, rowHeight) : rowHeight;\n\n            if (shouldRenderExpandedRow) {\n              nextRowHeight += rowExpandedHeight;\n            }\n          }\n\n          if (isTree) {\n            var parents = findAllParents(rowData, rowKey);\n            var expandedRowKeys = this.getExpandedRowKeys();\n            depth = parents.length; //  如果是 Tree Table,  判断当前的行是否展开/折叠，如果是折叠则不显示该行。\n\n            if (!shouldShowRowByExpanded(expandedRowKeys, parents)) {\n              continue;\n            }\n          }\n\n          contentHeight += nextRowHeight;\n          var rowProps = {\n            key: index,\n            top: top,\n            width: rowWidth,\n            depth: depth,\n            height: nextRowHeight\n          };\n          top += nextRowHeight;\n\n          if (virtualized && !wordWrap) {\n            if (top + nextRowHeight < minTop) {\n              topHideHeight += nextRowHeight;\n              continue;\n            } else if (top > maxTop) {\n              bottomHideHeight += nextRowHeight;\n              continue;\n            }\n          }\n\n          this._visibleRows.push(this.renderRowData(bodyCells, rowData, rowProps, shouldRenderExpandedRow));\n        }\n      } else {\n        /**\n        如果 Table 的行高是固定的，则直接通过行高与行数进行计算，\n        减少遍历所有 data 带来的性能消耗\n        */\n        var _nextRowHeight = this.getRowHeight();\n\n        var startIndex = Math.max(Math.floor(minTop / _nextRowHeight), 0);\n        var endIndex = Math.min(startIndex + Math.ceil(bodyHeight / _nextRowHeight), data.length);\n        contentHeight = data.length * _nextRowHeight;\n        topHideHeight = startIndex * _nextRowHeight;\n        bottomHideHeight = (data.length - endIndex) * _nextRowHeight;\n\n        for (var _index = startIndex; _index < endIndex; _index++) {\n          var _rowData = data[_index];\n          var _rowProps = {\n            key: _index,\n            top: _index * _nextRowHeight,\n            width: rowWidth,\n            height: _nextRowHeight\n          };\n\n          this._visibleRows.push(this.renderRowData(bodyCells, _rowData, _rowProps, false));\n        }\n      }\n    }\n\n    var wheelStyles = {\n      position: 'absolute',\n      height: contentHeight,\n      minHeight: height,\n      pointerEvents: isScrolling ? 'none' : undefined\n    };\n    var topRowStyles = {\n      height: topHideHeight\n    };\n    var bottomRowStyles = {\n      height: bottomHideHeight\n    };\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        ref: this.tableBodyRef,\n        role: \"rowgroup\",\n        className: this.addPrefix('body-row-wrapper'),\n        style: bodyStyles,\n        onScroll: this.handleBodyScroll\n      },\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        style: wheelStyles,\n        className: this.addPrefix('body-wheel-area'),\n        ref: this.wheelWrapperRef\n      }, topHideHeight ?\n      /*#__PURE__*/\n      React.createElement(Row, {\n        style: topRowStyles,\n        className: \"virtualized\"\n      }) : null, this._visibleRows, bottomHideHeight ?\n      /*#__PURE__*/\n      React.createElement(Row, {\n        style: bottomRowStyles,\n        className: \"virtualized\"\n      }) : null), this.renderInfo(), this.renderScrollbar(), this.renderLoading())\n    );\n  };\n\n  _proto.renderInfo = function renderInfo() {\n    var _this$props23 = this.props,\n        locale = _this$props23.locale,\n        renderEmpty = _this$props23.renderEmpty,\n        loading = _this$props23.loading;\n\n    if (this._visibleRows.length || loading) {\n      return null;\n    }\n\n    var emptyMessage =\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: this.addPrefix('body-info')\n    }, locale.emptyMessage);\n    return renderEmpty ? renderEmpty(emptyMessage) : emptyMessage;\n  };\n\n  _proto.renderScrollbar = function renderScrollbar() {\n    var _this$props24 = this.props,\n        disabledScroll = _this$props24.disabledScroll,\n        affixHorizontalScrollbar = _this$props24.affixHorizontalScrollbar,\n        id = _this$props24.id;\n    var _this$state8 = this.state,\n        contentWidth = _this$state8.contentWidth,\n        contentHeight = _this$state8.contentHeight,\n        width = _this$state8.width,\n        fixedHorizontalScrollbar = _this$state8.fixedHorizontalScrollbar;\n    var bottom = typeof affixHorizontalScrollbar === 'number' ? affixHorizontalScrollbar : 0;\n    var headerHeight = this.getTableHeaderHeight();\n    var height = this.getTableHeight();\n\n    if (disabledScroll) {\n      return null;\n    }\n\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", null,\n      /*#__PURE__*/\n      React.createElement(Scrollbar, {\n        tableId: id,\n        className: classNames({\n          fixed: fixedHorizontalScrollbar\n        }),\n        style: {\n          width: width,\n          bottom: fixedHorizontalScrollbar ? bottom : undefined\n        },\n        length: this.state.width,\n        onScroll: this.handleScrollX,\n        scrollLength: contentWidth,\n        ref: this.scrollbarXRef\n      }),\n      /*#__PURE__*/\n      React.createElement(Scrollbar, {\n        vertical: true,\n        tableId: id,\n        length: height - headerHeight,\n        scrollLength: contentHeight,\n        onScroll: this.handleScrollY,\n        ref: this.scrollbarYRef\n      }))\n    );\n  }\n  /**\n   *  show loading\n   */\n  ;\n\n  _proto.renderLoading = function renderLoading() {\n    var _this$props25 = this.props,\n        locale = _this$props25.locale,\n        loading = _this$props25.loading,\n        loadAnimation = _this$props25.loadAnimation,\n        renderLoading = _this$props25.renderLoading;\n\n    if (!loadAnimation && !loading) {\n      return null;\n    }\n\n    var loadingElement =\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: this.addPrefix('loader-wrapper')\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: this.addPrefix('loader')\n    },\n    /*#__PURE__*/\n    React.createElement(\"i\", {\n      className: this.addPrefix('loader-icon')\n    }),\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: this.addPrefix('loader-text')\n    }, locale.loading)));\n    return renderLoading ? renderLoading(loadingElement) : loadingElement;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props26 = this.props,\n        children = _this$props26.children,\n        className = _this$props26.className,\n        data = _this$props26.data,\n        _this$props26$width = _this$props26.width,\n        width = _this$props26$width === void 0 ? 0 : _this$props26$width,\n        style = _this$props26.style,\n        isTree = _this$props26.isTree,\n        hover = _this$props26.hover,\n        bordered = _this$props26.bordered,\n        cellBordered = _this$props26.cellBordered,\n        wordWrap = _this$props26.wordWrap,\n        classPrefix = _this$props26.classPrefix,\n        loading = _this$props26.loading,\n        showHeader = _this$props26.showHeader,\n        rest = _objectWithoutPropertiesLoose(_this$props26, [\"children\", \"className\", \"data\", \"width\", \"style\", \"isTree\", \"hover\", \"bordered\", \"cellBordered\", \"wordWrap\", \"classPrefix\", \"loading\", \"showHeader\"]);\n\n    var isColumnResizing = this.state.isColumnResizing;\n\n    var _this$getCellDescript = this.getCellDescriptor(),\n        headerCells = _this$getCellDescript.headerCells,\n        bodyCells = _this$getCellDescript.bodyCells,\n        allColumnsWidth = _this$getCellDescript.allColumnsWidth,\n        hasCustomTreeCol = _this$getCellDescript.hasCustomTreeCol;\n\n    var rowWidth = allColumnsWidth > width ? allColumnsWidth : width;\n    var clesses = classNames(classPrefix, className, (_classNames = {}, _classNames[this.addPrefix('word-wrap')] = wordWrap, _classNames[this.addPrefix('treetable')] = isTree, _classNames[this.addPrefix('bordered')] = bordered, _classNames[this.addPrefix('cell-bordered')] = cellBordered, _classNames[this.addPrefix('column-resizing')] = isColumnResizing, _classNames[this.addPrefix('hover')] = hover, _classNames[this.addPrefix('loading')] = loading, _classNames));\n\n    var styles = _extends({\n      width: width || 'auto',\n      height: this.getTableHeight()\n    }, style);\n\n    var unhandled = getUnhandledProps(propTypes, rest);\n    return (\n      /*#__PURE__*/\n      React.createElement(TableContext.Provider, {\n        value: {\n          translateDOMPositionXY: this.translateDOMPositionXY,\n          rtl: this.isRTL(),\n          isTree: isTree,\n          hasCustomTreeCol: hasCustomTreeCol\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(\"div\", _extends({\n        role: isTree ? 'treegrid' : 'grid' // The aria-rowcount is specified on the element with the table.\n        // Its value is an integer equal to the total number of rows available, including header rows.\n        ,\n        \"aria-rowcount\": data.length + 1,\n        \"aria-colcount\": this._cacheChildrenSize\n      }, unhandled, {\n        className: clesses,\n        style: styles,\n        ref: this.tableRef\n      }), showHeader && this.renderTableHeader(headerCells, rowWidth), children && this.renderTableBody(bodyCells, rowWidth), showHeader && this.renderMouseArea()))\n    );\n  };\n\n  return Table;\n}(React.Component);\n\nTable.propTypes = propTypes;\nTable.defaultProps = {\n  classPrefix: defaultClassPrefix('table'),\n  data: [],\n  defaultSortType: SORT_TYPE.DESC,\n  height: 200,\n  rowHeight: 46,\n  headerHeight: 40,\n  minHeight: 0,\n  rowExpandedHeight: 100,\n  hover: true,\n  showHeader: true,\n  rowKey: 'key',\n  translate3d: true,\n  shouldUpdateScroll: true,\n  locale: {\n    emptyMessage: 'No data found',\n    loading: 'Loading...'\n  }\n};\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}