{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isNil from \"lodash/isNil\";\nimport _isFunction from \"lodash/isFunction\";\nimport _omit from \"lodash/omit\";\nimport _pick from \"lodash/pick\";\nimport _remove from \"lodash/remove\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _clone from \"lodash/clone\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from '../utils/shallowEqual';\nimport { filterNodesOfTree } from '../utils/treeUtils';\nimport { defaultProps, prefix, getUnhandledProps, createChainedFunction, getDataGroupBy, mergeRefs } from '../utils';\nimport IntlContext from '../IntlProvider/IntlContext';\nimport FormattedMessage from '../IntlProvider/FormattedMessage';\nimport { DropdownMenuCheckItem as DropdownMenuItem, PickerToggle, getToggleWrapperClassName, onMenuKeyDown, MenuWrapper, SearchBar, SelectedElement, PickerToggleTrigger, shouldDisplay as _shouldDisplay } from '../Picker';\nimport DropdownMenu, { dropdownMenuPropTypes } from '../Picker/DropdownMenu';\nimport { listPickerPropTypes, listPickerDefaultProps } from '../Picker/propTypes';\n\nvar CheckPicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(CheckPicker, _React$Component);\n\n  function CheckPicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.positionRef = void 0;\n    _this.menuContainerRef = void 0;\n    _this.toggleRef = void 0;\n    _this.triggerRef = void 0;\n\n    _this.getFocusableMenuItems = function () {\n      var menuItems = _this.menuContainerRef.current.menuItems;\n\n      if (!menuItems) {\n        return [];\n      }\n\n      var items = Object.values(menuItems).map(function (item) {\n        return item.props.getItemData();\n      });\n      return filterNodesOfTree(items, function (item) {\n        return _this.shouldDisplay(item);\n      });\n    };\n\n    _this.setStickyItems = function () {\n      var _this$props = _this.props,\n          sticky = _this$props.sticky,\n          data = _this$props.data,\n          valueKey = _this$props.valueKey;\n\n      var value = _this.getValue();\n\n      if (!sticky) {\n        return;\n      }\n\n      var stickyItems = [];\n\n      if (data && value.length) {\n        stickyItems = data.filter(function (item) {\n          return value.some(function (v) {\n            return v === item[valueKey];\n          });\n        });\n      }\n\n      _this.setState({\n        stickyItems: stickyItems\n      });\n    };\n\n    _this.focusNextMenuItem = function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index + 1];\n\n        if (!_isUndefined(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    };\n\n    _this.focusPrevMenuItem = function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index - 1];\n\n        if (!_isUndefined(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    };\n\n    _this.selectFocusMenuItem = function (event) {\n      var value = _this.getValue();\n\n      var _this$props2 = _this.props,\n          data = _this$props2.data,\n          valueKey = _this$props2.valueKey;\n      var focusItemValue = _this.state.focusItemValue;\n\n      if (!focusItemValue) {\n        return;\n      }\n\n      if (!value.some(function (v) {\n        return shallowEqual(v, focusItemValue);\n      })) {\n        value.push(focusItemValue);\n      } else {\n        _remove(value, function (itemVal) {\n          return shallowEqual(itemVal, focusItemValue);\n        });\n      }\n\n      var focusItem = data.find(function (item) {\n        return shallowEqual(item === null || item === void 0 ? void 0 : item[valueKey], focusItemValue);\n      });\n\n      _this.setState({\n        value: value\n      });\n\n      _this.handleSelect(value, focusItem, event);\n\n      _this.handleChangeValue(value, event);\n    };\n\n    _this.handleKeyDown = function (event) {\n      var _this$toggleRef, _this$toggleRef$curre, _this$toggleRef$curre2;\n\n      var _this$state = _this.state,\n          focusItemValue = _this$state.focusItemValue,\n          active = _this$state.active; // enter\n\n      if ((!focusItemValue || !active) && event.keyCode === 13) {\n        _this.handleToggleDropdown();\n      } // delete\n\n\n      if (event.keyCode === 8 && event.target === ((_this$toggleRef = _this.toggleRef) === null || _this$toggleRef === void 0 ? void 0 : (_this$toggleRef$curre = _this$toggleRef.current) === null || _this$toggleRef$curre === void 0 ? void 0 : (_this$toggleRef$curre2 = _this$toggleRef$curre.getToggleNode) === null || _this$toggleRef$curre2 === void 0 ? void 0 : _this$toggleRef$curre2.call(_this$toggleRef$curre))) {\n        _this.handleClean(event);\n      }\n\n      if (!_this.menuContainerRef.current) {\n        return;\n      }\n\n      onMenuKeyDown(event, {\n        down: _this.focusNextMenuItem,\n        up: _this.focusPrevMenuItem,\n        enter: _this.selectFocusMenuItem,\n        esc: _this.handleCloseDropdown\n      });\n    };\n\n    _this.handleItemSelect = function (nextItemValue, item, event, checked) {\n      var value = _this.getValue();\n\n      if (checked) {\n        value.push(nextItemValue);\n      } else {\n        _remove(value, function (itemVal) {\n          return shallowEqual(itemVal, nextItemValue);\n        });\n      }\n\n      var nextState = {\n        value: value,\n        focusItemValue: nextItemValue\n      };\n\n      _this.setState(nextState);\n\n      _this.handleSelect(value, item, event);\n\n      _this.handleChangeValue(value, event);\n    };\n\n    _this.handleSelect = function (nextItemValue, item, event) {\n      var _this$props$onSelect, _this$props3;\n\n      (_this$props$onSelect = (_this$props3 = _this.props).onSelect) === null || _this$props$onSelect === void 0 ? void 0 : _this$props$onSelect.call(_this$props3, nextItemValue, item, event);\n    };\n\n    _this.handleChangeValue = function (value, event) {\n      var _this$props$onChange, _this$props4;\n\n      (_this$props$onChange = (_this$props4 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props4, value, event);\n    };\n\n    _this.handleSearch = function (searchKeyword, event) {\n      var _filteredData$;\n\n      var _this$props5 = _this.props,\n          onSearch = _this$props5.onSearch,\n          valueKey = _this$props5.valueKey,\n          data = _this$props5.data;\n      var filteredData = filterNodesOfTree(data, function (item) {\n        return _this.shouldDisplay(item, searchKeyword);\n      });\n\n      _this.setState({\n        searchKeyword: searchKeyword,\n        focusItemValue: filteredData === null || filteredData === void 0 ? void 0 : (_filteredData$ = filteredData[0]) === null || _filteredData$ === void 0 ? void 0 : _filteredData$[valueKey]\n      });\n\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchKeyword, event);\n    };\n\n    _this.handleCloseDropdown = function () {\n      var _this$triggerRef$curr, _this$triggerRef$curr2;\n\n      var value = _this.getValue();\n\n      (_this$triggerRef$curr = _this.triggerRef.current) === null || _this$triggerRef$curr === void 0 ? void 0 : (_this$triggerRef$curr2 = _this$triggerRef$curr.hide) === null || _this$triggerRef$curr2 === void 0 ? void 0 : _this$triggerRef$curr2.call(_this$triggerRef$curr);\n\n      _this.setState({\n        focusItemValue: value ? value[0] : undefined\n      });\n    };\n\n    _this.handleOpenDropdown = function () {\n      var _this$triggerRef$curr3, _this$triggerRef$curr4;\n\n      (_this$triggerRef$curr3 = _this.triggerRef.current) === null || _this$triggerRef$curr3 === void 0 ? void 0 : (_this$triggerRef$curr4 = _this$triggerRef$curr3.show) === null || _this$triggerRef$curr4 === void 0 ? void 0 : _this$triggerRef$curr4.call(_this$triggerRef$curr3);\n    };\n\n    _this.open = function () {\n      var _this$handleOpenDropd, _this2;\n\n      (_this$handleOpenDropd = (_this2 = _this).handleOpenDropdown) === null || _this$handleOpenDropd === void 0 ? void 0 : _this$handleOpenDropd.call(_this2);\n    };\n\n    _this.close = function () {\n      var _this$handleCloseDrop, _this3;\n\n      (_this$handleCloseDrop = (_this3 = _this).handleCloseDropdown) === null || _this$handleCloseDrop === void 0 ? void 0 : _this$handleCloseDrop.call(_this3);\n    };\n\n    _this.handleToggleDropdown = function () {\n      var active = _this.state.active;\n\n      if (active) {\n        _this.handleCloseDropdown();\n\n        return;\n      }\n\n      _this.handleOpenDropdown();\n    };\n\n    _this.handleClean = function (event) {\n      var _this$props6 = _this.props,\n          disabled = _this$props6.disabled,\n          cleanable = _this$props6.cleanable;\n\n      if (disabled || !cleanable) {\n        return;\n      }\n\n      _this.setState({\n        value: []\n      });\n\n      _this.handleChangeValue([], event);\n    };\n\n    _this.handleExit = function () {\n      var _this$props$onClose, _this$props7;\n\n      (_this$props$onClose = (_this$props7 = _this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props7);\n\n      _this.setState({\n        searchKeyword: '',\n        focusItemValue: null,\n        active: false\n      });\n    };\n\n    _this.handleOpen = function () {\n      var _this$props$onOpen, _this$props8;\n\n      (_this$props$onOpen = (_this$props8 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props8);\n\n      _this.setState({\n        active: true\n      });\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.menuContainer = {\n      menuItems: null\n    };\n\n    _this.getPositionInstance = function () {\n      return _this.positionRef.current;\n    };\n\n    _this.getToggleInstance = function () {\n      return _this.toggleRef.current;\n    };\n\n    var _value = props.value,\n        defaultValue = props.defaultValue,\n        groupBy = props.groupBy,\n        _valueKey = props.valueKey,\n        labelKey = props.labelKey;\n    var nextValue = _clone(_value || defaultValue) || [];\n    _this.state = {\n      value: nextValue,\n      // Used to hover the active item  when trigger `onKeydown`\n      focusItemValue: nextValue ? nextValue[0] : undefined,\n      searchKeyword: ''\n    };\n    _this.positionRef = React.createRef();\n    _this.menuContainerRef = React.createRef();\n    _this.toggleRef = React.createRef();\n    _this.triggerRef = React.createRef();\n\n    if (groupBy === _valueKey || groupBy === labelKey) {\n      throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n    }\n\n    return _this;\n  }\n\n  var _proto = CheckPicker.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    var nextValue = _isUndefined(value) ? this.state.value : value;\n    return _clone(nextValue) || [];\n  };\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n\n\n  _proto.shouldDisplay = function shouldDisplay(item, word) {\n    var _this$props9 = this.props,\n        labelKey = _this$props9.labelKey,\n        searchBy = _this$props9.searchBy;\n    var label = item === null || item === void 0 ? void 0 : item[labelKey];\n    var searchKeyword = typeof word === 'undefined' ? this.state.searchKeyword : word;\n\n    if (typeof searchBy === 'function') {\n      return searchBy(searchKeyword, label, item);\n    }\n\n    return _shouldDisplay(label, searchKeyword);\n  };\n\n  _proto.findNode = function findNode(focus) {\n    var items = this.getFocusableMenuItems();\n    var valueKey = this.props.valueKey;\n    var focusItemValue = this.state.focusItemValue;\n\n    for (var i = 0; i < items.length; i += 1) {\n      if (shallowEqual(focusItemValue, items[i][valueKey])) {\n        focus(items, i);\n        return;\n      }\n    }\n\n    focus(items, -1);\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this4 = this;\n\n    var _this$props10 = this.props,\n        data = _this$props10.data,\n        valueKey = _this$props10.valueKey,\n        groupBy = _this$props10.groupBy,\n        searchable = _this$props10.searchable,\n        renderExtraFooter = _this$props10.renderExtraFooter,\n        locale = _this$props10.locale,\n        renderMenu = _this$props10.renderMenu,\n        menuClassName = _this$props10.menuClassName,\n        menuStyle = _this$props10.menuStyle,\n        menuAutoWidth = _this$props10.menuAutoWidth,\n        sort = _this$props10.sort,\n        virtualized = _this$props10.virtualized;\n    var _this$state2 = this.state,\n        focusItemValue = _this$state2.focusItemValue,\n        stickyItems = _this$state2.stickyItems;\n    var classes = classNames(this.addPrefix('check-menu'), menuClassName);\n    var filteredData = [];\n    var filteredStickyItems = [];\n\n    if (stickyItems) {\n      filteredStickyItems = filterNodesOfTree(stickyItems, function (item) {\n        return _this4.shouldDisplay(item);\n      });\n      filteredData = filterNodesOfTree(data, function (item) {\n        return _this4.shouldDisplay(item) && !stickyItems.some(function (v) {\n          return v[valueKey] === item[valueKey];\n        });\n      });\n    } else {\n      filteredData = filterNodesOfTree(data, function (item) {\n        return _this4.shouldDisplay(item);\n      });\n    } // Create a tree structure data when set `groupBy`\n\n\n    if (groupBy) {\n      filteredData = getDataGroupBy(filteredData, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      filteredData = filteredData.sort(sort(false));\n    }\n\n    var menuProps = _pick(this.props, Object.keys(_omit(dropdownMenuPropTypes, ['className', 'style', 'classPrefix'])));\n\n    var menu = filteredData.length || filteredStickyItems.length ? React.createElement(DropdownMenu, _extends({}, menuProps, {\n      classPrefix: this.addPrefix('check-menu'),\n      dropdownMenuItemComponentClass: DropdownMenuItem,\n      ref: this.menuContainerRef,\n      activeItemValues: this.getValue(),\n      focusItemValue: focusItemValue,\n      data: [].concat(filteredStickyItems, filteredData),\n      group: !_isUndefined(groupBy),\n      onSelect: this.handleItemSelect,\n      virtualized: virtualized\n    })) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText);\n    return React.createElement(MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: menuStyle,\n      onKeyDown: this.handleKeyDown,\n      getToggleInstance: this.getToggleInstance,\n      getPositionInstance: this.getPositionInstance\n    }, searchable && React.createElement(SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: this.state.searchKeyword\n    }), renderMenu ? renderMenu(menu) : menu, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props11 = this.props,\n        data = _this$props11.data,\n        valueKey = _this$props11.valueKey,\n        labelKey = _this$props11.labelKey,\n        placeholder = _this$props11.placeholder,\n        renderValue = _this$props11.renderValue,\n        disabled = _this$props11.disabled,\n        cleanable = _this$props11.cleanable,\n        locale = _this$props11.locale,\n        toggleComponentClass = _this$props11.toggleComponentClass,\n        style = _this$props11.style,\n        onEnter = _this$props11.onEnter,\n        onEntered = _this$props11.onEntered,\n        onExited = _this$props11.onExited,\n        onClean = _this$props11.onClean,\n        countable = _this$props11.countable,\n        positionRef = _this$props11.positionRef,\n        rest = _objectWithoutPropertiesLoose(_this$props11, [\"data\", \"valueKey\", \"labelKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onEntered\", \"onExited\", \"onClean\", \"countable\", \"positionRef\"]);\n\n    var unhandled = getUnhandledProps(CheckPicker, rest);\n    var value = this.getValue();\n    var selectedItems = data.filter(function (item) {\n      return value.some(function (val) {\n        return shallowEqual(item[valueKey], val);\n      });\n    }) || [];\n    /**\n     * 1.Have a value and the value is valid.\n     * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n     */\n\n    var hasValue = selectedItems.length > 0 || (value === null || value === void 0 ? void 0 : value.length) > 0 && _isFunction(renderValue);\n\n    var selectedElement = placeholder;\n\n    if (selectedItems.length > 0) {\n      selectedElement = React.createElement(SelectedElement, {\n        selectedItems: selectedItems,\n        countable: countable,\n        valueKey: valueKey,\n        labelKey: labelKey,\n        prefix: this.addPrefix\n      });\n    }\n\n    if ((value === null || value === void 0 ? void 0 : value.length) > 0 && _isFunction(renderValue)) {\n      selectedElement = renderValue(value, selectedItems, selectedElement);\n\n      if (_isNil(selectedElement)) {\n        hasValue = false;\n      }\n    }\n\n    var classes = getToggleWrapperClassName('check', this.addPrefix, this.props, hasValue);\n    return React.createElement(IntlContext.Provider, {\n      value: locale\n    }, React.createElement(PickerToggleTrigger, {\n      pickerProps: this.props,\n      ref: this.triggerRef,\n      positionRef: mergeRefs(this.positionRef, positionRef),\n      onEnter: createChainedFunction(this.setStickyItems, onEnter),\n      onEntered: createChainedFunction(this.handleOpen, onEntered),\n      onExited: createChainedFunction(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, React.createElement(PickerToggle, _extends({}, unhandled, {\n      ref: this.toggleRef,\n      onClean: createChainedFunction(this.handleClean, onClean),\n      onKeyDown: this.handleKeyDown,\n      componentClass: toggleComponentClass,\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active,\n      \"aria-disabled\": disabled\n    }), selectedElement || React.createElement(FormattedMessage, {\n      id: \"placeholder\"\n    })))));\n  };\n\n  return CheckPicker;\n}(React.Component);\n\nCheckPicker.propTypes = _extends({}, listPickerPropTypes, {\n  menuAutoWidth: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  onSearch: PropTypes.func,\n  groupBy: PropTypes.any,\n  sort: PropTypes.func,\n  searchable: PropTypes.bool,\n  countable: PropTypes.bool,\n  sticky: PropTypes.bool,\n  virtualized: PropTypes.bool,\n  searchBy: PropTypes.func\n});\nCheckPicker.defaultProps = _extends({}, listPickerDefaultProps, {\n  maxHeight: 320,\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  },\n  searchable: true,\n  countable: true,\n  menuAutoWidth: true,\n  virtualized: true\n});\nexport default defaultProps({\n  classPrefix: 'picker'\n})(CheckPicker);","map":null,"metadata":{},"sourceType":"module"}