{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { prefix, getUnhandledProps, defaultProps } from '../utils';\nimport setYear from \"date-fns/set_year\";\nimport setMonth from \"date-fns/set_month\";\nimport composeFunctions from '../utils/composeFunctions';\n\nvar MonthDropdownItem =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(MonthDropdownItem, _React$PureComponent);\n\n  function MonthDropdownItem() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handleClick = function (event) {\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          month = _this$props.month,\n          year = _this$props.year,\n          date = _this$props.date,\n          disabled = _this$props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      if (year && month && date) {\n        var nextMonth = composeFunctions(function (d) {\n          return setYear(d, year);\n        }, function (d) {\n          return setMonth(d, month - 1);\n        })(date);\n        onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextMonth, event);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = MonthDropdownItem.prototype;\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        classPrefix = _this$props2.classPrefix,\n        month = _this$props2.month,\n        active = _this$props2.active,\n        disabled = _this$props2.disabled,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"className\", \"classPrefix\", \"month\", \"active\", \"disabled\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var unhandled = getUnhandledProps(MonthDropdownItem, rest);\n    var classes = classNames(classPrefix, className, (_classNames = {}, _classNames[addPrefix('active')] = active, _classNames.disabled = disabled, _classNames));\n    return React.createElement(\"div\", _extends({}, unhandled, {\n      className: classes,\n      onClick: this.handleClick,\n      key: month,\n      role: \"button\",\n      tabIndex: \"-1\"\n    }), React.createElement(\"span\", {\n      className: addPrefix('content')\n    }, month));\n  };\n\n  return MonthDropdownItem;\n}(React.PureComponent);\n\nMonthDropdownItem.propTypes = {\n  date: PropTypes.instanceOf(Date),\n  month: PropTypes.number,\n  year: PropTypes.number,\n  onSelect: PropTypes.func,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool\n};\nMonthDropdownItem.defaultProps = {\n  month: 0\n};\nvar enhance = defaultProps({\n  classPrefix: 'calendar-month-dropdown-cell'\n});\nexport default enhance(MonthDropdownItem);","map":null,"metadata":{},"sourceType":"module"}