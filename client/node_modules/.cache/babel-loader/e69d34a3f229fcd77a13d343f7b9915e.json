{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { setDisplayName } from 'recompose';\nimport classNames from 'classnames';\nimport { defaultProps, getUnhandledProps, prefix } from '../utils';\nimport ListContext from './ListContext';\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ListItem, _React$Component);\n\n  function ListItem() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.managerRef = void 0;\n    _this.listItemRef = React.createRef();\n\n    _this.register = function () {\n      var _this$props = _this.props,\n          collection = _this$props.collection,\n          disabled = _this$props.disabled,\n          index = _this$props.index,\n          manager = _this$props.manager;\n\n      if (manager) {\n        _this.managerRef = {\n          node: _this.listItemRef.current,\n          edgeOffset: null,\n          info: {\n            collection: collection,\n            disabled: disabled,\n            index: index,\n            manager: manager\n          }\n        };\n        manager.add(collection, _this.managerRef);\n      }\n    };\n\n    _this.unregister = function (collection) {\n      if (collection === void 0) {\n        collection = _this.props.collection;\n      }\n\n      var manager = _this.props.manager;\n\n      if (manager) {\n        manager.remove(collection, _this.managerRef);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = ListItem.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.register();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    this.managerRef.info.index = this.props.index;\n    this.managerRef.info.disabled = this.props.disabled;\n\n    if (prevProps.collection !== this.props.collection) {\n      this.unregister(prevProps.collection);\n      this.register();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unregister();\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        classPrefix = _this$props2.classPrefix,\n        bordered = _this$props2.bordered,\n        disabled = _this$props2.disabled,\n        children = _this$props2.children,\n        size = _this$props2.size,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"className\", \"classPrefix\", \"bordered\", \"disabled\", \"children\", \"size\"]);\n\n    var addPrefix = prefix(classPrefix);\n    var unhandled = getUnhandledProps(ListItem, rest);\n    var classes = classNames(classPrefix, className, addPrefix(size), (_classNames = {}, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix('bordered')] = bordered, _classNames));\n    var itemContent = React.createElement(\"div\", {\n      className: addPrefix('content')\n    }, children);\n    return React.createElement(\"div\", _extends({\n      ref: this.listItemRef,\n      className: classes\n    }, unhandled), itemContent);\n  };\n\n  return ListItem;\n}(React.Component);\n\nListItem.defaultProps = {\n  collection: 0\n};\nListItem.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  index: PropTypes.number,\n  collection: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  disabled: PropTypes.bool,\n  manager: PropTypes.object\n};\nvar EnhancedListItem = defaultProps({\n  classPrefix: 'list-item'\n})(ListItem);\nvar Component = setDisplayName('ListItem')(EnhancedListItem);\n\nvar WithContextListItem = function WithContextListItem(props) {\n  return React.createElement(ListContext.Consumer, null, function (context) {\n    return React.createElement(Component, _extends({}, props, context));\n  });\n};\n\nexport default WithContextListItem;","map":null,"metadata":{},"sourceType":"module"}