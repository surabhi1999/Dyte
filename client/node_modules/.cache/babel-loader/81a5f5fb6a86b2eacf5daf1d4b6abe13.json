{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport BaseOverlay from './BaseOverlay';\nimport Fade from '../Animation/Fade';\nimport refType from '../utils/refType';\n\nvar Overlay = function Overlay(_ref) {\n  var _ref$animation = _ref.animation,\n      animation = _ref$animation === void 0 ? true : _ref$animation,\n      children = _ref.children,\n      _ref$transition = _ref.transition,\n      transition = _ref$transition === void 0 ? Fade : _ref$transition,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"animation\", \"children\", \"transition\"]);\n\n  var child = children;\n\n  if (!animation) {\n    transition = undefined;\n  }\n\n  if (!transition) {\n    child = React.Children.only(child);\n    child = React.cloneElement(child, {\n      className: classNames('in', child.props.className)\n    });\n  }\n\n  return React.createElement(BaseOverlay, _extends({}, rest, {\n    transition: transition\n  }), child);\n};\n\nOverlay.propTypes = {\n  animation: PropTypes.bool,\n  container: PropTypes.any,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  onRendered: PropTypes.func,\n  className: PropTypes.string,\n  containerPadding: PropTypes.number,\n  placement: PropTypes.string,\n  shouldUpdatePosition: PropTypes.bool,\n  preventOverflow: PropTypes.bool,\n  show: PropTypes.bool,\n  rootClose: PropTypes.bool,\n  transition: PropTypes.elementType,\n  positionRef: refType,\n  target: PropTypes.func,\n  onHide: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n};\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}