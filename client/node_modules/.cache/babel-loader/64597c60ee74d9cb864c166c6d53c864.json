{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Transition from '../Animation/Transition';\nimport { getOffset, on } from 'dom-lib';\nimport { defaultProps, getUnhandledProps, prefix } from '../utils';\n\nvar Ripple =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Ripple, _React$Component);\n\n  function Ripple(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.triggerRef = void 0;\n    _this.mousedownListener = null;\n\n    _this.getPosition = function (event) {\n      var offset = getOffset(_this.triggerRef.current);\n      var offsetX = (event.pageX || 0) - offset.left;\n      var offsetY = (event.pageY || 0) - offset.top;\n      var radiusX = Math.max(offset.width - offsetX, offsetX);\n      var radiusY = Math.max(offset.height - offsetY, offsetY);\n      var radius = Math.sqrt(Math.pow(radiusX, 2) + Math.pow(radiusY, 2));\n      return {\n        width: radius * 2,\n        height: radius * 2,\n        left: offsetX - radius,\n        top: offsetY - radius\n      };\n    };\n\n    _this.handleMouseDown = function (event) {\n      var position = _this.getPosition(event);\n\n      var onMouseDown = _this.props.onMouseDown;\n\n      _this.setState({\n        rippling: true,\n        position: position\n      });\n\n      onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(position, event);\n    };\n\n    _this.handleRippled = function () {\n      _this.setState({\n        rippling: false\n      });\n    };\n\n    _this.addPrefix = function (name) {\n      return prefix(_this.props.classPrefix)(name);\n    };\n\n    _this.state = {\n      rippling: false,\n      position: {}\n    };\n    _this.triggerRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = Ripple.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.triggerRef.current) {\n      this.mousedownListener = on(this.triggerRef.current.parentNode, 'mousedown', this.handleMouseDown);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.mousedownListener) {\n      this.mousedownListener.off();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        classPrefix = _this$props.classPrefix,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"classPrefix\"]);\n\n    var classes = classNames(this.addPrefix('pond'), className);\n    var _this$state = this.state,\n        position = _this$state.position,\n        rippling = _this$state.rippling;\n    var unhandled = getUnhandledProps(Ripple, rest);\n    return React.createElement(\"span\", _extends({}, unhandled, {\n      className: classes,\n      ref: this.triggerRef\n    }), React.createElement(Transition, {\n      in: rippling,\n      enteringClassName: this.addPrefix('rippling'),\n      onEntered: this.handleRippled\n    }, function (props, ref) {\n      var className = props.className,\n          transitionRest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n      return React.createElement(\"span\", _extends({}, transitionRest, {\n        ref: ref,\n        className: classNames(classPrefix, className),\n        style: position\n      }));\n    }));\n  };\n\n  return Ripple;\n}(React.Component);\n\nRipple.propTypes = {\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  onMouseDown: PropTypes.func\n};\nexport default defaultProps({\n  classPrefix: 'ripple'\n})(Ripple);","map":null,"metadata":{},"sourceType":"module"}