{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction isEmpty(value) {\n  return typeof value === 'undefined' || value === null || value === '';\n}\n\nfunction basicEmptyCheck(value) {\n  return typeof value === 'undefined' || value === null;\n}\n\nfunction checkRequired(value, trim, emptyAllowed) {\n  // String trim\n  if (trim && typeof value === 'string') {\n    value = value.replace(/(^\\s*)|(\\s*$)/g, '');\n  }\n\n  if (emptyAllowed) {\n    return !basicEmptyCheck(value);\n  } // Array\n\n\n  if (Array.isArray(value)) {\n    return !!value.length;\n  }\n\n  return !isEmpty(value);\n}\n\nfunction createValidator(data) {\n  return function (value, rules) {\n    for (var i = 0; i < rules.length; i += 1) {\n      var _rules$i = rules[i],\n          onValid = _rules$i.onValid,\n          errorMessage = _rules$i.errorMessage;\n      var checkResult = onValid(value, data);\n\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: errorMessage\n        };\n      } else if (_typeof(checkResult) === 'object' && checkResult.hasError) {\n        return checkResult;\n      }\n    }\n\n    return null;\n  };\n}\n\nfunction createValidatorAsync(data) {\n  function check(errorMessage) {\n    return function (checkResult) {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: errorMessage\n        };\n      } else if (_typeof(checkResult) === 'object' && checkResult.hasError) {\n        return checkResult;\n      }\n\n      return null;\n    };\n  }\n\n  return function (value, rules) {\n    var promises = rules.map(function (rule) {\n      var onValid = rule.onValid,\n          errorMessage = rule.errorMessage;\n      return Promise.resolve(onValid(value, data)).then(check(errorMessage));\n    });\n    return Promise.all(promises).then(function (results) {\n      return results.find(function (item) {\n        return item && item.hasError;\n      });\n    });\n  };\n}\n\nvar Type =\n/*#__PURE__*/\nfunction () {\n  function Type(name) {\n    this.name = name;\n    this.required = false;\n    this.requiredMessage = '';\n    this.trim = false;\n    this.emptyAllowed = false;\n    this.rules = [];\n    this.priorityRules = []; // Priority check rule\n  }\n\n  var _proto = Type.prototype;\n\n  _proto.check = function check(value, data) {\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return {\n        hasError: true,\n        errorMessage: this.requiredMessage\n      };\n    }\n\n    var validator = createValidator(data);\n    var checkStatus = validator(value, this.priorityRules);\n\n    if (checkStatus) {\n      return checkStatus;\n    }\n\n    if (!this.required && isEmpty(value)) {\n      return {\n        hasError: false\n      };\n    }\n\n    return validator(value, this.rules) || {\n      hasError: false\n    };\n  };\n\n  _proto.checkAsync = function checkAsync(value, data) {\n    var _this = this;\n\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return Promise.resolve({\n        hasError: true,\n        errorMessage: this.requiredMessage\n      });\n    }\n\n    var validator = createValidatorAsync(data);\n    return new Promise(function (resolve) {\n      return validator(value, _this.priorityRules).then(function (checkStatus) {\n        if (checkStatus) {\n          resolve(checkStatus);\n        }\n      }).then(function () {\n        if (!_this.required && isEmpty(value)) {\n          resolve({\n            hasError: false\n          });\n        }\n      }).then(function () {\n        return validator(value, _this.rules);\n      }).then(function (checkStatus) {\n        if (checkStatus) {\n          resolve(checkStatus);\n        }\n\n        resolve({\n          hasError: false\n        });\n      });\n    });\n  };\n\n  _proto.pushRule = function pushRule(onValid, errorMessage, priority) {\n    errorMessage = errorMessage || this.rules[0].errorMessage;\n\n    if (priority) {\n      this.priorityRules.push({\n        onValid: onValid,\n        errorMessage: errorMessage\n      });\n    } else {\n      this.rules.push({\n        onValid: onValid,\n        errorMessage: errorMessage\n      });\n    }\n  };\n\n  _proto.addRule = function addRule(onValid, errorMessage, priority) {\n    this.pushRule(onValid, errorMessage, priority);\n    return this;\n  };\n\n  _proto.isRequired = function isRequired(errorMessage) {\n    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.required = true;\n    this.trim = trim;\n    this.requiredMessage = errorMessage;\n    return this;\n  };\n\n  _proto.isRequiredOrEmpty = function isRequiredOrEmpty(errorMessage) {\n    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.required = true;\n    this.trim = trim;\n    this.emptyAllowed = true;\n    this.requiredMessage = errorMessage;\n    return this;\n  };\n\n  return Type;\n}();\n\nvar _default = Type;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}