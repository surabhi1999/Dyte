{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ownerDocument, activeElement, contains, getContainer, on } from 'dom-lib';\nimport canUseDom from 'dom-lib/lib/query/canUseDOM';\nimport Portal from '../Portal';\nimport ModalManager from './ModalManager';\nimport Fade from '../Animation/Fade';\nimport getDOMNode from '../utils/getDOMNode';\nimport mergeRefs from '../utils/mergeRefs';\n\nvar RefHolder =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(RefHolder, _React$Component);\n\n  function RefHolder() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = RefHolder.prototype;\n\n  _proto.render = function render() {\n    return this.props.children || null;\n  };\n\n  return RefHolder;\n}(React.Component);\n\nvar modalManager = new ModalManager();\n\nvar BaseModal =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inheritsLoose(BaseModal, _React$Component2);\n\n  function BaseModal(props) {\n    var _this;\n\n    _this = _React$Component2.call(this, props) || this;\n    _this.mountNode = null;\n    _this.modalNodeRef = null;\n    _this.backdropRef = null;\n    _this.dialogRef = null;\n    _this.lastFocus = null;\n    _this.onDocumentKeyupListener = null;\n    _this.onFocusinListener = null;\n\n    _this.setMountNodeRef = function (ref) {\n      var _ref$getMountNode;\n\n      _this.mountNode = ref === null || ref === void 0 ? void 0 : (_ref$getMountNode = ref.getMountNode) === null || _ref$getMountNode === void 0 ? void 0 : _ref$getMountNode.call(ref);\n    };\n\n    _this.handleHidden = function (args) {\n      var _this$props$onExited, _this$props;\n\n      _this.setState({\n        exited: true\n      });\n\n      _this.onHide();\n\n      (_this$props$onExited = (_this$props = _this.props).onExited) === null || _this$props$onExited === void 0 ? void 0 : _this$props$onExited.call(_this$props, args);\n    };\n\n    _this.handleBackdropClick = function (event) {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          onBackdropClick = _this$props2.onBackdropClick,\n          backdrop = _this$props2.backdrop,\n          onHide = _this$props2.onHide;\n      onBackdropClick === null || onBackdropClick === void 0 ? void 0 : onBackdropClick(event);\n      backdrop && (onHide === null || onHide === void 0 ? void 0 : onHide(event));\n    };\n\n    _this.handleDocumentKeyUp = function (event) {\n      var _this$props3 = _this.props,\n          keyboard = _this$props3.keyboard,\n          onHide = _this$props3.onHide,\n          onEscapeKeyUp = _this$props3.onEscapeKeyUp;\n\n      if (keyboard && event.keyCode === 27 && _this.isTopModal()) {\n        onEscapeKeyUp === null || onEscapeKeyUp === void 0 ? void 0 : onEscapeKeyUp(event);\n        onHide === null || onHide === void 0 ? void 0 : onHide(event);\n      }\n    };\n\n    _this.enforceFocus = function () {\n      var enforceFocus = _this.props.enforceFocus;\n\n      if (!enforceFocus || !_this.isTopModal()) {\n        return;\n      }\n\n      var active = activeElement(ownerDocument(_assertThisInitialized(_this)));\n\n      var modal = _this.getDialogElement();\n\n      if (modal && modal !== active && !contains(modal, active)) {\n        modal.focus();\n      }\n    };\n\n    _this.state = {\n      exited: !props.show\n    };\n    _this.backdropRef = React.createRef();\n    _this.modalNodeRef = React.createRef();\n    _this.dialogRef = React.createRef();\n    return _this;\n  }\n\n  var _proto2 = BaseModal.prototype;\n\n  _proto2.componentDidMount = function componentDidMount() {\n    if (this.props.show) {\n      this.onShow();\n    }\n  };\n\n  BaseModal.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if (nextProps.show) {\n      return {\n        exited: false\n      };\n    } else if (!nextProps.transition) {\n      // Otherwise let handleHidden take care of marking exited.\n      return {\n        exited: true\n      };\n    }\n\n    return null;\n  };\n\n  _proto2.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate(prevProps) {\n    if (this.props.show && !prevProps.show) {\n      this.checkForFocus();\n    }\n\n    return null;\n  };\n\n  _proto2.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var transition = this.props.transition;\n\n    if (prevProps.show && !this.props.show && !transition) {\n      // Otherwise handleHidden will call this.\n      this.onHide();\n    } else if (!prevProps.show && this.props.show) {\n      this.onShow();\n    }\n  };\n\n  _proto2.componentWillUnmount = function componentWillUnmount() {\n    var _this$props4 = this.props,\n        show = _this$props4.show,\n        transition = _this$props4.transition;\n\n    if (show || transition && !this.state.exited) {\n      this.onHide();\n    }\n  };\n\n  _proto2.onShow = function onShow() {\n    var _this$props$onShow, _this$props5;\n\n    var doc = ownerDocument(this);\n    var container = getContainer(this.props.container, doc.body);\n    var containerClassName = this.props.containerClassName;\n    modalManager.add(this, container, containerClassName);\n    this.onDocumentKeyupListener = on(doc, 'keyup', this.handleDocumentKeyUp);\n    this.onFocusinListener = on(doc, 'focus', this.enforceFocus);\n    (_this$props$onShow = (_this$props5 = this.props).onShow) === null || _this$props$onShow === void 0 ? void 0 : _this$props$onShow.call(_this$props5);\n  };\n\n  _proto2.onHide = function onHide() {\n    var _this$onDocumentKeyup, _this$onFocusinListen;\n\n    modalManager.remove(this);\n    (_this$onDocumentKeyup = this.onDocumentKeyupListener) === null || _this$onDocumentKeyup === void 0 ? void 0 : _this$onDocumentKeyup.off();\n    (_this$onFocusinListen = this.onFocusinListener) === null || _this$onFocusinListen === void 0 ? void 0 : _this$onFocusinListen.off();\n    this.restoreLastFocus();\n  };\n\n  _proto2.getDialogElement = function getDialogElement() {\n    return getDOMNode(this.dialogRef.current);\n  };\n\n  _proto2.isTopModal = function isTopModal() {\n    return modalManager.isTopModal(this);\n  };\n\n  _proto2.checkForFocus = function checkForFocus() {\n    if (canUseDom) {\n      this.lastFocus = activeElement();\n    }\n  };\n\n  _proto2.restoreLastFocus = function restoreLastFocus() {\n    // Support: <=IE11 doesn't support `focus()` on svg elements\n    if (this.lastFocus) {\n      var _this$lastFocus$focus, _this$lastFocus;\n\n      (_this$lastFocus$focus = (_this$lastFocus = this.lastFocus).focus) === null || _this$lastFocus$focus === void 0 ? void 0 : _this$lastFocus$focus.call(_this$lastFocus);\n      this.lastFocus = null;\n    }\n  };\n\n  _proto2.renderBackdrop = function renderBackdrop() {\n    var _this2 = this;\n\n    var _this$props6 = this.props,\n        transition = _this$props6.transition,\n        backdrop = _this$props6.backdrop,\n        backdropTransitionTimeout = _this$props6.backdropTransitionTimeout,\n        backdropStyle = _this$props6.backdropStyle,\n        backdropClassName = _this$props6.backdropClassName;\n    var backdropPorps = {\n      style: backdropStyle,\n      onClick: backdrop === true ? this.handleBackdropClick : undefined\n    };\n\n    if (transition) {\n      return React.createElement(Fade, {\n        transitionAppear: true,\n        in: this.props.show,\n        timeout: backdropTransitionTimeout\n      }, function (props, ref) {\n        var className = props.className,\n            rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n        return React.createElement(\"div\", _extends({}, rest, backdropPorps, {\n          className: classNames(backdropClassName, className),\n          ref: mergeRefs(_this2.backdropRef, ref)\n        }));\n      });\n    }\n\n    return React.createElement(\"div\", _extends({\n      ref: this.backdropRef,\n      className: backdropClassName\n    }, backdropPorps));\n  };\n\n  _proto2.render = function render() {\n    var _this$props7 = this.props,\n        children = _this$props7.children,\n        Transition = _this$props7.transition,\n        backdrop = _this$props7.backdrop,\n        dialogTransitionTimeout = _this$props7.dialogTransitionTimeout,\n        style = _this$props7.style,\n        className = _this$props7.className,\n        container = _this$props7.container,\n        animationProps = _this$props7.animationProps,\n        onExit = _this$props7.onExit,\n        onExiting = _this$props7.onExiting,\n        onEnter = _this$props7.onEnter,\n        onEntering = _this$props7.onEntering,\n        onEntered = _this$props7.onEntered,\n        rest = _objectWithoutPropertiesLoose(_this$props7, [\"children\", \"transition\", \"backdrop\", \"dialogTransitionTimeout\", \"style\", \"className\", \"container\", \"animationProps\", \"onExit\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"]);\n\n    var show = !!rest.show;\n    var mountModal = show || Transition && !this.state.exited;\n\n    if (!mountModal) {\n      return null;\n    }\n\n    var dialog = children;\n\n    if (Transition) {\n      dialog = React.createElement(Transition, _extends({}, animationProps, {\n        transitionAppear: true,\n        unmountOnExit: true,\n        in: show,\n        timeout: dialogTransitionTimeout,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: this.handleHidden,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered\n      }), dialog);\n    }\n\n    return React.createElement(Portal, {\n      ref: this.setMountNodeRef,\n      container: container\n    }, React.createElement(\"div\", {\n      ref: this.modalNodeRef,\n      role: rest.role,\n      style: style,\n      className: className\n    }, backdrop && this.renderBackdrop(), React.createElement(RefHolder, {\n      ref: this.dialogRef\n    }, dialog)));\n  };\n\n  return BaseModal;\n}(React.Component);\n\nBaseModal.manager = modalManager;\nBaseModal.defaultProps = {\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true\n};\nexport default BaseModal;","map":null,"metadata":{},"sourceType":"module"}